<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Syntex | Chasing Rabbits]]></title>
  <link href="http://erickt.github.io/blog/categories/syntex/atom.xml" rel="self"/>
  <link href="http://erickt.github.io/"/>
  <updated>2015-08-09T09:53:01-07:00</updated>
  <id>http://erickt.github.io/</id>
  <author>
    <name><![CDATA[Erick Tryzelaar]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Serde 0.4.0 - Syntax Extensions in Stable Rust and More!]]></title>
    <link href="http://erickt.github.io/blog/2015/05/18/serde-0-dot-4-0-now-supports-macros-in-stable-rust/"/>
    <updated>2015-05-18T07:57:19-07:00</updated>
    <id>http://erickt.github.io/blog/2015/05/18/serde-0-dot-4-0-now-supports-macros-in-stable-rust</id>
    <content type="html"><![CDATA[<p>Hello Internet! I&rsquo;m pleased to announce
<a href="https://github.com/serde-rs/serde">serde</a> 0.4.0, which now supports many new
features with help from our growing serde community. The largest is now serde
supports syntax extensions in stable Rust by way of
<a href="https://github.com/erickt/rust-syntex">syntex</a>. syntex is a fork of Rust&rsquo;s
parser library libsyntax that has been modified to enable code generation.
serde uses it along with a
<a href="http://doc.crates.io/build-script.html">Cargo build script</a> to expand the
<code>#[derive(Serialize, Deserialize)]</code> decorator annotations. Here&rsquo;s how to use
it.</p>

<p>First, lets start with a simple serde 0.3.x project that&rsquo;s forced to use
nightly because it uses <code>serde_macros</code>. The <code>Cargo.toml</code> is:</p>

<pre><code class="toml">[package]
name = "hello_world"
versio = "0.1.0"
authors = ["Erick Tryzelaar &lt;erick.tryzelaar@gmail.com&gt;"]
license = "MIT/Apache-2.0"

[dependencies]
serde = "*"
serde_macros = "*"
</code></pre>

<p>And the actual library is <code>src/lib.rs</code>:</p>

<pre><code class="rust">#![feature(custom_derive, plugin)]
#![plugin(serde_macros)]

extern crate serde;

#[derive(Serialize, Deserialize)]
pub struct Point {
    x: u32,
    y: u32,
}
</code></pre>

<p>In order to use Stable Rust, we can use the new <code>serde_codegen</code>. Our strategy
is to split our input into two files. The first is the entry point Cargo will
use to compile the library, <code>src/lib.rs</code>. The second is a template that
contains the macros, <code>src/lib.rs.in</code>. It will be expanded into
<code>$OUT_DIR/lib.rs</code>, which is included in <code>src/lib.rs</code>. So <code>src/lib.rs</code> looks
like:</p>

<pre><code class="rust">extern crate serde;

include!(concat!(env!("OUT_DIR"), "/lib.rs"));
</code></pre>

<p><code>src/lib.rs.in</code> then just looks like:</p>

<pre><code class="rust">#[derive(Serialize, Deserialize)]
pub struct Point {
    x: u32,
    y: u32,
}
</code></pre>

<p>In order to generate the <code>$OUT_DIR/lib.rs</code>, we&rsquo;ll use a Cargo build script.
We&rsquo;ll configure <code>Cargo.toml</code> with:</p>

<pre><code class="toml">[package]
name = "hello_world"
versio = "0.1.0"
authors = ["Erick Tryzelaar &lt;erick.tryzelaar@gmail.com&gt;"]
license = "MIT/Apache-2.0"
build = "build.rs"

[build-dependencies]
syntex = "*"
serde_codegen = "*"

[dependencies]
serde = "*"
</code></pre>

<p>Finally, the <code>build.rs</code> script itself uses <code>syntex</code> to expand the syntax
extensions:</p>

<pre><code class="rust">extern crate syntex;
extern crate serde_codegen;

use std::env;
use std::path::Path;

fn main() {
    let out_dir = env::var_os("OUT_DIR").unwrap();

    let src = Path::new("src/lib.rs.in");
    let dst = Path::new(&amp;out_dir).join("lib.rs");

    let mut registry = syntex::Registry::new();

    serde_codegen::register(&amp;mut registry);
    registry.expand("", &amp;src, &amp;dst).unwrap();
}
</code></pre>

<h2>Downside 1: Error Locations</h2>

<p>While <code>syntex</code> is quite powerful, there are a few major downsides. Rust does
not yet support the ability for a generated file to provide error location
information from a template file. This means that tracking down errors requires
manually looking at the generated code and trying to identify where the error
in the template. However, there is a workaround.  It&rsquo;s actually not that
difficult to support <code>syntex</code> and the Rust Nightly compiler plugins. To update
our example, we&rsquo;ll change the <code>Cargo.toml</code> to:</p>

<pre><code class="toml">[package]
name = "hello_world"
versio = "0.1.0"
authors = ["Erick Tryzelaar &lt;erick.tryzelaar@gmail.com&gt;"]
license = "MIT/Apache-2.0"
build = "build.rs"

[features]
default = ["with_syntex"]
nightly = ["serde_macros"]
with_syntex = ["serde", "serde_codegen"]

[build-dependencies]
syntex = { version = "*", optional = true }
serde_codegen = { version = "*", optional = true }

[dependencies]
serde = "*"
serde_macros = { version = "*", optional = true }
</code></pre>

<p>Then the <code>build.rs</code> is changed to optionally expand the macros in our template:</p>

<pre><code class="rust">#[cfg(feature = "with_syntex")]
mod inner {
    extern crate syntex;
    extern crate serde_codegen;

    use std::env;
    use std::path::Path;

    pub fn main() {
        let out_dir = env::var_os("OUT_DIR").unwrap();

        let src = Path::new("src/lib.rs.in");
        let dst = Path::new(&amp;out_dir).join("lib.rs");

        let mut registry = syntex::Registry::new();

        serde_codegen::register(&amp;mut registry);
        registry.expand("", &amp;src, &amp;dst).unwrap();
    }
}

#[cfg(not(feature = "with_syntex"))]
mod inner {
    pub fn main() {}
}

pub fn main() {
    inner::main()
}
</code></pre>

<p>Finally, <code>src/lib.rs</code> is updated to:</p>

<pre><code class="rust">#![cfg_attr(feature = "nightly", feature(plugin))]
#![cfg_attr(feature = "nightly", plugin(serde_macros))]

extern crate serde;

#[cfg(feature = "nightly")]
include!("lib.rs.in");

#[cfg(feature = "with_syntex")]
include!(concat!(env!("OUT_DIR"), "/lib.rs"));
</code></pre>

<p>Then most development can happen with using the Nightly Rust and
<code>cargo build --no-default-features --features nightly</code> for better error
messages, but downstream consumers can use Stable Rust without worry.</p>

<h2>Downside 2: Macros in Macros</h2>

<p>Syntex can only expand macros inside macros it knows about, and it doesn&rsquo;t know
about the builtin macros. This is because a lot of the stable macros are using
unstable features under the covers. So unfortunately if you&rsquo;re using a library
like the quasiquoting library <a href="https://github.com/erickt/rust-quasi">quasi</a>,
you cannot write:</p>

<pre><code class="rust">let exprs = vec![quote_expr!(cx, 1 + 2)];
</code></pre>

<p>Instead you have to pull out the syntex macros into a separate variable:</p>

<pre><code class="rust">let expr = quote_expr!(cx, 1 + 1);
let exprs = vec![expr];
</code></pre>

<h2>Downside 3: Compile Times</h2>

<p>Syntex can take a while to compile. It may be possible to optimize this, but
that may be difficult while keeping compatibility with <code>libsyntax</code>.</p>

<hr />

<p>That&rsquo;s <code>v0.4.0</code>. I hope you enjoy it! Please let me know if you run into any
<a href="https://github.com/serde-rs/serde/issues">problems</a>.</p>

<h2>Release Notes</h2>

<p>Here are other things that came with this version:</p>

<ul>
<li>Added field annotation to enable renaming fields for different backends
<a href="https://github.com/serde-rs/serde/pull/69">#69</a>. For example:</li>
</ul>


<pre><code class="rust">struct Point {
  #[serde(rename="X")]
  x: u32,

  #[serde(rename(json="the-x", xml="X")]
  y: u32,
}
</code></pre>

<ul>
<li>Faster JSON string parsing <a href="https://github.com/serde-rs/serde/pull/71">#71</a>.</li>
<li>Add a <code>LineColIterator</code> that tracks line and column information for
  deserializers <a href="https://github.com/serde-rs/serde/pull/58">#58</a>.</li>
<li>Improved bytestring support <a href="https://github.com/serde-rs/serde/pull/72">#72</a></li>
<li>Changed <code>de::PrimitiveVisitor</code> to also depend on <code>FromStr</code>
<a href="https://github.com/serde-rs/serde/pull/70">#70</a></li>
<li>Added impls for fixed sized arrays with 1 to 32 elements
<a href="https://github.com/serde-rs/serde/pull/74">#74</a></li>
<li>Added <code>json::Value::lookup</code>, that allows values to be extracted with
<code>value.lookup("foo.bar.baz")</code> <a href="https://github.com/serde-rs/serde/pull/76">#76</a></li>
</ul>


<p>Bug Fixes:</p>

<ul>
<li>Make sure that -0.0 gets serialized as &ldquo;-0.0&rdquo;
<a href="https://github.com/serde-rs/serde/commit/f0c87fb">f0c87fb</a>.</li>
<li>Missing field errors displayed original field name instead of renamed
<a href="https://github.com/serde-rs/serde/pull/64">#64</a>.</li>
<li>Fixed handling json integer overflow</li>
</ul>


<p>A special thanks to everyone that helped with this release:</p>

<ul>
<li>Alex Crichton</li>
<li>Andrew Poelstra</li>
<li>Corey Farwell</li>
<li>Hugo Duncan</li>
<li>Jorge Israel Pe√±a</li>
<li>Kang Seonghoon</li>
<li>Mikhail Borisov</li>
<li>Oliver Schneider</li>
<li>Sebastian Thiel</li>
<li>Steven Fackler</li>
<li>Thomas Bahn</li>
<li>derhaskell</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Syntex: Syntax Extensions for Rust 1.0]]></title>
    <link href="http://erickt.github.io/blog/2015/02/09/syntex-syntex-extensions-for-rust-1-dot-0/"/>
    <updated>2015-02-09T19:37:32-08:00</updated>
    <id>http://erickt.github.io/blog/2015/02/09/syntex-syntex-extensions-for-rust-1-dot-0</id>
    <content type="html"><![CDATA[<p>I use and love syntax extensions, and I&rsquo;m planning on using them to simplify
down how one interacts with a system like
<a href="https://github.com/erickt/rust-serde">serde</a>. Unfortunately though, to write
them you need to use Rust&rsquo;s <code>libsyntax</code>, which is not going to be exposed in
Rust 1.0 because we&rsquo;re not ready to stablize it&rsquo;s API. That would really hamper
future development of the compiler.</p>

<p>It would be so nice though, writing this for every type we want to serialize:</p>

<pre><code class="rust">#[derive_deserialize]
struct Point {
    x: int,
    y: int,
}
</code></pre>

<p>instead of:</p>

<pre><code class="rust">impl &lt;D: Deserializer&lt;E&gt;, E&gt; Deserialize&lt;D, E&gt; for Point {
    fn deserialize_token(state: &amp;mut D, token: Token) -&gt; Result&lt;Point, E&gt; {
        try!(state.expect_struct_start(token, "Point"));

        let mut x = None;
        let mut y = None;

        loop {
            let idx = match try!(state.expect_struct_field_or_end(&amp;["x", "y"])) {
                Some(idx) =&gt; idx,
                None =&gt; { break ; }
            };

            match idx {
                Some(0us) =&gt; { x = Some(try!(state.expect_struct_value())); }
                Some(1us) =&gt; { y = Some(try!(state.expect_struct_value())); }
                None | Some(_) =&gt; { panic!() }
            }
        }

        let x = match x {
            Some(x) =&gt; x,
            None =&gt; try!(state.missing_field("x")),
        };

        let y = match y {
            Some(y) =&gt; y,
            None =&gt; try!(state.missing_field("y")),
        };

        Ok(Point{x: x, y: y,})
    }
}
</code></pre>

<p>So I want to announce my plan on how to deal with this (and also publically
announce that everyone can blame me if this turns out to hurt Rust&rsquo;s future
development). I&rsquo;ve started <a href="https://github.com/erickt/rust-syntex">syntex</a>, a
library that enables code generation using an unofficial tracking fork of
<code>libsyntax</code>. In order to deal with the fact that <code>libsyntax</code> might make
breaking changes between minor Rust releases, we will just release a minor or
major release of <code>syntex</code>, depending on if there were any breaking changes in
<code>libsyntax</code>.  Ideally <code>syntex</code> will allow the community to experiment with
different code generation approaches to see what would be worth merging
upstream. Or even better, what hooks are needed in the compiler so it doesn&rsquo;t
have to think about syntax extensions at all.</p>

<p>I&rsquo;ve got the basic version working right now. Here&rsquo;s a simple
<code>hello_world_macros</code> syntax extension (you can see the actual code
<a href="https://github.com/erickt/rust-syntex/tree/master/hello_world">here</a>).
First, the <code>hello_world_macros/Cargo.toml</code>:</p>

<pre><code class="toml">[package]
name = "hello_world_macros"
version = "0.2.0"
authors = [ "erick.tryzelaar@gmail.com" ]

[dependencies]
syntex = "*"
syntex_syntax = "*"
</code></pre>

<p>The <code>syntex_syntax</code> is the crate for my fork of <code>libsyntax</code>, and <code>syntex</code>
provides some helper functions to ease registering syntax extensions.</p>

<p>Then the <code>src/lib.rs</code>, which declares a macro <code>hello_world</code> that just produces a
<code>"hello world"</code> string:</p>

<pre><code class="rust">extern crate syntex;
extern crate syntex_syntax;

use syntex::Registry;

use syntex_syntax::ast::TokenTree;
use syntex_syntax::codemap::Span;
use syntex_syntax::ext::base::{ExtCtxt, MacExpr, MacResult, TTMacroExpander};
use syntex_syntax::ext::build::AstBuilder;
use syntex_syntax::parse::token::InternedString;

fn expand_hello_world&lt;'cx&gt;(
    cx: &amp;'cx mut ExtCtxt,
    sp: Span,
    tts: &amp;[TokenTree]
) -&gt; Box&lt;MacResult + 'cx&gt; {
    let expr = cx.expr_str(sp, InternedString::new("hello world"));

    MacExpr::new(expr)
}

pub fn register(registry: &amp;mut Registry) {
    registry.register_fn("hello_world", expand_hello_world);
}
</code></pre>

<p>Now to use it. This is a little more complicated because we have to do code
generation, but Cargo helps with that. Our strategy is use a <code>build.rs</code> script
to do code generation in a <code>main.rss</code> file, and then use the <code>include!()</code> macro
to include it into our dummy <code>main.rs</code> file. Here&rsquo;s the <code>Cargo.toml</code> we need:</p>

<pre><code>[package]
name = "hello_world"
version = "0.2.0"
authors = [ "erick.tryzelaar@gmail.com" ]
build = "build.rs"

[build-dependencies]
syntex = "*"
syntex_syntax = "*"

[build-dependencies.hello_world_macros]
path = "hello_world_macros"
</code></pre>

<p>Here&rsquo;s the <code>build.rs</code>, which actually performs the code generation:</p>

<pre><code class="rust">extern crate syntex;
extern crate hello_world_macros;

use std::os;

fn main() {
    let mut registry = syntex::Registry::new();
    hello_world_macros::register(&amp;mut registry);

    registry.expand(
        "hello_world",
        &amp;Path::new("src/main.rss"),
        &amp;Path::new(os::getenv("OUT_DIR").unwrap()).join("main.rs"));
}
</code></pre>

<p>Our <code>main.rs</code> driver script:</p>

<pre><code class="rust">// Include the real main
include!(concat!(env!("OUT_DIR"), "/main.rs"));
</code></pre>

<p>And finally the <code>main.rss</code>:</p>

<pre><code class="rust">fn main() {
    let s = hello_world!();
    println!("{}", s);
}
</code></pre>

<p>One limitiation you can see above is that we unfortunately can&rsquo;t compose our
macros with the Rust macros is that <code>syntex</code> currently has no awareness of the
Rust macros, and since macros are parsed outside-in, we have to leave the
tokens inside a macro like <code>println!()</code> untouched.</p>

<hr />

<p>That&rsquo;s <code>syntex</code>. There is a bunch of more work left to be done in <code>syntex</code>
to make it really useable. There&rsquo;s also a lot of work in Rust and Cargo that
would help it be really effective:</p>

<ul>
<li>We need a way to inform Rust that this block of code is actually coming from
a different file than the one it&rsquo;s processing. This is roughly equivalent to
  the <a href="https://gcc.gnu.org/onlinedocs/cpp/Line-Control.html">#line</a> macros in
<code>C</code>.</li>
<li>We could upstream the &ldquo;ignore unknown macros&rdquo; patch to minimize
changes to <code>libsyntax</code>.</li>
<li>It would be nice if we could allow <code>#[path]</code> to reference an environment
variable. This would be a little cleaner than using <code>include!(...)</code>.</li>
<li>We need a way to extract macros from a crate.</li>
</ul>


<p>On Cargo&rsquo;s side:</p>

<ul>
<li>It would be nice if Cargo could be told to use a generated file as the
<code>main.rs</code>/<code>lib.rs</code>/etc.</li>
<li><code>Cargo.toml</code> could grow a plugin mechanism to remove the need to write a
<code>build.rs</code> script.</li>
</ul>


<p>I&rsquo;m sure there&rsquo;s plenty more that needs to get done! So, please help out!</p>

<p>edit: comments on <a href="https://www.reddit.com/r/rust/comments/2vdzd1/syntex_syntax_extensions_for_rust_10/">reddit</a></p>
]]></content>
  </entry>
  
</feed>
