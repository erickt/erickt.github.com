<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Database | Chasing Rabbits]]></title>
  <link href="http://erickt.github.io/blog/categories/database/atom.xml" rel="self"/>
  <link href="http://erickt.github.io/"/>
  <updated>2015-05-19T16:23:12-07:00</updated>
  <id>http://erickt.github.io/</id>
  <author>
    <name><![CDATA[Erick Tryzelaar]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using Rust to Make a Safer Interface for Yahoo's Fast MDBM Database]]></title>
    <link href="http://erickt.github.io/blog/2014/12/13/rust-and-mdbm/"/>
    <updated>2014-12-13T11:09:19-08:00</updated>
    <id>http://erickt.github.io/blog/2014/12/13/rust-and-mdbm</id>
    <content type="html"><![CDATA[<p>I&rsquo;m really supposed to be working on my
<a href="http://erickt.github.io/blog/categories/serialization/">serialization series</a>,
 but I just saw a neat new library that was open sourced by Yahoo a couple days
ago called <a href="https://github.com/yahoo/mdbm">MDBM</a> on
<a href="https://news.ycombinator.com/item?id=8732891">Hacker News</a>. I know nothing
about the library, but there are some really neat claims:</p>

<ol>
<li>It&rsquo;s supposed to be fast, and that&rsquo;s always nice.</li>
<li>It&rsquo;s supposed to have a really slim interface.</li>
<li>It&rsquo;s so fast because it&rsquo;s passing around naked pointers to mmapped files,
which is terribly unsafe. Unless you got rust which can prove that those
pointers won&rsquo;t escape :)</li>
</ol>


<p>So I wanted to see how easy it&rsquo;d be to make a Rust binding for the project.
If you want to follow along, first make sure you have
 <a href="http://www.rust-lang.org/install.html">rust installed</a>. Unfortunately it
looks like MDBM only supports Linux and FreeBSD, so I had to build out a Fedora
VM to test this out on. I <em>think</em> this is all you need to build it:</p>

<pre><code>% git clone https://github.com/yahoo/mdbm
% cd mdbm/redhat
% make
% rpm -Uvh ~/rpmbuild/RPMS/x86_64/mdbm-4.11.1-1.fc21.x86_64.rpm
% rpm -Uvh ~/rpmbuild/RPMS/x86_64/mdbm-devel-4.11.1-1.fc21.x86_64.rpm
</code></pre>

<p>Unfortunately it&rsquo;s only for linux, and I got a mac, but it turns out there&rsquo;s
plenty I can do to prep while VirtualBox and Fedora 21 download. Lets start out
by creating our project with <a href="https://crates.io">cargo</a>:</p>

<pre><code>% cargo new mdbm
% cd rust-mdbm
</code></pre>

<p>(Right now there&rsquo;s no way to have the name be different than the path, so edit
<code>Cargo.toml</code> to rename the project to <code>mdbm</code>. I filed
<a href="https://github.com/rust-lang/cargo/issues/1030">#1030</a> to get that
implemented).</p>

<p>By convention, we put bindgen packages into <code>$name-sys</code>, so make that crate as
well:</p>

<pre><code>% cargo new --no-git mdbm-sys
% cd mdbm-sys
</code></pre>

<p>We&rsquo;ve got a really cool tool called
<a href="https://github.com/crabtw/rust-bindgen">bindgen</a>, which uses clang to parse
header files and convert them into an unsafe rust interface. So lets check out
MDBM, and generate a crate to wrap it up in.</p>

<pre><code>% cd ../..
% git clone git@github.com:crabtw/rust-bindgen.git
% cd rust-bindgen
% cargo build
% cd ..
% git clone git@github.com:yahoo/mdbm.git
% cd rust-mdbm/mdbm-sys
% DYLD_LIBRARY_PATH=/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib \
  ~/rust/rust-bindgen/target/bindgen \
  -lmdbm \
  -o src/lib.rs \
  mdbm/include/mdbm.h
</code></pre>

<p>Pretty magical. Make sure it builds:</p>

<pre><code>% cargo build
/Users/erickt/rust-mdbm/mdbm-sys/src/lib.rs:3:21: 3:25 error: failed to resolve. Maybe a missing `extern crate libc`?
/Users/erickt/rust-mdbm/mdbm-sys/src/lib.rs:3 pub type __int8_t = ::libc::c_char;
                                                                  ^~~~
/Users/erickt/rust-mdbm/mdbm-sys/src/lib.rs:3:21: 3:35 error: use of undeclared type name `libc::c_char`
/Users/erickt/rust-mdbm/mdbm-sys/src/lib.rs:3 pub type __int8_t = ::libc::c_char;
                                                                  ^~~~~~~~~~~~~~
/Users/erickt/rust-mdbm/mdbm-sys/src/lib.rs:4:22: 4:26 error: failed to resolve. Maybe a missing `extern crate libc`?
/Users/erickt/rust-mdbm/mdbm-sys/src/lib.rs:4 pub type __uint8_t = ::libc::c_uchar;
                                                                   ^~~~
...
</code></pre>

<p>Nope! The problem is that we don&rsquo;t have the <code>libc</code> crate imported. We don&rsquo;t
have a convention yet for this, but I like to do is:</p>

<pre><code>mv src/lib.rs src/ffi.rs
</code></pre>

<p>And create a <code>src/lib.rs</code> that contains:</p>

<pre><code class="rust">#![allow(non_camel_case_types)]
#![allow(non_snake_case)]

extern crate libc;

type __builtin_va_list = libc::c_void;

include!("ffi.rs")
</code></pre>

<p>This lets me run bindgen later on without mucking up the library. This now
compiles. Next up is our high level interface. Add <code>mdbm-sys</code> to our high level
interface by adding this to the <code>rust-mdbm/Cargo.toml</code> file:</p>

<pre><code class="toml">[dependencies.mdbm-sys]
path = "mdbm-sys"
</code></pre>

<p>By now I got my VirtualBox setup working, so now to the actual code! Lets start
with a barebones wrapper around the database:</p>

<pre><code class="rust">pub struct MDBM {
    db: *mut mdbm_sys::MDBM,
}
</code></pre>

<p>Next is the constructor and destructor. I&rsquo;m hardcoding things for now and using
IoError, since MDBM appears to log everything to the ERRNO:</p>

<pre><code>impl MDBM {
    pub fn new(
        path: &amp;Path,
        flags: uint,
        mode: uint,
        psize: uint,
        presize: uint
    ) -&gt; Result&lt;MDBM, IoError&gt; {
        unsafe {
            let path = path.to_c_str();
            let db = mdbm_sys::mdbm_open(
                path.as_ptr(),
                flags as libc::c_int,
                mode as libc::c_int,
                psize as libc::c_int,
                presize as libc::c_int);

            if db.is_null() {
                Err(IoError::last_error())
            } else {
                Ok(MDBM { db: db })
            }
        }
    }

    ...
}

impl Drop for MDBM {
    fn drop(&amp;mut self) {
        unsafe {
            mdbm_sys::mdbm_sync(self.db);
            mdbm_sys::mdbm_close(self.db);
        }
    }
}
</code></pre>

<p>Pretty straightforward translation of the examples with some hardcoded values
to start out. Next up is a wrapper around MDBM&rsquo;s <code>datum</code> type, which is the
type used for both keys and values. <code>datum</code> is just a simple struct containing
a pointer and length, pretty much analogous to our <code>&amp;[u8]</code> slices. However our
slices are much more powerful because our type system can guarantee that in
safe Rust, these slices can never outlive where they are derived from:</p>

<pre><code class="rust">pub struct Datum&lt;'a&gt; {
    bytes: &amp;'a [u8],
}

impl&lt;'a&gt; Datum&lt;'a&gt; {
    pub fn new(bytes: &amp;[u8]) -&gt; Datum {
        Datum { bytes: bytes }
    }
}

fn to_raw_datum(datum: &amp;Datum) -&gt; mdbm_sys::datum {
    mdbm_sys::datum {
        dptr: datum.bytes.as_ptr() as *mut _,
        dsize: datum.bytes.len() as libc::c_int,
    }
}
</code></pre>

<p>And for convenience, lets add a <code>AsDatum</code> conversion method:</p>

<pre><code class="rust">pub trait AsDatum for Sized? {
    fn as_datum&lt;'a&gt;(&amp;'a self) -&gt; Datum&lt;'a&gt;;
}

impl&lt;'a, Sized? T: AsDatum&gt; AsDatum for &amp;'a T {
    fn as_datum&lt;'a&gt;(&amp;'a self) -&gt; Datum&lt;'a&gt; { (**self).as_datum() }
}

impl AsDatum for [u8] {
    fn as_datum&lt;'a&gt;(&amp;'a self) -&gt; Datum&lt;'a&gt; {
        Datum::new(self)
    }
}

impl AsDatum for str {
    fn as_datum&lt;'a&gt;(&amp;'a self) -&gt; Datum&lt;'a&gt; {
        self.as_bytes().as_datum()
    }
}
</code></pre>

<p>And finally, we got setting and getting a key-value. Setting is pretty
straightforward. The only fun thing is using the <code>AsDatum</code> constraints so we
can do <code>db.set(&amp;"foo", &amp;"bar", 0)</code> instead of
<code>db.set(Datum::new(&amp;"foo".as_slice()), Datum::new("bar".as_slice()), 0)</code>.
we&rsquo;re copying into the database, we don&rsquo;t have to worry about lifetimes yet:</p>

<pre><code class="rust">impl MDBM {
    ...

    /// Set a key.
    pub fn set&lt;K, V&gt;(&amp;self, key: &amp;K, value: &amp;V, flags: int) -&gt; Result&lt;(), IoError&gt; where
        K: AsDatum,
        V: AsDatum,
    {
        unsafe {
            let rc = mdbm_sys::mdbm_store(
                self.db,
                to_raw_datum(&amp;key.as_datum()),
                to_raw_datum(&amp;value.as_datum()),
                flags as libc::c_int);

            if rc == -1 {
                Err(IoError::last_error())
            } else {
                Ok(())
            }
        }
    }

    ...
</code></pre>

<p>MDBM requires the database to be locked in order to get the keys. This os
where things get fun in order to prevent those interior pointers from escaping.
We&rsquo;ll create another wrapper type that manages the lock, and uses RAII to
unlock when we&rsquo;re done. We tie the lifetime of the <code>Lock</code> to the lifetime of
the database and key, which prevents it from outliving either object:</p>

<pre><code class="rust">impl MDBM {
    ...

    /// Lock a key.
    pub fn lock&lt;'a, K&gt;(&amp;'a self, key: &amp;'a K, flags: int) -&gt; Result&lt;Lock&lt;'a&gt;, IoError&gt; where
        K: AsDatum,
    {
        let rc = unsafe {
            mdbm_sys::mdbm_lock_smart(
                self.db,
                &amp;to_raw_datum(&amp;key.as_datum()),
                flags as libc::c_int)
        };

        if rc == 1 {
            Ok(Lock { db: self, key: key.as_datum() })
        } else {
            Err(IoError::last_error())
        }
    }

    ...
}

pub struct Lock&lt;'a&gt; {
    db: &amp;'a MDBM,
    key: Datum&lt;'a&gt;,
}

#[unsafe_destructor]
impl&lt;'a&gt; Drop for Lock&lt;'a&gt; {
    fn drop(&amp;mut self) {
        unsafe {
            let rc = mdbm_sys::mdbm_unlock_smart(
                self.db.db,
                &amp;to_raw_datum(&amp;self.key),
                0);

            assert_eq!(rc, 1);
        }
    }
}
</code></pre>

<p>(Note that I&rsquo;ve heard <code>#[unsafe_destrutor]</code> as used here may become unnecessary
in 1.0).</p>

<p>Finally, let&rsquo;s get our value! Assuming the value exists, we tie the lifetime of
the <code>Lock</code> to the lifetime of the returned <code>&amp;[u8]</code>:</p>

<pre><code class="rust">impl&lt;'a&gt; Lock&lt;'a&gt; {
    /// Fetch a key.
    pub fn get&lt;'a&gt;(&amp;'a self) -&gt; Option&lt;&amp;'a [u8]&gt; {
        unsafe {
            let value = mdbm_sys::mdbm_fetch(
                self.db.db,
                to_raw_datum(&amp;self.key));

            if value.dptr.is_null() {
                None
            } else {
                // we want to constrain the ptr to our lifetime.
                let ptr: &amp;*const u8 = mem::transmute(&amp;value.dptr);
                Some(slice::from_raw_buf(ptr, value.dsize as uint))
            }
        }
    }
}
</code></pre>

<p>Now to verify it works:</p>

<pre><code class="rust">#[test]
fn test() {
    let db = MDBM::new(
        &amp;Path::new("test.db"),
        super::MDBM_O_RDWR | super::MDBM_O_CREAT,
        0o644,
        0,
        0
    ).unwrap();

    db.set(&amp;"hello", &amp;"world", 0).unwrap();

    {
        // key needs to be an lvalue so the lock can hold a reference to
        // it.
        let key = "hello";

        // Lock the key. RAII will unlock it when we exit this scope.
        let value = db.lock(&amp;key, 0).unwrap();

        // Convert the value into a string. The lock is still live at this
        // point.
        let value = str::from_utf8(value.get().unwrap()).unwrap();
        assert_eq!(value, "world");
        println!("hello: {}", value);
    }
}
</code></pre>

<p>Which when run with <code>cargo test</code>, produces:</p>

<pre><code>   Compiling rust-mdbm v0.0.1 (file:///home/erickt/Projects/rust-mdbm)
     Running target/rust-mdbm-98b81ab156dc1e5f

running 1 test
test tests::test_set_get ... ok

test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured

   Doc-tests rust-mdbm

running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured
</code></pre>

<p>Next we want to make sure invalid behavior is a compile-time error. First, make
sure we don&rsquo;t leak the keys:</p>

<pre><code class="rust">#[test]
fn test_keys_cannot_escape() {
    let db = MDBM::new(
        &amp;Path::new("test.db"),
        super::MDBM_O_RDWR | super::MDBM_O_CREAT,
        0o644,
        0,
        0
    ).unwrap();

    db.set(&amp;"hello", &amp;"world", 0).unwrap();

    let _ = {
        let key = vec![1];
        db.lock(&amp;key.as_slice(), 0).unwrap()
    };
}
</code></pre>

<p>Which errors with:</p>

<pre><code>src/lib.rs:217:22: 217:25 error: `key` does not live long enough
src/lib.rs:217             db.lock(&amp;key.as_slice(), 0).unwrap()
                                    ^~~
src/lib.rs:215:17: 218:10 note: reference must be valid for the expression at 215:16...
src/lib.rs:215         let _ = {
src/lib.rs:216             let key = vec![1];
src/lib.rs:217             db.lock(&amp;key.as_slice(), 0).unwrap()
src/lib.rs:218         };
src/lib.rs:215:17: 218:10 note: ...but borrowed value is only valid for the block at 215:16
src/lib.rs:215         let _ = {
src/lib.rs:216             let key = vec![1];
src/lib.rs:217             db.lock(&amp;key.as_slice(), 0).unwrap()
src/lib.rs:218         };
error: aborting due to previous error
</code></pre>

<p>And confirm the value doesn&rsquo;t leak either:</p>

<pre><code class="rust">#[test]
fn test_values_cannot_escape() {
    let db = MDBM::new(
        &amp;Path::new("test.db"),
        super::MDBM_O_RDWR | super::MDBM_O_CREAT,
        0o644,
        0,
        0
    ).unwrap();

    let _ = {
        db.set(&amp;"hello", &amp;"world", 0).unwrap();

        let key = "hello";
        let value = db.lock(&amp;key, 0).unwrap();
        str::from_utf8(value.get().unwrap()).unwrap()
    };
}
</code></pre>

<p>Which errors with:</p>

<pre><code>src/lib.rs:237:34: 237:37 error: `key` does not live long enough
src/lib.rs:237             let value = db.lock(&amp;key, 0).unwrap();
                                                ^~~
src/lib.rs:233:17: 239:10 note: reference must be valid for the expression at 233:16...
src/lib.rs:233         let _ = {
src/lib.rs:234             db.set(&amp;"hello", &amp;"world", 0).unwrap();
src/lib.rs:235
src/lib.rs:236             let key = "hello";
src/lib.rs:237             let value = db.lock(&amp;key, 0).unwrap();
src/lib.rs:238             str::from_utf8(value.get().unwrap()).unwrap()
               ...
src/lib.rs:233:17: 239:10 note: ...but borrowed value is only valid for the block at 233:16
src/lib.rs:233         let _ = {
src/lib.rs:234             db.set(&amp;"hello", &amp;"world", 0).unwrap();
src/lib.rs:235
src/lib.rs:236             let key = "hello";
src/lib.rs:237             let value = db.lock(&amp;key, 0).unwrap();
src/lib.rs:238             str::from_utf8(value.get().unwrap()).unwrap()
               ...
src/lib.rs:238:28: 238:33 error: `value` does not live long enough
src/lib.rs:238             str::from_utf8(value.get().unwrap()).unwrap()
                                          ^~~~~
src/lib.rs:233:17: 239:10 note: reference must be valid for the expression at 233:16...
src/lib.rs:233         let _ = {
src/lib.rs:234             db.set(&amp;"hello", &amp;"world", 0).unwrap();
src/lib.rs:235
src/lib.rs:236             let key = "hello";
src/lib.rs:237             let value = db.lock(&amp;key, 0).unwrap();
src/lib.rs:238             str::from_utf8(value.get().unwrap()).unwrap()
               ...
src/lib.rs:233:17: 239:10 note: ...but borrowed value is only valid for the block at 233:16
src/lib.rs:233         let _ = {
src/lib.rs:234             db.set(&amp;"hello", &amp;"world", 0).unwrap();
src/lib.rs:235
src/lib.rs:236             let key = "hello";
src/lib.rs:237             let value = db.lock(&amp;key, 0).unwrap();
src/lib.rs:238             str::from_utf8(value.get().unwrap()).unwrap()
                                                     ...
</code></pre>

<p>Success! Not too bad for 2 hours of work. Baring bugs, this <code>mdbm</code>
library should perform at roughly the same speed as the C library, but
eliminate many very painful bug opportunities that require tools like Valgrind
to debug.</p>
]]></content>
  </entry>
  
</feed>
