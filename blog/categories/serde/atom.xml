<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Serde | Chasing Rabbits]]></title>
  <link href="http://erickt.github.io/blog/categories/serde/atom.xml" rel="self"/>
  <link href="http://erickt.github.io/"/>
  <updated>2016-02-05T16:49:48-08:00</updated>
  <id>http://erickt.github.io/</id>
  <author>
    <name><![CDATA[Erick Tryzelaar]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Serde 0.5.0 - Many Many Changes]]></title>
    <link href="http://erickt.github.io/blog/2015/08/07/serde-0-dot-5-0-many-many-changes/"/>
    <updated>2015-08-07T08:14:22-07:00</updated>
    <id>http://erickt.github.io/blog/2015/08/07/serde-0-dot-5-0-many-many-changes</id>
    <content type="html"><![CDATA[<p>Hello all you beautiful and talented people! I&rsquo;m pleased to announce
<a href="https://github.com/serde-rs/serde">serde</a> 0.5.0. We&rsquo;re bumping the major
(unstable) version number here because there have been a huge amount of
breaking changes in the API. This has been done to better support serialization
formats like <a href="https://github.com/TyOverby/bincode">bincode</a>, which relies on
the <code>Serialize</code>e to hint to the <code>Serializer</code> how to parse the next bytes.
This will enable <a href="https://github.com/servo/servo/pull/6583">Servo</a> to use
bincode for its IPC protocol.</p>

<p>Here are the major changes:</p>

<ul>
<li><code>serde::json</code> was factored out into its own separate crate
<a href="https://crates.io/crates/serde_json">serde_json</a>
  <a href="https://github.com/serde-rs/serde/pull/114">#114</a>.</li>
<li>Added serialization and deserialization type hints.</li>
<li>Renamed many functions to change <code>visit_named_{map,seq}</code> to
  <code>visit_struct</code> and <code>visit_tuple_struct</code>
  <a href="https://github.com/serde-rs/serde/pull/114">#114</a>
<a href="https://github.com/serde-rs/serde/pull/120">#120</a>.</li>
<li>Added hooks to allow serializers to serialize newtype tuple structs without a
wrapper type <a href="https://github.com/serde-rs/serde/pull/121">#121</a>.</li>
<li>Remove <code>_error</code> from <code>de::Error</code>
<a href="https://github.com/serde-rs/serde/pull/129">#129</a>.</li>
<li>Rewrote json parser to not consume the whole stream
<a href="https://github.com/serde-rs/serde/pull/127">#127</a>.</li>
<li>Fixed <code>serde_macros</code> for generating fully generic code
<a href="https://github.com/serde-rs/serde/pull/117">#117</a>.</li>
</ul>


<p>Thank you to everyone that&rsquo;s helped with this release:</p>

<ul>
<li>Craig Brandenburg</li>
<li>Hugo Duncan</li>
<li>Jarred Nicholis</li>
<li>Oliver Schneider</li>
<li>Patrick Walton</li>
<li>Sebastian Thiel</li>
<li>Skylar Lipthay</li>
<li>Thomas Bahn</li>
<li>dswd</li>
</ul>


<h1>Benchmarks</h1>

<p>It&rsquo;s been a bit since we last did some
<a href="https://erickt.github.io/blog/2015/02/16/rewriting-rust-serialization-there-can-be-only-one-serde/">benchmarks</a>,
so here are the latest numbers with these compilers:</p>

<ul>
<li>rustc: 1.4.0-nightly (1181679c8 2015-08-07)</li>
<li>go: version go1.4.2 darwin/amd64</li>
<li>clang: Apple LLVM version 6.1.0 (clang-602.0.53) (based on LLVM 3.6.0svn)</li>
</ul>


<p><a href="https://github.com/TyOverby/bincode">bincode</a>&rsquo;s serde support makes its first
appearance, which starts out roughly 1/3 slower at serialization, but about the
same speed at deserialization. I haven&rsquo;t done much optimization, so there&rsquo;s
probably a lot of low hanging fruit.</p>

<p><a href="https://crates.io/crates/serde_json">serde_json</a> saw a good amount of
improvement, mainly from some compiler optimizations in the 1.4 nightly. The
deserializer is slightly slower due to the parser rewrite.</p>

<p><a href="https://github.com/dwrensha/capnproto-rust">capnproto-rust</a>&rsquo;s unpacked format
shows a surprisingly large large serialization improvement, with a 10x
improvement from 4GB/s to 15GB/s. Good job dwrensha!  Deserialization is half
as slow as before though. Perhaps I have a bug in my code?</p>

<p>I&rsquo;ve changed the Rust MessagePack implementation to
<a href="https://github.com/3Hren/msgpack-rust">rmp</a>, which has a wee bit faster
serializer, but deserialization was about the same.</p>

<p>I&rsquo;ve also updated the numbers for Go and C++, but those numbers stayed roughly
the same.</p>

<p>Serialization:</p>

<table>
<thead>
<tr>
<th> language </th>
<th> library             </th>
<th> format                     </th>
<th> serialization (MB/s) </th>
</tr>
</thead>
<tbody>
<tr>
<td> <strong>Rust</strong> </td>
<td> <strong>capnproto-rust</strong>  </td>
<td> <strong>Cap&#8217;n Proto (unpacked)</strong> </td>
<td> <del>4349</del> <strong>15448</strong>   </td>
</tr>
<tr>
<td> Go       </td>
<td> go-capnproto        </td>
<td> Cap&#8217;n Proto                </td>
<td> 3877                 </td>
</tr>
<tr>
<td> <strong>Rust</strong> </td>
<td> <strong>bincode</strong>         </td>
<td> <strong>Raw</strong>                    </td>
<td> <del>1020</del> <strong>3278</strong>    </td>
</tr>
<tr>
<td> <strong>Rust</strong> </td>
<td> <strong>bincode (serde)</strong> </td>
<td> <strong>Raw</strong>                    </td>
<td> <strong>2143</strong>             </td>
</tr>
<tr>
<td> <strong>Rust</strong> </td>
<td> <strong>capnproto-rust</strong>  </td>
<td> <strong>Cap&#8217;n Proto (packed)</strong>   </td>
<td> <del>583</del> <strong>656</strong>      </td>
</tr>
<tr>
<td> Go       </td>
<td> gogoprotobuf        </td>
<td> Protocol Buffers           </td>
<td> <del>596</del> 627          </td>
</tr>
<tr>
<td> <strong>Rust</strong> </td>
<td> <strong>rmp</strong>             </td>
<td> <strong>MessagePack</strong>            </td>
<td> <del>397</del> <strong>427</strong>      </td>
</tr>
<tr>
<td> <strong>Rust</strong> </td>
<td> <strong>rust-protobuf</strong>   </td>
<td> <strong>Protocol Buffers</strong>       </td>
<td> <del>357</del> <strong>373</strong>      </td>
</tr>
<tr>
<td> <strong>Rust</strong> </td>
<td> <strong>serde::json</strong>     </td>
<td> <strong>JSON</strong>                   </td>
<td> <del>288</del> <strong>337</strong>      </td>
</tr>
<tr>
<td> C++      </td>
<td> rapidjson           </td>
<td> JSON                       </td>
<td> 307                  </td>
</tr>
<tr>
<td> Go       </td>
<td> goprotobuf          </td>
<td> Protocol Buffers           </td>
<td> <del>214</del> 226          </td>
</tr>
<tr>
<td> <strong>Rust</strong> </td>
<td> <strong>serialize::json</strong> </td>
<td> <strong>JSON</strong>                   </td>
<td> <del>147</del> <strong>212</strong>      </td>
</tr>
<tr>
<td> Go       </td>
<td> ffjson              </td>
<td> JSON                       </td>
<td> 147                  </td>
</tr>
<tr>
<td> Go       </td>
<td> encoding/json       </td>
<td> JSON                       </td>
<td> 85                   </td>
</tr>
</tbody>
</table>


<p>Deserialization:</p>

<table>
<thead>
<tr>
<th> language </th>
<th> library             </th>
<th> format                     </th>
<th> deserialization (MB/s) </th>
</tr>
</thead>
<tbody>
<tr>
<td> <strong>Rust</strong> </td>
<td> <strong>capnproto-rust</strong>  </td>
<td> <strong>Cap&#8217;n Proto (unpacked)</strong> </td>
<td> <del>2185</del> <strong>1306</strong>      </td>
</tr>
<tr>
<td> Go       </td>
<td> go-capnproto        </td>
<td> Cap&#8217;n Proto (zero copy)    </td>
<td> 1407                   </td>
</tr>
<tr>
<td> Go       </td>
<td> go-capnproto        </td>
<td> Cap&#8217;n Proto                </td>
<td> 711                    </td>
</tr>
<tr>
<td> <strong>Rust</strong> </td>
<td> <strong>capnproto-rust</strong>  </td>
<td> <strong>Cap&#8217;n Proto (packed)</strong>   </td>
<td> <del>351</del> <strong>464</strong>        </td>
</tr>
<tr>
<td> <strong>Rust</strong> </td>
<td> <strong>bincode (serde)</strong> </td>
<td> <strong>Raw</strong>                    </td>
<td> <strong>310</strong>                </td>
</tr>
<tr>
<td> <strong>Rust</strong> </td>
<td> <strong>bincode</strong>         </td>
<td> <strong>Raw</strong>                    </td>
<td> <del>142</del> <strong>291</strong>        </td>
</tr>
<tr>
<td> Go       </td>
<td> gogoprotobuf        </td>
<td> Protocol Buffers           </td>
<td> 270                    </td>
</tr>
<tr>
<td> C++      </td>
<td> rapidjson           </td>
<td> JSON (sax)                 </td>
<td> 182                    </td>
</tr>
<tr>
<td> C++      </td>
<td> rapidjson           </td>
<td> JSON (dom)                 </td>
<td> 155                    </td>
</tr>
<tr>
<td> <strong>Rust</strong> </td>
<td> <strong>rust-protobuf</strong>   </td>
<td> <strong>Protocol Buffers</strong>       </td>
<td> <strong>143</strong>                </td>
</tr>
<tr>
<td> <strong>Rust</strong> </td>
<td> <strong>rmp</strong>             </td>
<td> <strong>MessagePack</strong>            </td>
<td> <del>138</del> <strong>128</strong>        </td>
</tr>
<tr>
<td> <strong>Rust</strong> </td>
<td> <strong>serde::json</strong>     </td>
<td> <strong>JSON</strong>                   </td>
<td> <del>140</del> <strong>122</strong>        </td>
</tr>
<tr>
<td> Go       </td>
<td> ffjson              </td>
<td> JSON                       </td>
<td> 95                     </td>
</tr>
<tr>
<td> Go       </td>
<td> goprotobuf          </td>
<td> Protocol Buffers           </td>
<td> 81                     </td>
</tr>
<tr>
<td> Go       </td>
<td> encoding/json       </td>
<td> JSON                       </td>
<td> 23                     </td>
</tr>
<tr>
<td> Rust     </td>
<td> serialize::json     </td>
<td> JSON                       </td>
<td> 23                     </td>
</tr>
</tbody>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Serde 0.4.0 - Syntax Extensions in Stable Rust and More!]]></title>
    <link href="http://erickt.github.io/blog/2015/05/18/serde-0-dot-4-0-now-supports-macros-in-stable-rust/"/>
    <updated>2015-05-18T07:57:19-07:00</updated>
    <id>http://erickt.github.io/blog/2015/05/18/serde-0-dot-4-0-now-supports-macros-in-stable-rust</id>
    <content type="html"><![CDATA[<p>Hello Internet! I&rsquo;m pleased to announce
<a href="https://github.com/serde-rs/serde">serde</a> 0.4.0, which now supports many new
features with help from our growing serde community. The largest is now serde
supports syntax extensions in stable Rust by way of
<a href="https://github.com/erickt/rust-syntex">syntex</a>. syntex is a fork of Rust&rsquo;s
parser library libsyntax that has been modified to enable code generation.
serde uses it along with a
<a href="http://doc.crates.io/build-script.html">Cargo build script</a> to expand the
<code>#[derive(Serialize, Deserialize)]</code> decorator annotations. Here&rsquo;s how to use
it.</p>

<p>First, lets start with a simple serde 0.3.x project that&rsquo;s forced to use
nightly because it uses <code>serde_macros</code>. The <code>Cargo.toml</code> is:</p>

<pre><code class="toml">[package]
name = "hello_world"
versio = "0.1.0"
authors = ["Erick Tryzelaar &lt;erick.tryzelaar@gmail.com&gt;"]
license = "MIT/Apache-2.0"

[dependencies]
serde = "*"
serde_macros = "*"
</code></pre>

<p>And the actual library is <code>src/lib.rs</code>:</p>

<pre><code class="rust">#![feature(custom_derive, plugin)]
#![plugin(serde_macros)]

extern crate serde;

#[derive(Serialize, Deserialize)]
pub struct Point {
    x: u32,
    y: u32,
}
</code></pre>

<p>In order to use Stable Rust, we can use the new <code>serde_codegen</code>. Our strategy
is to split our input into two files. The first is the entry point Cargo will
use to compile the library, <code>src/lib.rs</code>. The second is a template that
contains the macros, <code>src/lib.rs.in</code>. It will be expanded into
<code>$OUT_DIR/lib.rs</code>, which is included in <code>src/lib.rs</code>. So <code>src/lib.rs</code> looks
like:</p>

<pre><code class="rust">extern crate serde;

include!(concat!(env!("OUT_DIR"), "/lib.rs"));
</code></pre>

<p><code>src/lib.rs.in</code> then just looks like:</p>

<pre><code class="rust">#[derive(Serialize, Deserialize)]
pub struct Point {
    x: u32,
    y: u32,
}
</code></pre>

<p>In order to generate the <code>$OUT_DIR/lib.rs</code>, we&rsquo;ll use a Cargo build script.
We&rsquo;ll configure <code>Cargo.toml</code> with:</p>

<pre><code class="toml">[package]
name = "hello_world"
versio = "0.1.0"
authors = ["Erick Tryzelaar &lt;erick.tryzelaar@gmail.com&gt;"]
license = "MIT/Apache-2.0"
build = "build.rs"

[build-dependencies]
syntex = "*"
serde_codegen = "*"

[dependencies]
serde = "*"
</code></pre>

<p>Finally, the <code>build.rs</code> script itself uses <code>syntex</code> to expand the syntax
extensions:</p>

<pre><code class="rust">extern crate syntex;
extern crate serde_codegen;

use std::env;
use std::path::Path;

fn main() {
    let out_dir = env::var_os("OUT_DIR").unwrap();

    let src = Path::new("src/lib.rs.in");
    let dst = Path::new(&amp;out_dir).join("lib.rs");

    let mut registry = syntex::Registry::new();

    serde_codegen::register(&amp;mut registry);
    registry.expand("", &amp;src, &amp;dst).unwrap();
}
</code></pre>

<h2>Downside 1: Error Locations</h2>

<p>While <code>syntex</code> is quite powerful, there are a few major downsides. Rust does
not yet support the ability for a generated file to provide error location
information from a template file. This means that tracking down errors requires
manually looking at the generated code and trying to identify where the error
in the template. However, there is a workaround.  It&rsquo;s actually not that
difficult to support <code>syntex</code> and the Rust Nightly compiler plugins. To update
our example, we&rsquo;ll change the <code>Cargo.toml</code> to:</p>

<pre><code class="toml">[package]
name = "hello_world"
versio = "0.1.0"
authors = ["Erick Tryzelaar &lt;erick.tryzelaar@gmail.com&gt;"]
license = "MIT/Apache-2.0"
build = "build.rs"

[features]
default = ["with_syntex"]
nightly = ["serde_macros"]
with_syntex = ["serde", "serde_codegen"]

[build-dependencies]
syntex = { version = "*", optional = true }
serde_codegen = { version = "*", optional = true }

[dependencies]
serde = "*"
serde_macros = { version = "*", optional = true }
</code></pre>

<p>Then the <code>build.rs</code> is changed to optionally expand the macros in our template:</p>

<pre><code class="rust">#[cfg(feature = "with_syntex")]
mod inner {
    extern crate syntex;
    extern crate serde_codegen;

    use std::env;
    use std::path::Path;

    pub fn main() {
        let out_dir = env::var_os("OUT_DIR").unwrap();

        let src = Path::new("src/lib.rs.in");
        let dst = Path::new(&amp;out_dir).join("lib.rs");

        let mut registry = syntex::Registry::new();

        serde_codegen::register(&amp;mut registry);
        registry.expand("", &amp;src, &amp;dst).unwrap();
    }
}

#[cfg(not(feature = "with_syntex"))]
mod inner {
    pub fn main() {}
}

pub fn main() {
    inner::main()
}
</code></pre>

<p>Finally, <code>src/lib.rs</code> is updated to:</p>

<pre><code class="rust">#![cfg_attr(feature = "nightly", feature(plugin))]
#![cfg_attr(feature = "nightly", plugin(serde_macros))]

extern crate serde;

#[cfg(feature = "nightly")]
include!("lib.rs.in");

#[cfg(feature = "with_syntex")]
include!(concat!(env!("OUT_DIR"), "/lib.rs"));
</code></pre>

<p>Then most development can happen with using the Nightly Rust and
<code>cargo build --no-default-features --features nightly</code> for better error
messages, but downstream consumers can use Stable Rust without worry.</p>

<h2>Downside 2: Macros in Macros</h2>

<p>Syntex can only expand macros inside macros it knows about, and it doesn&rsquo;t know
about the builtin macros. This is because a lot of the stable macros are using
unstable features under the covers. So unfortunately if you&rsquo;re using a library
like the quasiquoting library <a href="https://github.com/erickt/rust-quasi">quasi</a>,
you cannot write:</p>

<pre><code class="rust">let exprs = vec![quote_expr!(cx, 1 + 2)];
</code></pre>

<p>Instead you have to pull out the syntex macros into a separate variable:</p>

<pre><code class="rust">let expr = quote_expr!(cx, 1 + 1);
let exprs = vec![expr];
</code></pre>

<h2>Downside 3: Compile Times</h2>

<p>Syntex can take a while to compile. It may be possible to optimize this, but
that may be difficult while keeping compatibility with <code>libsyntax</code>.</p>

<hr />

<p>That&rsquo;s <code>v0.4.0</code>. I hope you enjoy it! Please let me know if you run into any
<a href="https://github.com/serde-rs/serde/issues">problems</a>.</p>

<h2>Release Notes</h2>

<p>Here are other things that came with this version:</p>

<ul>
<li>Added field annotation to enable renaming fields for different backends
<a href="https://github.com/serde-rs/serde/pull/69">#69</a>. For example:</li>
</ul>


<pre><code class="rust">struct Point {
  #[serde(rename="X")]
  x: u32,

  #[serde(rename(json="the-x", xml="X")]
  y: u32,
}
</code></pre>

<ul>
<li>Faster JSON string parsing <a href="https://github.com/serde-rs/serde/pull/71">#71</a>.</li>
<li>Add a <code>LineColIterator</code> that tracks line and column information for
  deserializers <a href="https://github.com/serde-rs/serde/pull/58">#58</a>.</li>
<li>Improved bytestring support <a href="https://github.com/serde-rs/serde/pull/72">#72</a></li>
<li>Changed <code>de::PrimitiveVisitor</code> to also depend on <code>FromStr</code>
<a href="https://github.com/serde-rs/serde/pull/70">#70</a></li>
<li>Added impls for fixed sized arrays with 1 to 32 elements
<a href="https://github.com/serde-rs/serde/pull/74">#74</a></li>
<li>Added <code>json::Value::lookup</code>, that allows values to be extracted with
<code>value.lookup("foo.bar.baz")</code> <a href="https://github.com/serde-rs/serde/pull/76">#76</a></li>
</ul>


<p>Bug Fixes:</p>

<ul>
<li>Make sure that -0.0 gets serialized as &ldquo;-0.0&rdquo;
<a href="https://github.com/serde-rs/serde/commit/f0c87fb">f0c87fb</a>.</li>
<li>Missing field errors displayed original field name instead of renamed
<a href="https://github.com/serde-rs/serde/pull/64">#64</a>.</li>
<li>Fixed handling json integer overflow</li>
</ul>


<p>A special thanks to everyone that helped with this release:</p>

<ul>
<li>Alex Crichton</li>
<li>Andrew Poelstra</li>
<li>Corey Farwell</li>
<li>Hugo Duncan</li>
<li>Jorge Israel Peña</li>
<li>Kang Seonghoon</li>
<li>Mikhail Borisov</li>
<li>Oliver Schneider</li>
<li>Sebastian Thiel</li>
<li>Steven Fackler</li>
<li>Thomas Bahn</li>
<li>derhaskell</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Serde 0.3.1 - Now Compatible With Beta! Plus Aster and Quasi Updates]]></title>
    <link href="http://erickt.github.io/blog/2015/04/12/serde-0-dot-3-1-now-compatible-with-beta/"/>
    <updated>2015-04-12T11:53:43-07:00</updated>
    <id>http://erickt.github.io/blog/2015/04/12/serde-0-dot-3-1-now-compatible-with-beta</id>
    <content type="html"><![CDATA[<p>I just pushed up <a href="https://github.com/erickt/rust-serde">serde</a> 0.3.1 to
<a href="https://crates.io/crates/serde">crates.io</a>, which is now compatible with beta!
serde_macros 0.3.1, however still requires nightly.  But this means that if
you implement the all the traits using stable features, then any users of serde
should work with rust 1.0.</p>

<p>Here&rsquo;s what&rsquo;s also new in serde v0.3.1:</p>

<ul>
<li>Renamed <code>ValueDeserializer::deserializer</code> into <code>ValueDeserializer::into_deserializer</code>.</li>
<li>Renamed the attribute that changes the name a field is serialized
<code>#[serde(alias="...")]</code> to <code>#[serde(rename="...")]</code>.</li>
<li>Added implementations for <code>Box</code>, <code>Rc</code>, and <code>Arc</code>.</li>
<li>Updated <code>VariantVisitor</code> to hint to the deserializer which variant kind it is expecting.
This allows serializers to serialize a unit variant as a string.</li>
<li>Added an <code>Error::unknown_field_error</code> error message.</li>
<li>Progress on the documentation, but there&rsquo;s still plenty more to go.</li>
</ul>


<p>Upstream of serde, I&rsquo;ve been also doing some work on
<a href="https://github.com/erickt/rust-aster">aster</a> and
<a href="https://github.com/erickt/rust-quasi">quasi</a>, which are my helper libraries to
simplify writing syntax extensions.</p>

<p>aster v0.2.0:</p>

<ul>
<li>Added builders for qualified paths, slices, <code>Vec</code>, <code>Box</code>, <code>Rc</code>, and <code>Arc</code>.</li>
<li>Extended item builders to support <code>use</code> simple paths, globs, and lists.</li>
<li>Added a helper for building the <code>#[automatically_derived]</code> annotation.</li>
</ul>


<p>quasi v0.1.9:</p>

<ul>
<li>Backported support for <code>quote_attr!()</code> and <code>quote_matchers!()</code> from <code>libsyntax</code>.</li>
<li>Added support for unquoting arbitrary slices.</li>
</ul>


<p>Thanks for everyone&rsquo;s help with this release!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Serde 0.3]]></title>
    <link href="http://erickt.github.io/blog/2015/03/31/serde-0-dot-3/"/>
    <updated>2015-03-31T19:57:37-07:00</updated>
    <id>http://erickt.github.io/blog/2015/03/31/serde-0-dot-3</id>
    <content type="html"><![CDATA[<p>I&rsquo;m happy to announce that I&rsquo;ve released
<a href="https://github.com/erickt/rust-serde">serde</a> 0.3 on
<a href="https://crates.io/crates/serde">crates.io</a> today.  For those unfamiliar with
serde, it&rsquo;s a generic serialization framework, much like
<a href="https://github.com/rust-lang/rustc-serialize/">rustc-serialize</a>, but much more
powerful. Check out my <a href="http://erickt.github.io/blog/categories/serialization/">serialization series</a>
if you&rsquo;re interested in serde&rsquo;s original development.</p>

<p>There&rsquo;s been a ton of work since 0.2. Here are the highlights:</p>

<ul>
<li><p>Ported over from std::old_io to std::io. There is a bit of a performance hit
when serializing to <code>&amp;mut [u8]</code>, although it&rsquo;s really not that bad. In my goser
benchmarks, previously it ran in 373 MB/s, but now it&rsquo;s running at 260 MB/s.
However, this hasn&rsquo;t impacted the <code>Vec&lt;u8&gt;</code> serialization performance, nor
deserialization performance.</p></li>
<li><p>Much better JSON deserialization errors. Now <code>std::io::Error</code> is properly
propogated, and error locations are reported when a <code>Deserialize</code> raises an error.</p></li>
<li><p>Merged <code>serde::ser::Serializer</code> and <code>serde::ser::Visitor</code>.</p></li>
<li><p>Renamed <code>serde::ser::Serialize::visit</code> to <code>serde::ser::Serialize::serialize</code>.</p></li>
<li><p>Replaced <code>serde::ser::{Seq,Map}Visitor::size_hint</code> with a <code>len()</code> method that
returns an optional length. This has a little stronger emphasis that we either
need an exactly length or no length. Formats that need an exact length should
make sure to verify the length passed in matches the actual amount of values
serialized.</p></li>
<li><p><code>serde::json</code> now deserializes missing values as a <code>()</code>.</p></li>
<li><p>Finished implementing <code>#[derive(Serialize, Deserialize)]</code> for all struct and
enum forms.</p></li>
<li><p>Ported <code>serde_macros</code> over to <a href="https://github.com/erickt/rust-aster">aster</a>
and <a href="https://github.com/erickt/rust-quasi">quasi</a>, which simplies code
generation.</p></li>
<li><p>Removed the unnessary <code>first</code> argument from <code>visit_{seq,map}_elt</code>.</p></li>
<li><p>Rewrote enum deserializations to not require allocations. Oddly enough this
is a tad slower than the allocation form. I suspect it&rsquo;s coming from the
function calls not getting inlined away.</p></li>
<li><p>Allowed enum serialization and deserialization to support more than one
variant.</p></li>
<li><p>Allowed <code>Deserialize</code> types to hint that it&rsquo;s expecting a sequence or a map.</p></li>
<li><p>Allowed maps to be deserialized from a <code>()</code>.</p></li>
<li><p>Added a <code>serde::bytes::{Bytes,ByteBuf}</code>, which wrap <code>&amp;[u8]</code>/<code>Vec&lt;u8&gt;</code> to allow
some formats to encode these values more efficiently than generic sequences.</p></li>
<li><p>Added <code>serde::de::value</code>, which contains some helper deserializers to
deserialize from a Rust type.</p></li>
<li><p>Added impls for most collection types in the standard library.</p></li>
</ul>


<p>Thanks everyone that&rsquo;s helped out with this release!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rewriting Rust Serialization: Part 4: Serde2 Is Ready!]]></title>
    <link href="http://erickt.github.io/blog/2015/02/16/rewriting-rust-serialization-there-can-be-only-one-serde/"/>
    <updated>2015-02-16T07:32:54-08:00</updated>
    <id>http://erickt.github.io/blog/2015/02/16/rewriting-rust-serialization-there-can-be-only-one-serde</id>
    <content type="html"><![CDATA[<p>It&rsquo;s been a while, hasn&rsquo;t it? Here&rsquo;s
<a href="http://erickt.github.io/blog/2014/10/28/serialization/">part 1</a>,
<a href="http://erickt.github.io/blog/2014/11/03/performance/">part 2</a>,
<a href="http://erickt.github.io/blog/2014/11/03/performance/">part 2.1</a>,
<a href="http://erickt.github.io/blog/2014/11/03/performance/">part 2.2</a>,
<a href="http://erickt.github.io/blog/2014/12/13/rewriting-rust-serialization/">part 3</a>, and
<a href="http://erickt.github.io/blog/2014/12/13/performance-digression/">part 3.1</a>
if you want to catch up.</p>

<h2>Serde Version 2</h2>

<p>Well it&rsquo;s a long time coming, but serde2 is finally in a mostly usable
position! If you recall from
<a href="http://erickt.github.io/blog/2014/12/13/rewriting-rust-serialization/">part 3</a>,
one of the problems with serde1 is that we&rsquo;re paying a lot for tagging our
types, and it&rsquo;s really hurting us on the deserialization side of things. So
there&rsquo;s one other pattern that we can use that allows for lookahead that
doesn&rsquo;t need tags: visitors. A year or so ago I rewrote our generic hashing
framework to use the visitor pattern to great success. <code>serde2</code> came out of
experiments to see if I could do the same thing here. It turned out that it was
a really elegant approach.</p>

<h3>Serialize</h3>

<p>It all starts with a type that we want to serialize:</p>

<pre><code class="rust">pub trait Serialize {
    fn visit&lt;
        V: Visitor,
    &gt;(&amp;self, visitor: &amp;mut V) -&gt; Result&lt;V::Value, V::Error&gt;;
}
</code></pre>

<p>(Aside: while I&rsquo;d rather use <code>where</code> here for this type parameter, that would
force me to write <code>&lt;V as Visitor&gt;::Value&gt;</code> due to
<a href="https://github.com/rust-lang/rust/issues/20300">#20300</a>).</p>

<p>This <code>Visitor</code> trait then looks like:</p>

<pre><code class="rust">pub trait Visitor {
    type Value;
    type Error;

    fn visit_unit(&amp;mut self) -&gt; Result&lt;Self::Value, Self::Error&gt;;

    #[inline]
    fn visit_named_unit(&amp;mut self, _name: &amp;str) -&gt; Result&lt;Self::Value, Self::Error&gt; {
        self.visit_unit()
    }


    fn visit_bool(&amp;mut self, v: bool) -&gt; Result&lt;Self::Value, Self::Error&gt;;

    ...
}
</code></pre>

<p>So the implementation for a <code>bool</code> then looks like:</p>

<pre><code class="rust">impl Serialize for bool {
    #[inline]
    fn visit&lt;
        V: Visitor,
    &gt;(&amp;self, visitor: &amp;mut V) -&gt; Result&lt;V::Value, V::Error&gt; {
        visitor.visit_bool(*self)
    }
}
</code></pre>

<p>Things get more interesting when we get to compound structures like a sequence.
Here&rsquo;s <code>Visitor</code> again. It needs to both be able to visit the overall structure
as well as each item:</p>

<pre><code class="rust">    ...

    fn visit_seq&lt;V&gt;(&amp;mut self, visitor: V) -&gt; Result&lt;Self::Value, Self::Error&gt;
        where V: SeqVisitor;

    fn visit_seq_elt&lt;T&gt;(&amp;mut self,
                        first: bool,
                        value: T) -&gt; Result&lt;Self::Value, Self::Error&gt;
        where T: Serialize;

    ...
}
</code></pre>

<p>We also have this <code>SeqVisitor</code> trait that the type to serialize provides. It
really just looks like an <code>Iterator</code>, but the type parameter has been moved to
the <code>visit</code> method so that it can return different types:</p>

<pre><code class="rust">pub trait SeqVisitor {
    fn visit&lt;
        V: Visitor,
    &gt;(&amp;mut self, visitor: &amp;mut V) -&gt; Result&lt;Option&lt;V::Value&gt;, V::Error&gt;;

    #[inline]
    fn size_hint(&amp;self) -&gt; (usize, Option&lt;usize&gt;) {
        (0, None)
    }
}
</code></pre>

<p>Finally, to implement this for a type like <code>&amp;[T]</code> we create an
<code>Iterator</code>-to-<code>SeqVisitor</code> adaptor and pass it to the visitor, which then in
turn visits each item:</p>

<pre><code class="rust">pub struct SeqIteratorVisitor&lt;Iter&gt; {
    iter: Iter,
    first: bool,
}

impl&lt;T, Iter: Iterator&lt;Item=T&gt;&gt; SeqIteratorVisitor&lt;Iter&gt; {
    #[inline]
    pub fn new(iter: Iter) -&gt; SeqIteratorVisitor&lt;Iter&gt; {
        SeqIteratorVisitor {
            iter: iter,
            first: true,
        }
    }
}

impl&lt;
    T: Serialize,
    Iter: Iterator&lt;Item=T&gt;,
&gt; SeqVisitor for SeqIteratorVisitor&lt;Iter&gt; {
    #[inline]
    fn visit&lt;
        V: Visitor,
    &gt;(&amp;mut self, visitor: &amp;mut V) -&gt; Result&lt;Option&lt;V::Value&gt;, V::Error&gt; {
        let first = self.first;
        self.first = false;

        match self.iter.next() {
            Some(value) =&gt; {
                let value = try!(visitor.visit_seq_elt(first, value));
                Ok(Some(value))
            }
            None =&gt; Ok(None),
        }
    }

    #[inline]
    fn size_hint(&amp;self) -&gt; (usize, Option&lt;usize&gt;) {
        self.iter.size_hint()
    }
}

impl&lt;
    'a,
    T: Serialize,
&gt; Serialize for &amp;'a [T] {
    #[inline]
    fn visit&lt;
        V: Visitor,
    &gt;(&amp;self, visitor: &amp;mut V) -&gt; Result&lt;V::Value, V::Error&gt; {
        visitor.visit_seq(SeqIteratorVisitor::new(self.iter()))
    }
}
</code></pre>

<p><code>SeqIteratorVisitor</code> is publically exposed, so it should be easy to use it with
custom data structures. Maps follow the same pattern (and also expose
<code>MapIteratorVisitor</code>), but each item instead uses <code>visit_visit_map_elt(first,
key, value)</code>.  Tuples, struct tuples, and tuple enum variants are all really
just named sequences. Likewise, structs and struct enum variants are just named
maps.</p>

<p>Because struct implementations are so common, here&rsquo;s an example how to do it:</p>

<pre><code class="rust">struct Point {
    x: i32,
    y: i32,
}

struct PointVisitor&lt;'a&gt; {
    state: u32,
    value: &amp;'a Point,
}

impl&lt;'a&gt; MapVisitor for PointVisitor&lt;'a&gt; {
    fn visit&lt;
        V: Visitor,
    &gt;(&amp;mut self, visitor: &amp;mut V) -&gt; Result&lt;V::Value, V::Error&gt; {
        match self.state {
            0 =&gt; {
                self.state += 1;
                Ok(Some(try!(visitor.visit_map_elt(true, "x", &amp;self.x))))
            }
            1 =&gt; {
                self.state += 1;
                Ok(Some(try!(visitor.visit_map_elt(true, "y", &amp;self.y))))
            }
            _ =&gt; Ok(None),
        }
    }
}

impl Serialize for Point {
    fn visit&lt;
        V: Visitor,
    &gt;(&amp;self, visitor: &amp;mut V) -&gt; Result&lt;V::Value, V::Error&gt; {
        visit_named_map("Point", PointVisitor {
            state: 0,
            value: self,
        })
    }
}
</code></pre>

<p>Fortunately <code>serde2</code> also comes with a <code>#[derive_serialize]</code> macro so you don&rsquo;t
need to write this out by hand if you don&rsquo;t want to.</p>

<h3>Serializer</h3>

<p>Now to actually build a serializer. We start with a trait:</p>

<pre><code class="rust">pub trait Serializer {
    type Value;
    type Error;

    fn visit&lt;T&gt;(&amp;mut self, value: &amp;T) -&gt; Result&lt;Self::Value, Self::Error&gt;
        where T: Serialize;
}
</code></pre>

<p>It&rsquo;s the responsibility of the serializer to create a visitor and then pass it
to the type. Oftentimes the serializer also implements <code>Visitor</code>, but it&rsquo;s not
required. Here&rsquo;s a snippet of the JSON serializer visitor:</p>

<pre><code class="rust">struct Visitor&lt;'a, W: 'a&gt; {
    writer: &amp;'a mut W,
}

impl&lt;'a, W: Writer&gt; Visitor for Visitor&lt;'a, W&gt; {
    type Value = ();
    type Error = io::Error;

    fn visit_unit(&amp;mut self) -&gt; IoResult&lt;()&gt; {
        self.writer.write_all(b"null")
    }

    #[inline]
    fn visit_bool(&amp;mut self, value: bool) -&gt; IoResult&lt;()&gt; {
        if value {
            self.writer.write_all(b"true")
        } else {
            self.writer.write_all(b"false")
        }
    }

    #[inline]
    fn visit_isize(&amp;mut self, value: isize) -&gt; IoResult&lt;()&gt; {
        write!(self.writer, "{}", value)
    }

    ...

    #[inline]
    fn visit_map&lt;V&gt;(&amp;mut self, mut visitor: V) -&gt; IoResult&lt;()&gt;
        where V: ser::MapVisitor,
    {
        try!(self.writer.write_all(b"{"));

        while let Some(()) = try!(visitor.visit(self)) { }

        self.writer.write_all(b"}")
    }

    #[inline]
    fn visit_map_elt&lt;K, V&gt;(&amp;mut self, first: bool, key: K, value: V) -&gt; IoResult&lt;()&gt;
        where K: ser::Serialize,
              V: ser::Serialize,
    {
        if !first {
            try!(self.writer.write_all(b","));
        }

        try!(key.visit(self));
        try!(self.writer.write_all(b":"));
        value.visit(self)
    }
}
</code></pre>

<p>Hopefully it is pretty straight forward.</p>

<h2>Deserialization</h2>

<p>Now serialization is the easy part. Deserialization is where it always gets
more tricky. We follow a similar pattern as serialization. A deserializee
creates a visitor which accepts any type (most resulting in an error), and
passes it to a deserializer. This deserializer then extracts it&rsquo;s next value
from it&rsquo;s stream and passes it to the visitor, which then produces the actual
type.</p>

<p>It&rsquo;s achingly close to the same pattern between a serializer and a serializee,
but as hard as I tried, I couldn&rsquo;t unify the two. The error semantics are
different. In serialization, you want the serializer (which creates the
visitor) to define the error. In deserialization, you want the deserializer
which consumes the visitor to define the error.</p>

<p>Let&rsquo;s start first with <code>Error</code>. As opposed to serialization, when we&rsquo;re
deserializing we can error both in the <code>Deserializer</code> if there is a parse
error, or in the <code>Deserialize</code> if it&rsquo;s received an unexpected value. We do this
with an <code>Error</code> trait, which allows a deserializee to generically create the
few errors it needs:</p>

<pre><code class="rust">pub trait Error {
    fn syntax_error() -&gt; Self;

    fn end_of_stream_error() -&gt; Self;

    fn missing_field_error(&amp;'static str) -&gt; Self;
}
</code></pre>

<p>Now the <code>Deserialize</code> trait, which looks similar to <code>Serialize</code>:</p>

<pre><code class="rust">pub trait Deserialize {
    fn deserialize&lt;
        D: Deserializer,
    &gt;(deserializer: &amp;mut D) -&gt; Result&lt;Self, D::Error&gt;;
}
</code></pre>

<p>The <code>Visitor</code> also looks like the serialization <code>Visitor</code>, except for the
methods error by default.</p>

<pre><code class="rust">pub trait Visitor {
    type Value;

    fn visit_bool&lt;
        E: Error,
    &gt;(&amp;mut self, _v: bool) -&gt; Result&lt;Self::Value, E&gt; {
        Err(Error::syntax_error())
    }

    fn visit_isize&lt;
        E: Error,
    &gt;(&amp;mut self, v: isize) -&gt; Result&lt;Self::Value, E&gt; {
        self.visit_i64(v as i64)
    }

    ...
}
</code></pre>

<p>Sequences and Maps are also a little different:</p>

<pre><code class="rust">pub trait Visitor {
    ...

    fn visit_seq&lt;
        V: SeqVisitor,
    &gt;(&amp;mut self, _visitor: V) -&gt; Result&lt;Self::Value, V::Error&gt; {
        Err(Error::syntax_error())
    }

    fn visit_map&lt;
        V: MapVisitor,
    &gt;(&amp;mut self, _visitor: V) -&gt; Result&lt;Self::Value, V::Error&gt; {
        Err(Error::syntax_error())
    }

    ...
}

pub trait SeqVisitor {
    type Error: Error;

    fn visit&lt;
        T: Deserialize,
    &gt;(&amp;mut self) -&gt; Result&lt;Option&lt;T&gt;, Self::Error&gt;;

    fn end(&amp;mut self) -&gt; Result&lt;(), Self::Error&gt;;

    #[inline]
    fn size_hint(&amp;self) -&gt; (usize, Option&lt;usize&gt;) {
        (0, None)
    }
}

pub trait MapVisitor {
    type Error: Error;

    #[inline]
    fn visit&lt;
        K: Deserialize,
        V: Deserialize,
    &gt;(&amp;mut self) -&gt; Result&lt;Option&lt;(K, V)&gt;, Self::Error&gt; {
        match try!(self.visit_key()) {
            Some(key) =&gt; {
                let value = try!(self.visit_value());
                Ok(Some((key, value)))
            }
            None =&gt; Ok(None)
        }
    }

    fn visit_key&lt;
        K: Deserialize,
    &gt;(&amp;mut self) -&gt; Result&lt;Option&lt;K&gt;, Self::Error&gt;;

    fn visit_value&lt;
        V: Deserialize,
    &gt;(&amp;mut self) -&gt; Result&lt;V, Self::Error&gt;;

    fn end(&amp;mut self) -&gt; Result&lt;(), Self::Error&gt;;

    #[inline]
    fn size_hint(&amp;self) -&gt; (usize, Option&lt;usize&gt;) {
        (0, None)
    }
}
</code></pre>

<p>Here is an example struct deserializer. Structs are deserialized as a map, but
since maps are unordered, we need a simple state machine to extract the values.
In order to get the keys, we just create an enum for the fields, and a custom
deserializer to convert a string into a field without an allocation:</p>

<pre><code class="rust">struct Point {
    x: i32,
    y: i32,
}

impl Deserialize for Point {
    fn deserialize&lt;
        D: Deserializer,
    &gt;(deserializer: &amp;mut D) -&gt; Result&lt;Point, D::Error&gt; {
        enum Field {
            x,
            y,
        }

        struct FieldVisitor;

        impl Visitor for FieldVisitor {
            type Value = Field;

            fn visit_str&lt;
                E: Error,
            &gt;(&amp;mut self, value: &amp;str) -&gt; Result&lt;Field, E&gt; {
                match value {
                    "x" =&gt; Ok(Field::x),
                    "y" =&gt; Ok(Field::y),
                    _ =&gt; Err(Error::syntax_error()),
                }
            }
        }

        impl Deserialize for Field {
            fn deserialize&lt;
                D: Deserializer,
            &gt;(state: &amp;mut D) -&gt; Result&lt;Field, D::Error&gt; {
                state.visit(&amp;mut FieldVisitor)
            }
        }

        struct Visitor;

        impl Visitor for Visitor {
            type Value = Point;

            fn visit_map&lt;
                V: MapVisitor,
            &gt;(&amp;mut self, mut visitor: V) -&gt; Result&lt;Point, V::Error&gt; {
                {
                    let mut x = None;
                    let mut y = None;

                    while let Some(key) = try!(visitor.visit_key()) {
                        match key {
                            Field::x =&gt; {
                                x = Some(try!(visitor.visit_value()));
                            }
                            Field::y =&gt; {
                                y = Some(try!(visitor.visit_value()));
                            }
                        }
                    }

                    let x = match x {
                        Some(x) =&gt; x,
                        None =&gt; {
                            return Err(Error::missing_field_error("x"));
                        }
                    };
                    let y = match y {
                        Some(y) =&gt; y,
                        None =&gt; {
                            return Err(Error::missing_field_error("y"));
                        }
                    };

                    Ok(Point {
                        x: x,
                        y: y,
                    })
                }
            }

            fn visit_named_map&lt;
                V: MapVisitor,
            &gt;(&amp;mut self, name: &amp;str, visitor: V) -&gt; Result&lt;Point, V::Error&gt; {
                if name == "Point" {
                    self.visit_map(visitor)
                } else {
                    Err(Error::syntax_error())
                }
            }
        }

        deserializer.visit(&amp;mut Visitor)
    }
}
</code></pre>

<p>It&rsquo;s a little more complicated, but once again there is
<code>#[derive_deserialize]</code>, which does all this work for you.</p>

<h3>Deserializer</h3>

<p>Deserializers then follow the same pattern as serializers. The one difference
is that we need to provide a special hook for <code>Option&lt;T&gt;</code> types so formats like
JSON can treat <code>null</code> types as options.</p>

<pre><code class="rust">pub trait Deserializer {
    type Error: Error;

    fn visit&lt;
        V: Visitor,
    &gt;(&amp;mut self, visitor: &amp;mut V) -&gt; Result&lt;V::Value, Self::Error&gt;;

    /// The `visit_option` method allows a `Deserialize` type to inform the
    /// `Deserializer` that it's expecting an optional value. This allows
    /// deserializers that encode an optional value as a nullable value to
    /// convert the null value into a `None`, and a regular value as
    /// `Some(value)`.
    #[inline]
    fn visit_option&lt;
        V: Visitor,
    &gt;(&amp;mut self, visitor: &amp;mut V) -&gt; Result&lt;V::Value, Self::Error&gt; {
        self.visit(visitor)
    }
}
</code></pre>

<h2>Performance</h2>

<p>So how does it perform? Here&rsquo;s the serialization benchmarks, with yet another
ordering. This time sorted by the performance:</p>

<table>
<thead>
<tr>
<th> language </th>
<th> library                   </th>
<th> format                 </th>
<th> serialization (MB/s) </th>
</tr>
</thead>
<tbody>
<tr>
<td> Rust     </td>
<td> capnproto-rust            </td>
<td> Cap&#8217;n Proto (unpacked) </td>
<td> 4226                 </td>
</tr>
<tr>
<td> Go       </td>
<td> go-capnproto              </td>
<td> Cap&#8217;n Proto            </td>
<td> 3824.20              </td>
</tr>
<tr>
<td> Rust     </td>
<td> bincode                   </td>
<td> Binary                 </td>
<td> 1020                 </td>
</tr>
<tr>
<td> Rust     </td>
<td> capnproto-rust            </td>
<td> Cap&#8217;n Proto (packed)   </td>
<td> 672                  </td>
</tr>
<tr>
<td> Go       </td>
<td> gogoprotobuf              </td>
<td> Protocol Buffers       </td>
<td> 596.78               </td>
</tr>
<tr>
<td> Rust     </td>
<td> rust-msgpack              </td>
<td> MessagePack            </td>
<td> 397                  </td>
</tr>
<tr>
<td> <strong>Rust</strong> </td>
<td> <strong>serde2::json</strong> (&amp;[u8])  </td>
<td> <strong>JSON</strong>               </td>
<td> <strong>373</strong>              </td>
</tr>
<tr>
<td> Rust     </td>
<td> rust-protobuf             </td>
<td> Protocol Buffers       </td>
<td> 357                  </td>
</tr>
<tr>
<td> C++      </td>
<td> rapidjson                 </td>
<td> JSON                   </td>
<td> 316                  </td>
</tr>
<tr>
<td> <strong>Rust</strong> </td>
<td> <strong>serde2::json</strong> (Custom) </td>
<td> <strong>JSON</strong>               </td>
<td> <strong>306</strong>              </td>
</tr>
<tr>
<td> <strong>Rust</strong> </td>
<td> <strong>serde2::json</strong> (Vec)    </td>
<td> <strong>JSON</strong>               </td>
<td> <strong>288</strong>              </td>
</tr>
<tr>
<td> Rust     </td>
<td> serde::json (Custom)      </td>
<td> JSON                   </td>
<td> 244                  </td>
</tr>
<tr>
<td> Rust     </td>
<td> serde::json (&amp;[u8])       </td>
<td> JSON                   </td>
<td> 222                  </td>
</tr>
<tr>
<td> Go       </td>
<td> goprotobuf                </td>
<td> Protocol Buffers       </td>
<td> 214.68               </td>
</tr>
<tr>
<td> Rust     </td>
<td> serde::json (Vec)         </td>
<td> JSON                   </td>
<td> 149                  </td>
</tr>
<tr>
<td> Go       </td>
<td> ffjson                    </td>
<td> JSON                   </td>
<td> 147.37               </td>
</tr>
<tr>
<td> Rust     </td>
<td> serialize::json           </td>
<td> JSON                   </td>
<td> 183                  </td>
</tr>
<tr>
<td> Go       </td>
<td> encoding/json             </td>
<td> JSON                   </td>
<td> 80.49                </td>
</tr>
</tbody>
</table>


<p>I think it&rsquo;s fair to say that on at least this benchmark we&rsquo;ve hit our
performance numbers. Writing to a preallocated buffer with <code>BufWriter</code> is 18%
<em>faster</em> than <a href="https://github.com/miloyip/rapidjson">rapidjson</a> (although to be
fair they are allocating). Our <code>Vec&lt;u8&gt;</code> writer comes in 12% slower. What&rsquo;s
interesting is this custom Writer. It turns out LLVM is still having trouble
lowering our generic <code>Vec::push_all</code> into a <code>memcpy</code>. This Writer variant
however is able to get us to rapidjson&rsquo;s level:</p>

<pre><code class="rust">fn push_all_bytes(dst: &amp;mut Vec&lt;u8&gt;, src: &amp;[u8]) {
    let dst_len = dst.len();
    let src_len = src.len();

    dst.reserve(src_len);

    unsafe {
        // we would have failed if `reserve` overflowed.
        dst.set_len(dst_len + src_len);

        ::std::ptr::copy_nonoverlapping_memory(
            dst.as_mut_ptr().offset(dst_len as isize),
            src.as_ptr(),
            src_len);
    }
}

struct MyMemWriter1 {
    buf: Vec&lt;u8&gt;,
}

impl Writer for MyMemWriter1 {
    #[inline]
    fn write_all(&amp;mut self, buf: &amp;[u8]) -&gt; IoResult&lt;()&gt; {
        push_all_bytes(&amp;mut self.buf, buf);
        Ok(())
    }
}
</code></pre>

<p>Deserialization we do much better than serde because we aren&rsquo;t passing around
all those tags, but we have a ways to catch up to rapidjson. Still, being just 37%
slower than the fastest JSON deserializer makes me feel pretty proud.</p>

<table>
<thead>
<tr>
<th> language </th>
<th> library          </th>
<th> format                  </th>
<th> deserialization (MB/s) </th>
</tr>
</thead>
<tbody>
<tr>
<td> Rust     </td>
<td> capnproto-rust   </td>
<td> Cap&#8217;n Proto (unpacked)  </td>
<td> 2123                   </td>
</tr>
<tr>
<td> Go       </td>
<td> go-capnproto     </td>
<td> Cap&#8217;n Proto (zero copy) </td>
<td> 1407.95                </td>
</tr>
<tr>
<td> Go       </td>
<td> go-capnproto     </td>
<td> Cap&#8217;n Proto             </td>
<td> 711.77                 </td>
</tr>
<tr>
<td> Rust     </td>
<td> capnproto-rust   </td>
<td> Cap&#8217;n Proto (packed)    </td>
<td> 529                    </td>
</tr>
<tr>
<td> Go       </td>
<td> gogoprotobuf     </td>
<td> Protocol Buffers        </td>
<td> 272.68                 </td>
</tr>
<tr>
<td> C++      </td>
<td> rapidjson        </td>
<td> JSON (sax)              </td>
<td> 189                    </td>
</tr>
<tr>
<td> C++      </td>
<td> rapidjson        </td>
<td> JSON (dom)              </td>
<td> 162                    </td>
</tr>
<tr>
<td> Rust     </td>
<td> bincode          </td>
<td> Binary                  </td>
<td> 142                    </td>
</tr>
<tr>
<td> Rust     </td>
<td> rust-protobuf    </td>
<td> Protocol Buffers        </td>
<td> 141                    </td>
</tr>
<tr>
<td> Rust     </td>
<td> rust-msgpack     </td>
<td> MessagePack             </td>
<td> 138                    </td>
</tr>
<tr>
<td> <strong>Rust</strong> </td>
<td> <strong>serde2::json</strong> </td>
<td> <strong>JSON</strong>                </td>
<td> <strong>122</strong>                </td>
</tr>
<tr>
<td> Go       </td>
<td> ffjson           </td>
<td> JSON                    </td>
<td> 95.06                  </td>
</tr>
<tr>
<td> Go       </td>
<td> goprotobuf       </td>
<td> Protocol Buffers        </td>
<td> 79.78                  </td>
</tr>
<tr>
<td> Rust     </td>
<td> serde::json      </td>
<td> JSON                    </td>
<td> 67                     </td>
</tr>
<tr>
<td> Rust     </td>
<td> serialize::json  </td>
<td> JSON                    </td>
<td> 25                     </td>
</tr>
<tr>
<td> Go       </td>
<td> encoding/json    </td>
<td> JSON                    </td>
<td> 22.79                  </td>
</tr>
</tbody>
</table>


<h2>Conclusion</h2>

<p>What a long trip it&rsquo;s been! I hope you enjoyed it. While there are still
a few things left to port over from serde1 to serde2 (like the JSON pretty
printer), and some things probably should be renamed, I&rsquo;m happy with the design
so I think it&rsquo;s in a place where people can start using it now. Please let me
know how it goes!</p>
]]></content>
  </entry>
  
</feed>
