<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Compiletest | Chasing Rabbits]]></title>
  <link href="http://erickt.github.io/blog/categories/compiletest/atom.xml" rel="self"/>
  <link href="http://erickt.github.io/"/>
  <updated>2015-11-24T14:06:24-08:00</updated>
  <id>http://erickt.github.io/</id>
  <author>
    <name><![CDATA[Erick Tryzelaar]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[If You Use Unsafe, You Should Be Using Compiletest]]></title>
    <link href="http://erickt.github.io/blog/2015/09/22/if-you-use-unsafe/"/>
    <updated>2015-09-22T10:58:25-07:00</updated>
    <id>http://erickt.github.io/blog/2015/09/22/if-you-use-unsafe</id>
    <content type="html"><![CDATA[<p>One of the coolest things about the Rust typesystem is that you can use it to
make unsafe bindings safe. Read all about it in the
<a href="https://doc.rust-lang.org/nightly/nomicon/">Rustonomicon</a>. However, it can be
really quite easy to slip in a bug where you&rsquo;re not actually making the
guarantees you think you&rsquo;re making. For example, here&rsquo;s a real bug I made in
the <a href="https://github.com/erickt/rust-zmq">ZeroMQ FFI bindings</a> (which have been
edited for clarity):</p>

<pre><code class="rust">pub struct Socket {
    sock: *mut libc::c_void,
    closed: bool
}

impl Socket {
    pub fn as_poll_item&lt;'a&gt;(&amp;self, events: i16) -&gt; PollItem&lt;'a&gt; { // &lt;- BUG!!!
        PollItem {
            socket: self.sock,
            fd: 0,
            events: events,
            revents: 0,
            marker: PhantomData
        }
    }
}

impl Drop for Socket {
    fn drop(&amp;mut self) {
        unsafe {
            zmq_sys::zmq_close(self.sock);
        }
    }
}

pub struct PollItem&lt;'a&gt; {
    socket: *mut libc::c_void,
    fd: libc::c_int,
    events: i16,
    revents: i16,
    marker: PhantomData&lt;&amp;'a Socket&gt;
}

pub fn poll(items: &amp;mut [PollItem], timeout: i64) -&gt; Result&lt;i32, Error&gt; {
    unsafe {
        let rc = zmq_sys::zmq_poll(
            items.as_mut_ptr() as *mut zmq_sys::zmq_pollitem_t,
            items.len() as c_int,
            timeout as c_long);

        if rc == -1i32 {
            Err(errno_to_error())
        } else {
            Ok(rc as i32)
        }
    }
}
</code></pre>

<p>Here&rsquo;s the bug if you missed my callout:</p>

<pre><code class="rust">    pub fn as_poll_item&lt;'a&gt;(&amp;self, events: i16) -&gt; PollItem&lt;'a&gt; { // &lt;- BUG!!!
</code></pre>

<p>My intention was to tie the lifetime of <code>PollItem&lt;'a&gt;</code> to the lifetime of the
<code>Socket</code>, but because I left out one measly <code>'a</code>, Rust doesn&rsquo;t tie the two
together, and instead is actually using the <code>'static</code> lifetime. This then lets
you do something evil like:</p>

<pre><code>// leak the pointer!
let poll_item = {
        let context = zmq::Context::new();
        let socket = context.socket(zmq::PAIR).unwrap();
        socket.as_poll_item(0)
};

// And use the now uninitialized pointer! Wee! Party like it's C/C++!
poll(&amp;[poll_item], 0).unwrap();
</code></pre>

<p>It&rsquo;s just that easy. Fix is simple, just change the function to use <code>&amp;'a self</code>
and Rust will refuse to compile this snippet. Job well done!</p>

<p>Well, no, not really. Because what was particularly devious about this bug is
that it actually came back. Later on I accidentally reverted <code>&amp;'a self</code> back to
<code>&amp;self</code> because I secretly hate myself. The project and examples still compiled
and ran, but that unitialized dereference was just waiting around to cause a
security vulnerability.</p>

<p>Oops.</p>

<p>Crap.</p>

<p>Making sure Rust actually rejects programs that it ought to be rejecting
<strong>fundamentally important</strong> when writing a library that uses Unsafe Rust.</p>

<p>That&rsquo;s where <a href="https://github.com/laumann/compiletest-rs">compiletest</a> comes in.
It&rsquo;s a testing framework that&rsquo;s been extacted from
<a href="https://github.com/rust-lang/rust">rust-lang/rust</a>
that lets you write these &ldquo;shouldn&rsquo;t-compile&rdquo; tests. Here&rsquo;s how to use it.
First add this to your <code>Cargo.toml</code>. We do a little feature dance because
currently <code>compiletest</code> only runs on nightly:</p>

<pre><code class="toml">...
[features]
unstable = ["compiletest_rs"]
...

[dependencies]
compiletest_rs = { "version = "*", optional = true }
...
</code></pre>

<p>Then, add add a test driver <code>tests/compile-tests.rs</code> (or whatever you want to
name it) that runs the compiletest tests:</p>

<pre><code class="rust">#![cfg(feature = "unstable")]

extern crate compiletest_rs as compiletest;

use std::path::PathBuf;
use std::env::var;

fn run_mode(mode: &amp;'static str) {
    let mut config = compiletest::default_config();

    let cfg_mode = mode.parse().ok().expect("Invalid mode");

    config.target_rustcflags = Some("-L target/debug/ -L target/debug/deps/".to_owned());
    if let Ok(name) = var::&lt;&amp;str&gt;("TESTNAME") {
        let s : String = name.to_owned();
        config.filter = Some(s)
    }
    config.mode = cfg_mode;
    config.src_base = PathBuf::from(format!("tests/{}", mode));

    compiletest::run_tests(&amp;config);
}

#[test]
fn compile_test() {
    run_mode("compile-fail");
}
</code></pre>

<p>Finally, add the test! Here&rsquo;s the one I wrote, <code>tests/compile-fail/no-leaking-poll-items.rs</code>:</p>

<pre><code class="rust">extern crate zmq;

fn main() {
    let mut context = zmq::Context::new();
    let _poll_item = {
        let socket = context.socket(zmq::PAIR).unwrap();
        socket.as_poll_item(0) //~ ERROR error: `socket` does not live long enough
    };
}
</code></pre>

<p>Now you can live in peace with the confidence that this bug won&rsquo;t ever appear again:</p>

<pre><code>% multirust run nightly cargo test --features unstable
     Running target/debug/compile_tests-335c5f56b353961f

running 1 test

running 1 test
test [compile-fail] compile-fail/no-leaking-poll-items.rs ... ok

test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured

test compile_test ... ok
</code></pre>

<p>In summary, use <code>compiletest</code>, and demand it&rsquo;s use from the Unsafe Rust
libraries you use! Otherwise you can never be sure if unsafe and undefined
behavior like this will sneak into your project.</p>

<p>TLDR:</p>

<p><img class="center" src="/images/compiletest-badtime.jpg" title="Bad Time" ></p>
]]></content>
  </entry>
  
</feed>
