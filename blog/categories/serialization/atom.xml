<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Serialization | Chasing Rabbits]]></title>
  <link href="http://erickt.github.io/blog/categories/serialization/atom.xml" rel="self"/>
  <link href="http://erickt.github.io/"/>
  <updated>2016-02-26T23:11:25-08:00</updated>
  <id>http://erickt.github.io/</id>
  <author>
    <name><![CDATA[Erick Tryzelaar]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Serde 0.7]]></title>
    <link href="http://erickt.github.io/blog/2016/02/26/serde-0-dot-7/"/>
    <updated>2016-02-26T23:06:11-08:00</updated>
    <id>http://erickt.github.io/blog/2016/02/26/serde-0-dot-7</id>
    <content type="html"><![CDATA[<p>I&rsquo;m thrilled to announce <a href="https://github.com/serde-rs/serde">Serde</a> 0.7.0!
It&rsquo;s been a long time coming, and has a number of long awaited new features,
breaking changes, and other notable changes.  Serde 0.6.x is now deprecated,
and while I&rsquo;ll try to keep <code>serde_codegen</code> and <code>serde_macros</code> while projects
switch over to 0.7, I&rsquo;m going to shift more to a pull-based approach, so please
file a bug ticket if a nightly release has broken you.</p>

<p>On to the list on the major changes!</p>

<h2>Serde</h2>

<ul>
<li>Removed the word <code>Error</code> from <code>serde::de::Error</code> variants.</li>
<li>Renamed <code>visit_</code> methods to <code>serialize_</code> and <code>deserialize_</code>.</li>
<li>Removed dependency on the deprecated <a href="https://github.com/rust-num/num">num</a>
crate.</li>
<li>Require that implementations of <code>serde::de::Error</code> implement
<code>std::error::Error</code>.</li>
<li>Added <code>serde::de::Deserializer::deserialize_struct_field</code> hook that allows a
<code>Deserializer</code> to know the next value is a struct field.</li>
<li>Added <code>serde::ser::Error</code>, which allows a <code>Serialize</code> type produce an error
if it cannot be serialized.</li>
<li>Serializing <code>std::path::Path</code> with non-unicode characters will result in a
Serde error, rather than a panic.</li>
<li>Added implementations for <code>std::net</code> types.</li>
<li>Added <code>serde::de::Error::unknown_variant</code> error message hook.</li>
<li>Renamed <code>serde::de::Error::syntax</code> to <code>serde::de::Error::custom</code>.</li>
</ul>


<h2>Serde Codegen and Macros</h2>

<ul>
<li>Serde now by default ignores unknown fields when deserializing.  The previous
behavior, where Serde will report unknown fields as an error, can be
  opted in with the container annotation <code>#[serde(deny_unknown_fields)]</code>,
as in:</li>
</ul>


<pre><code class="rust">#[serde(deny_unknown_fields)
struct Point {
    x: usize,
    y: usize,
}
</code></pre>

<ul>
<li>Added the container annotation <code>#[serde(rename="...")]</code>to rename the
container, as in:</li>
</ul>


<pre><code class="rust">#[serde(rename="point")]
struct Point {
    x: usize,
    y: usize,
}
</code></pre>

<ul>
<li>Added the variantl annotation <code>#[serde(rename="...")]</code> to rename
variants, as in:</li>
</ul>


<pre><code class="rust">enum Value {
    #[serde(rename="type")]
    Type
}
</code></pre>

<ul>
<li>Added rename annotation <code>#[serde(rename(serialize="...", deserialize="..."))]</code>
  that supports crazy schemas like AWS that expect serialized fields with the
first character lower case, and the deserialized response with the first
character upper cased.</li>
<li>Removed support for the unused format-specific rename support.</li>
<li>Added the field annotation <code>#[serde(default="$path")]</code>, where <code>$path</code> is a
reference to some function that returns a default value for a field if it&rsquo;s
not present when deserializing.  For example:</li>
</ul>


<pre><code class="rust">trait MyDefault {
    fn my_default() -&gt; Self;
}

struct Point&lt;T: MyDefault&gt; {
    x: T,
    #[serde(default="MyDefault::my_default")]
    y: T,
}
</code></pre>

<ul>
<li>Added the field annotation <code>#[serde(skip_serializing_if="$path")]</code>, where
<code>$path</code> is a path reference to some function that returns a <code>bool</code>, that if
true, should skip serializing the field.</li>
</ul>


<pre><code class="rust">trait ShouldSkip {
    fn should_skip(&amp;self) -&gt; bool;
}

struct Point&lt;T: ShouldSkip&gt; {
    x: T,
    #[serde(default="ShouldSkip::should_skip")]
    y: T,
}
</code></pre>

<ul>
<li>Added the field annotations <code>#[serde(serialize_with="$path")]</code> and
<code>#[serde(deserialize_with="$path")]</code>, where <code>$path</code> us a path reference to
some function that serializes a field, as in:</li>
</ul>


<pre><code class="rust">trait MySerialization {
    fn serialize_with&lt;S: Serializer&gt;(&amp;self, serializer: &amp;mut S) -&gt; Result&lt;(), S::Error&gt;;

    fn deserialize_with&lt;D: Deserializer&gt;(deserializer: &amp;mut D) -&gt; Result&lt;Self, D::Error&gt;;
}

struct Record {
    #[serde(serialize_with="MySerialization::serialize_with")]
    #[serde(deserialize_with="MySerialization::deserialize_with")]
    timestamp: time::Timespec,
}
</code></pre>

<h2>Serde JSON</h2>

<ul>
<li>Added <code>StreamDeserializer</code>, that enables parsing a stream of JSON values optionally
separated by whitespace into an iterator of those deserialized values.</li>
</ul>


<h2>Thanks</h2>

<p>I&rsquo;d like to thank everyone that&rsquo;s helped out over the past few months. Please
forgive me if I accidentally left you off the list:</p>

<ul>
<li>Craig M. Brandenburg</li>
<li>Florian Gilcher</li>
<li>Hans Kristian Flaatten</li>
<li>Issam Hakimi</li>
<li>Joe Wilm</li>
<li>John Heitmann</li>
<li>Marek Kotewicz</li>
<li>Ms2ger</li>
<li>Nathan Lilienthal</li>
<li>Oliver Schneider</li>
<li>Paul Woolcock</li>
<li>Roma Sokolov</li>
<li>Simon Persson</li>
<li>Thomas Bahn</li>
<li>Tom Jakubowski</li>
<li>thorbenk</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Serde 0.5.0 - Many Many Changes]]></title>
    <link href="http://erickt.github.io/blog/2015/08/07/serde-0-dot-5-0-many-many-changes/"/>
    <updated>2015-08-07T08:14:22-07:00</updated>
    <id>http://erickt.github.io/blog/2015/08/07/serde-0-dot-5-0-many-many-changes</id>
    <content type="html"><![CDATA[<p>Hello all you beautiful and talented people! I&rsquo;m pleased to announce
<a href="https://github.com/serde-rs/serde">serde</a> 0.5.0. We&rsquo;re bumping the major
(unstable) version number here because there have been a huge amount of
breaking changes in the API. This has been done to better support serialization
formats like <a href="https://github.com/TyOverby/bincode">bincode</a>, which relies on
the <code>Serialize</code>e to hint to the <code>Serializer</code> how to parse the next bytes.
This will enable <a href="https://github.com/servo/servo/pull/6583">Servo</a> to use
bincode for its IPC protocol.</p>

<p>Here are the major changes:</p>

<ul>
<li><code>serde::json</code> was factored out into its own separate crate
<a href="https://crates.io/crates/serde_json">serde_json</a>
  <a href="https://github.com/serde-rs/serde/pull/114">#114</a>.</li>
<li>Added serialization and deserialization type hints.</li>
<li>Renamed many functions to change <code>visit_named_{map,seq}</code> to
  <code>visit_struct</code> and <code>visit_tuple_struct</code>
  <a href="https://github.com/serde-rs/serde/pull/114">#114</a>
<a href="https://github.com/serde-rs/serde/pull/120">#120</a>.</li>
<li>Added hooks to allow serializers to serialize newtype tuple structs without a
wrapper type <a href="https://github.com/serde-rs/serde/pull/121">#121</a>.</li>
<li>Remove <code>_error</code> from <code>de::Error</code>
<a href="https://github.com/serde-rs/serde/pull/129">#129</a>.</li>
<li>Rewrote json parser to not consume the whole stream
<a href="https://github.com/serde-rs/serde/pull/127">#127</a>.</li>
<li>Fixed <code>serde_macros</code> for generating fully generic code
<a href="https://github.com/serde-rs/serde/pull/117">#117</a>.</li>
</ul>


<p>Thank you to everyone that&rsquo;s helped with this release:</p>

<ul>
<li>Craig Brandenburg</li>
<li>Hugo Duncan</li>
<li>Jarred Nicholis</li>
<li>Oliver Schneider</li>
<li>Patrick Walton</li>
<li>Sebastian Thiel</li>
<li>Skylar Lipthay</li>
<li>Thomas Bahn</li>
<li>dswd</li>
</ul>


<h1>Benchmarks</h1>

<p>It&rsquo;s been a bit since we last did some
<a href="https://erickt.github.io/blog/2015/02/16/rewriting-rust-serialization-there-can-be-only-one-serde/">benchmarks</a>,
so here are the latest numbers with these compilers:</p>

<ul>
<li>rustc: 1.4.0-nightly (1181679c8 2015-08-07)</li>
<li>go: version go1.4.2 darwin/amd64</li>
<li>clang: Apple LLVM version 6.1.0 (clang-602.0.53) (based on LLVM 3.6.0svn)</li>
</ul>


<p><a href="https://github.com/TyOverby/bincode">bincode</a>&rsquo;s serde support makes its first
appearance, which starts out roughly 1/3 slower at serialization, but about the
same speed at deserialization. I haven&rsquo;t done much optimization, so there&rsquo;s
probably a lot of low hanging fruit.</p>

<p><a href="https://crates.io/crates/serde_json">serde_json</a> saw a good amount of
improvement, mainly from some compiler optimizations in the 1.4 nightly. The
deserializer is slightly slower due to the parser rewrite.</p>

<p><a href="https://github.com/dwrensha/capnproto-rust">capnproto-rust</a>&rsquo;s unpacked format
shows a surprisingly large large serialization improvement, with a 10x
improvement from 4GB/s to 15GB/s. Good job dwrensha!  Deserialization is half
as slow as before though. Perhaps I have a bug in my code?</p>

<p>I&rsquo;ve changed the Rust MessagePack implementation to
<a href="https://github.com/3Hren/msgpack-rust">rmp</a>, which has a wee bit faster
serializer, but deserialization was about the same.</p>

<p>I&rsquo;ve also updated the numbers for Go and C++, but those numbers stayed roughly
the same.</p>

<p>Serialization:</p>

<table>
<thead>
<tr>
<th> language </th>
<th> library             </th>
<th> format                     </th>
<th> serialization (MB/s) </th>
</tr>
</thead>
<tbody>
<tr>
<td> <strong>Rust</strong> </td>
<td> <strong>capnproto-rust</strong>  </td>
<td> <strong>Cap&#8217;n Proto (unpacked)</strong> </td>
<td> <del>4349</del> <strong>15448</strong>   </td>
</tr>
<tr>
<td> Go       </td>
<td> go-capnproto        </td>
<td> Cap&#8217;n Proto                </td>
<td> 3877                 </td>
</tr>
<tr>
<td> <strong>Rust</strong> </td>
<td> <strong>bincode</strong>         </td>
<td> <strong>Raw</strong>                    </td>
<td> <del>1020</del> <strong>3278</strong>    </td>
</tr>
<tr>
<td> <strong>Rust</strong> </td>
<td> <strong>bincode (serde)</strong> </td>
<td> <strong>Raw</strong>                    </td>
<td> <strong>2143</strong>             </td>
</tr>
<tr>
<td> <strong>Rust</strong> </td>
<td> <strong>capnproto-rust</strong>  </td>
<td> <strong>Cap&#8217;n Proto (packed)</strong>   </td>
<td> <del>583</del> <strong>656</strong>      </td>
</tr>
<tr>
<td> Go       </td>
<td> gogoprotobuf        </td>
<td> Protocol Buffers           </td>
<td> <del>596</del> 627          </td>
</tr>
<tr>
<td> <strong>Rust</strong> </td>
<td> <strong>rmp</strong>             </td>
<td> <strong>MessagePack</strong>            </td>
<td> <del>397</del> <strong>427</strong>      </td>
</tr>
<tr>
<td> <strong>Rust</strong> </td>
<td> <strong>rust-protobuf</strong>   </td>
<td> <strong>Protocol Buffers</strong>       </td>
<td> <del>357</del> <strong>373</strong>      </td>
</tr>
<tr>
<td> <strong>Rust</strong> </td>
<td> <strong>serde::json</strong>     </td>
<td> <strong>JSON</strong>                   </td>
<td> <del>288</del> <strong>337</strong>      </td>
</tr>
<tr>
<td> C++      </td>
<td> rapidjson           </td>
<td> JSON                       </td>
<td> 307                  </td>
</tr>
<tr>
<td> Go       </td>
<td> goprotobuf          </td>
<td> Protocol Buffers           </td>
<td> <del>214</del> 226          </td>
</tr>
<tr>
<td> <strong>Rust</strong> </td>
<td> <strong>serialize::json</strong> </td>
<td> <strong>JSON</strong>                   </td>
<td> <del>147</del> <strong>212</strong>      </td>
</tr>
<tr>
<td> Go       </td>
<td> ffjson              </td>
<td> JSON                       </td>
<td> 147                  </td>
</tr>
<tr>
<td> Go       </td>
<td> encoding/json       </td>
<td> JSON                       </td>
<td> 85                   </td>
</tr>
</tbody>
</table>


<p>Deserialization:</p>

<table>
<thead>
<tr>
<th> language </th>
<th> library             </th>
<th> format                     </th>
<th> deserialization (MB/s) </th>
</tr>
</thead>
<tbody>
<tr>
<td> <strong>Rust</strong> </td>
<td> <strong>capnproto-rust</strong>  </td>
<td> <strong>Cap&#8217;n Proto (unpacked)</strong> </td>
<td> <del>2185</del> <strong>1306</strong>      </td>
</tr>
<tr>
<td> Go       </td>
<td> go-capnproto        </td>
<td> Cap&#8217;n Proto (zero copy)    </td>
<td> 1407                   </td>
</tr>
<tr>
<td> Go       </td>
<td> go-capnproto        </td>
<td> Cap&#8217;n Proto                </td>
<td> 711                    </td>
</tr>
<tr>
<td> <strong>Rust</strong> </td>
<td> <strong>capnproto-rust</strong>  </td>
<td> <strong>Cap&#8217;n Proto (packed)</strong>   </td>
<td> <del>351</del> <strong>464</strong>        </td>
</tr>
<tr>
<td> <strong>Rust</strong> </td>
<td> <strong>bincode (serde)</strong> </td>
<td> <strong>Raw</strong>                    </td>
<td> <strong>310</strong>                </td>
</tr>
<tr>
<td> <strong>Rust</strong> </td>
<td> <strong>bincode</strong>         </td>
<td> <strong>Raw</strong>                    </td>
<td> <del>142</del> <strong>291</strong>        </td>
</tr>
<tr>
<td> Go       </td>
<td> gogoprotobuf        </td>
<td> Protocol Buffers           </td>
<td> 270                    </td>
</tr>
<tr>
<td> C++      </td>
<td> rapidjson           </td>
<td> JSON (sax)                 </td>
<td> 182                    </td>
</tr>
<tr>
<td> C++      </td>
<td> rapidjson           </td>
<td> JSON (dom)                 </td>
<td> 155                    </td>
</tr>
<tr>
<td> <strong>Rust</strong> </td>
<td> <strong>rust-protobuf</strong>   </td>
<td> <strong>Protocol Buffers</strong>       </td>
<td> <strong>143</strong>                </td>
</tr>
<tr>
<td> <strong>Rust</strong> </td>
<td> <strong>rmp</strong>             </td>
<td> <strong>MessagePack</strong>            </td>
<td> <del>138</del> <strong>128</strong>        </td>
</tr>
<tr>
<td> <strong>Rust</strong> </td>
<td> <strong>serde::json</strong>     </td>
<td> <strong>JSON</strong>                   </td>
<td> <del>140</del> <strong>122</strong>        </td>
</tr>
<tr>
<td> Go       </td>
<td> ffjson              </td>
<td> JSON                       </td>
<td> 95                     </td>
</tr>
<tr>
<td> Go       </td>
<td> goprotobuf          </td>
<td> Protocol Buffers           </td>
<td> 81                     </td>
</tr>
<tr>
<td> Go       </td>
<td> encoding/json       </td>
<td> JSON                       </td>
<td> 23                     </td>
</tr>
<tr>
<td> Rust     </td>
<td> serialize::json     </td>
<td> JSON                       </td>
<td> 23                     </td>
</tr>
</tbody>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Serde 0.4.0 - Syntax Extensions in Stable Rust and More!]]></title>
    <link href="http://erickt.github.io/blog/2015/05/18/serde-0-dot-4-0-now-supports-macros-in-stable-rust/"/>
    <updated>2015-05-18T07:57:19-07:00</updated>
    <id>http://erickt.github.io/blog/2015/05/18/serde-0-dot-4-0-now-supports-macros-in-stable-rust</id>
    <content type="html"><![CDATA[<p>Hello Internet! I&rsquo;m pleased to announce
<a href="https://github.com/serde-rs/serde">serde</a> 0.4.0, which now supports many new
features with help from our growing serde community. The largest is now serde
supports syntax extensions in stable Rust by way of
<a href="https://github.com/erickt/rust-syntex">syntex</a>. syntex is a fork of Rust&rsquo;s
parser library libsyntax that has been modified to enable code generation.
serde uses it along with a
<a href="http://doc.crates.io/build-script.html">Cargo build script</a> to expand the
<code>#[derive(Serialize, Deserialize)]</code> decorator annotations. Here&rsquo;s how to use
it.</p>

<p>First, lets start with a simple serde 0.3.x project that&rsquo;s forced to use
nightly because it uses <code>serde_macros</code>. The <code>Cargo.toml</code> is:</p>

<pre><code class="toml">[package]
name = "hello_world"
versio = "0.1.0"
authors = ["Erick Tryzelaar &lt;erick.tryzelaar@gmail.com&gt;"]
license = "MIT/Apache-2.0"

[dependencies]
serde = "*"
serde_macros = "*"
</code></pre>

<p>And the actual library is <code>src/lib.rs</code>:</p>

<pre><code class="rust">#![feature(custom_derive, plugin)]
#![plugin(serde_macros)]

extern crate serde;

#[derive(Serialize, Deserialize)]
pub struct Point {
    x: u32,
    y: u32,
}
</code></pre>

<p>In order to use Stable Rust, we can use the new <code>serde_codegen</code>. Our strategy
is to split our input into two files. The first is the entry point Cargo will
use to compile the library, <code>src/lib.rs</code>. The second is a template that
contains the macros, <code>src/lib.rs.in</code>. It will be expanded into
<code>$OUT_DIR/lib.rs</code>, which is included in <code>src/lib.rs</code>. So <code>src/lib.rs</code> looks
like:</p>

<pre><code class="rust">extern crate serde;

include!(concat!(env!("OUT_DIR"), "/lib.rs"));
</code></pre>

<p><code>src/lib.rs.in</code> then just looks like:</p>

<pre><code class="rust">#[derive(Serialize, Deserialize)]
pub struct Point {
    x: u32,
    y: u32,
}
</code></pre>

<p>In order to generate the <code>$OUT_DIR/lib.rs</code>, we&rsquo;ll use a Cargo build script.
We&rsquo;ll configure <code>Cargo.toml</code> with:</p>

<pre><code class="toml">[package]
name = "hello_world"
versio = "0.1.0"
authors = ["Erick Tryzelaar &lt;erick.tryzelaar@gmail.com&gt;"]
license = "MIT/Apache-2.0"
build = "build.rs"

[build-dependencies]
syntex = "*"
serde_codegen = "*"

[dependencies]
serde = "*"
</code></pre>

<p>Finally, the <code>build.rs</code> script itself uses <code>syntex</code> to expand the syntax
extensions:</p>

<pre><code class="rust">extern crate syntex;
extern crate serde_codegen;

use std::env;
use std::path::Path;

fn main() {
    let out_dir = env::var_os("OUT_DIR").unwrap();

    let src = Path::new("src/lib.rs.in");
    let dst = Path::new(&amp;out_dir).join("lib.rs");

    let mut registry = syntex::Registry::new();

    serde_codegen::register(&amp;mut registry);
    registry.expand("", &amp;src, &amp;dst).unwrap();
}
</code></pre>

<h2>Downside 1: Error Locations</h2>

<p>While <code>syntex</code> is quite powerful, there are a few major downsides. Rust does
not yet support the ability for a generated file to provide error location
information from a template file. This means that tracking down errors requires
manually looking at the generated code and trying to identify where the error
in the template. However, there is a workaround.  It&rsquo;s actually not that
difficult to support <code>syntex</code> and the Rust Nightly compiler plugins. To update
our example, we&rsquo;ll change the <code>Cargo.toml</code> to:</p>

<pre><code class="toml">[package]
name = "hello_world"
versio = "0.1.0"
authors = ["Erick Tryzelaar &lt;erick.tryzelaar@gmail.com&gt;"]
license = "MIT/Apache-2.0"
build = "build.rs"

[features]
default = ["with_syntex"]
nightly = ["serde_macros"]
with_syntex = ["serde", "serde_codegen"]

[build-dependencies]
syntex = { version = "*", optional = true }
serde_codegen = { version = "*", optional = true }

[dependencies]
serde = "*"
serde_macros = { version = "*", optional = true }
</code></pre>

<p>Then the <code>build.rs</code> is changed to optionally expand the macros in our template:</p>

<pre><code class="rust">#[cfg(feature = "with_syntex")]
mod inner {
    extern crate syntex;
    extern crate serde_codegen;

    use std::env;
    use std::path::Path;

    pub fn main() {
        let out_dir = env::var_os("OUT_DIR").unwrap();

        let src = Path::new("src/lib.rs.in");
        let dst = Path::new(&amp;out_dir).join("lib.rs");

        let mut registry = syntex::Registry::new();

        serde_codegen::register(&amp;mut registry);
        registry.expand("", &amp;src, &amp;dst).unwrap();
    }
}

#[cfg(not(feature = "with_syntex"))]
mod inner {
    pub fn main() {}
}

pub fn main() {
    inner::main()
}
</code></pre>

<p>Finally, <code>src/lib.rs</code> is updated to:</p>

<pre><code class="rust">#![cfg_attr(feature = "nightly", feature(plugin))]
#![cfg_attr(feature = "nightly", plugin(serde_macros))]

extern crate serde;

#[cfg(feature = "nightly")]
include!("lib.rs.in");

#[cfg(feature = "with_syntex")]
include!(concat!(env!("OUT_DIR"), "/lib.rs"));
</code></pre>

<p>Then most development can happen with using the Nightly Rust and
<code>cargo build --no-default-features --features nightly</code> for better error
messages, but downstream consumers can use Stable Rust without worry.</p>

<h2>Downside 2: Macros in Macros</h2>

<p>Syntex can only expand macros inside macros it knows about, and it doesn&rsquo;t know
about the builtin macros. This is because a lot of the stable macros are using
unstable features under the covers. So unfortunately if you&rsquo;re using a library
like the quasiquoting library <a href="https://github.com/erickt/rust-quasi">quasi</a>,
you cannot write:</p>

<pre><code class="rust">let exprs = vec![quote_expr!(cx, 1 + 2)];
</code></pre>

<p>Instead you have to pull out the syntex macros into a separate variable:</p>

<pre><code class="rust">let expr = quote_expr!(cx, 1 + 1);
let exprs = vec![expr];
</code></pre>

<h2>Downside 3: Compile Times</h2>

<p>Syntex can take a while to compile. It may be possible to optimize this, but
that may be difficult while keeping compatibility with <code>libsyntax</code>.</p>

<hr />

<p>That&rsquo;s <code>v0.4.0</code>. I hope you enjoy it! Please let me know if you run into any
<a href="https://github.com/serde-rs/serde/issues">problems</a>.</p>

<h2>Release Notes</h2>

<p>Here are other things that came with this version:</p>

<ul>
<li>Added field annotation to enable renaming fields for different backends
<a href="https://github.com/serde-rs/serde/pull/69">#69</a>. For example:</li>
</ul>


<pre><code class="rust">struct Point {
  #[serde(rename="X")]
  x: u32,

  #[serde(rename(json="the-x", xml="X")]
  y: u32,
}
</code></pre>

<ul>
<li>Faster JSON string parsing <a href="https://github.com/serde-rs/serde/pull/71">#71</a>.</li>
<li>Add a <code>LineColIterator</code> that tracks line and column information for
  deserializers <a href="https://github.com/serde-rs/serde/pull/58">#58</a>.</li>
<li>Improved bytestring support <a href="https://github.com/serde-rs/serde/pull/72">#72</a></li>
<li>Changed <code>de::PrimitiveVisitor</code> to also depend on <code>FromStr</code>
<a href="https://github.com/serde-rs/serde/pull/70">#70</a></li>
<li>Added impls for fixed sized arrays with 1 to 32 elements
<a href="https://github.com/serde-rs/serde/pull/74">#74</a></li>
<li>Added <code>json::Value::lookup</code>, that allows values to be extracted with
<code>value.lookup("foo.bar.baz")</code> <a href="https://github.com/serde-rs/serde/pull/76">#76</a></li>
</ul>


<p>Bug Fixes:</p>

<ul>
<li>Make sure that -0.0 gets serialized as &ldquo;-0.0&rdquo;
<a href="https://github.com/serde-rs/serde/commit/f0c87fb">f0c87fb</a>.</li>
<li>Missing field errors displayed original field name instead of renamed
<a href="https://github.com/serde-rs/serde/pull/64">#64</a>.</li>
<li>Fixed handling json integer overflow</li>
</ul>


<p>A special thanks to everyone that helped with this release:</p>

<ul>
<li>Alex Crichton</li>
<li>Andrew Poelstra</li>
<li>Corey Farwell</li>
<li>Hugo Duncan</li>
<li>Jorge Israel Peña</li>
<li>Kang Seonghoon</li>
<li>Mikhail Borisov</li>
<li>Oliver Schneider</li>
<li>Sebastian Thiel</li>
<li>Steven Fackler</li>
<li>Thomas Bahn</li>
<li>derhaskell</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Serde 0.3.1 - Now Compatible With Beta! Plus Aster and Quasi Updates]]></title>
    <link href="http://erickt.github.io/blog/2015/04/12/serde-0-dot-3-1-now-compatible-with-beta/"/>
    <updated>2015-04-12T11:53:43-07:00</updated>
    <id>http://erickt.github.io/blog/2015/04/12/serde-0-dot-3-1-now-compatible-with-beta</id>
    <content type="html"><![CDATA[<p>I just pushed up <a href="https://github.com/erickt/rust-serde">serde</a> 0.3.1 to
<a href="https://crates.io/crates/serde">crates.io</a>, which is now compatible with beta!
serde_macros 0.3.1, however still requires nightly.  But this means that if
you implement the all the traits using stable features, then any users of serde
should work with rust 1.0.</p>

<p>Here&rsquo;s what&rsquo;s also new in serde v0.3.1:</p>

<ul>
<li>Renamed <code>ValueDeserializer::deserializer</code> into <code>ValueDeserializer::into_deserializer</code>.</li>
<li>Renamed the attribute that changes the name a field is serialized
<code>#[serde(alias="...")]</code> to <code>#[serde(rename="...")]</code>.</li>
<li>Added implementations for <code>Box</code>, <code>Rc</code>, and <code>Arc</code>.</li>
<li>Updated <code>VariantVisitor</code> to hint to the deserializer which variant kind it is expecting.
This allows serializers to serialize a unit variant as a string.</li>
<li>Added an <code>Error::unknown_field_error</code> error message.</li>
<li>Progress on the documentation, but there&rsquo;s still plenty more to go.</li>
</ul>


<p>Upstream of serde, I&rsquo;ve been also doing some work on
<a href="https://github.com/erickt/rust-aster">aster</a> and
<a href="https://github.com/erickt/rust-quasi">quasi</a>, which are my helper libraries to
simplify writing syntax extensions.</p>

<p>aster v0.2.0:</p>

<ul>
<li>Added builders for qualified paths, slices, <code>Vec</code>, <code>Box</code>, <code>Rc</code>, and <code>Arc</code>.</li>
<li>Extended item builders to support <code>use</code> simple paths, globs, and lists.</li>
<li>Added a helper for building the <code>#[automatically_derived]</code> annotation.</li>
</ul>


<p>quasi v0.1.9:</p>

<ul>
<li>Backported support for <code>quote_attr!()</code> and <code>quote_matchers!()</code> from <code>libsyntax</code>.</li>
<li>Added support for unquoting arbitrary slices.</li>
</ul>


<p>Thanks for everyone&rsquo;s help with this release!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Serde 0.3]]></title>
    <link href="http://erickt.github.io/blog/2015/03/31/serde-0-dot-3/"/>
    <updated>2015-03-31T19:57:37-07:00</updated>
    <id>http://erickt.github.io/blog/2015/03/31/serde-0-dot-3</id>
    <content type="html"><![CDATA[<p>I&rsquo;m happy to announce that I&rsquo;ve released
<a href="https://github.com/erickt/rust-serde">serde</a> 0.3 on
<a href="https://crates.io/crates/serde">crates.io</a> today.  For those unfamiliar with
serde, it&rsquo;s a generic serialization framework, much like
<a href="https://github.com/rust-lang/rustc-serialize/">rustc-serialize</a>, but much more
powerful. Check out my <a href="http://erickt.github.io/blog/categories/serialization/">serialization series</a>
if you&rsquo;re interested in serde&rsquo;s original development.</p>

<p>There&rsquo;s been a ton of work since 0.2. Here are the highlights:</p>

<ul>
<li><p>Ported over from std::old_io to std::io. There is a bit of a performance hit
when serializing to <code>&amp;mut [u8]</code>, although it&rsquo;s really not that bad. In my goser
benchmarks, previously it ran in 373 MB/s, but now it&rsquo;s running at 260 MB/s.
However, this hasn&rsquo;t impacted the <code>Vec&lt;u8&gt;</code> serialization performance, nor
deserialization performance.</p></li>
<li><p>Much better JSON deserialization errors. Now <code>std::io::Error</code> is properly
propogated, and error locations are reported when a <code>Deserialize</code> raises an error.</p></li>
<li><p>Merged <code>serde::ser::Serializer</code> and <code>serde::ser::Visitor</code>.</p></li>
<li><p>Renamed <code>serde::ser::Serialize::visit</code> to <code>serde::ser::Serialize::serialize</code>.</p></li>
<li><p>Replaced <code>serde::ser::{Seq,Map}Visitor::size_hint</code> with a <code>len()</code> method that
returns an optional length. This has a little stronger emphasis that we either
need an exactly length or no length. Formats that need an exact length should
make sure to verify the length passed in matches the actual amount of values
serialized.</p></li>
<li><p><code>serde::json</code> now deserializes missing values as a <code>()</code>.</p></li>
<li><p>Finished implementing <code>#[derive(Serialize, Deserialize)]</code> for all struct and
enum forms.</p></li>
<li><p>Ported <code>serde_macros</code> over to <a href="https://github.com/erickt/rust-aster">aster</a>
and <a href="https://github.com/erickt/rust-quasi">quasi</a>, which simplies code
generation.</p></li>
<li><p>Removed the unnessary <code>first</code> argument from <code>visit_{seq,map}_elt</code>.</p></li>
<li><p>Rewrote enum deserializations to not require allocations. Oddly enough this
is a tad slower than the allocation form. I suspect it&rsquo;s coming from the
function calls not getting inlined away.</p></li>
<li><p>Allowed enum serialization and deserialization to support more than one
variant.</p></li>
<li><p>Allowed <code>Deserialize</code> types to hint that it&rsquo;s expecting a sequence or a map.</p></li>
<li><p>Allowed maps to be deserialized from a <code>()</code>.</p></li>
<li><p>Added a <code>serde::bytes::{Bytes,ByteBuf}</code>, which wrap <code>&amp;[u8]</code>/<code>Vec&lt;u8&gt;</code> to allow
some formats to encode these values more efficiently than generic sequences.</p></li>
<li><p>Added <code>serde::de::value</code>, which contains some helper deserializers to
deserialize from a Rust type.</p></li>
<li><p>Added impls for most collection types in the standard library.</p></li>
</ul>


<p>Thanks everyone that&rsquo;s helped out with this release!</p>
]]></content>
  </entry>
  
</feed>
