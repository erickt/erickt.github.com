<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tilting at Rabbit Holes]]></title>
  <link href="http://erickt.github.io/atom.xml" rel="self"/>
  <link href="http://erickt.github.io/"/>
  <updated>2014-11-24T14:00:31-08:00</updated>
  <id>http://erickt.github.io/</id>
  <author>
    <name><![CDATA[Erick Tryzelaar]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Benchmarking Is Confusing in Low Level Rust]]></title>
    <link href="http://erickt.github.io/blog/2014/11/22/benchmarking-is-confusing/"/>
    <updated>2014-11-22T12:10:29-08:00</updated>
    <id>http://erickt.github.io/blog/2014/11/22/benchmarking-is-confusing</id>
    <content type="html"><![CDATA[<p>Edit: you can find all the code in this post
<a href="https://github.com/erickt/rust-serialization-benchmarks/blob/master/rust/src/writer.rs">here</a>,
and I filed <a href="https://github.com/rust-lang/rust/issues/19281">19281</a> for the
regression I mentioned at the end of the post.</p>

<hr />

<p>Low level benchmarking is confusing and non-intuitive.</p>

<p>The end.</p>

<hr />

<p>Or not. Whatever. So I&rsquo;m trying to get my
implement-<code>Reader</code>-and-<code>Writer</code>-for-<code>&amp;[u8]</code> type PR
<a href="https://github.com/rust-lang/rust/pull/18980">#18980</a> landed. But
<a href="https://github.com/rust-lang/rust/pull/18980#issuecomment-63925495">Steven Fackler</a>
obnixously and correctly pointed out that this won&rsquo;t play that nicely with the
new <code>Reader</code> and <code>Writer</code> implementation for <code>Vec&lt;u8&gt;</code>. Grumble grumble. And then
<a href="https://github.com/rust-lang/rust/pull/18980#issuecomment-63927659">Alex Crichton</a>
had the gall to mention that a <code>Writer</code> for <code>mut &amp;[u8]</code> also probably won&rsquo;t be
that common either. Sure, he&rsquo;s write and all, but but I got it working without
needing an index! That means that the <code>&amp;mut [u8]</code> <code>Writer</code> only needs 2
pointers instead of <code>BufWriter</code>&rsquo;s three, so it just has to be faster! Well,
doesn&rsquo;t it?</p>

<p>Stupid benchmarks.</p>

<p>I got to say it&rsquo;s pretty addicting writing micro-benchmarks. It&rsquo;s a lot of fun
seeing how sensitive low-level code can be to just the smallest of tweaks. It&rsquo;s
also really annoying when you write something you think is pretty neat, then
you find it&rsquo;s chock-full of false dependencies between cache lines, or other
mean things CPUs like to impose on poor programmers.</p>

<p>Anyway, to start lets look at what should be the fastest way to write to a
buffer. Completely unsafely with no checks.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">unsafe</span> <span class="k">fn</span> <span class="n">do_copy_nonoverlapping_memory</span><span class="p">(</span>
</span><span class='line'>  <span class="k">mut</span> <span class="n">dst</span><span class="o">:</span> <span class="o">*</span><span class="k">mut</span> <span class="kt">u8</span><span class="p">,</span>
</span><span class='line'>  <span class="n">src</span><span class="o">:</span> <span class="o">*</span><span class="kr">const</span> <span class="kt">u8</span><span class="p">,</span>
</span><span class='line'>  <span class="n">len</span><span class="o">:</span> <span class="kt">uint</span><span class="p">,</span>
</span><span class='line'>  <span class="n">batches</span><span class="o">:</span> <span class="kt">uint</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">_</span> <span class="k">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">batches</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">ptr</span><span class="o">::</span><span class="n">copy_nonoverlapping_memory</span><span class="p">(</span><span class="n">dst</span><span class="p">,</span> <span class="n">src</span><span class="p">,</span> <span class="n">len</span><span class="p">);</span>
</span><span class='line'>        <span class="n">dst</span> <span class="o">=</span> <span class="n">dst</span><span class="p">.</span><span class="n">offset</span><span class="p">(</span><span class="n">len</span> <span class="k">as</span> <span class="kt">int</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#[test]</span>
</span><span class='line'><span class="k">fn</span> <span class="n">test_copy_nonoverlapping_memory</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">dst</span> <span class="o">=</span> <span class="o">&amp;</span><span class="k">mut</span> <span class="p">[</span><span class="mi">0_</span><span class="k">u8</span><span class="p">,</span> <span class="p">..</span> <span class="n">BATCHES</span> <span class="o">*</span> <span class="n">SRC_LEN</span><span class="p">];</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">src</span> <span class="o">=</span> <span class="o">&amp;</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="p">..</span> <span class="n">SRC_LEN</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">unsafe</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">do_copy_nonoverlapping_memory</span><span class="p">(</span>
</span><span class='line'>            <span class="n">dst</span><span class="p">.</span><span class="n">as_mut_ptr</span><span class="p">(),</span>
</span><span class='line'>            <span class="n">src</span><span class="p">.</span><span class="n">as_ptr</span><span class="p">(),</span>
</span><span class='line'>            <span class="n">src</span><span class="p">.</span><span class="n">len</span><span class="p">(),</span>
</span><span class='line'>            <span class="n">BATCHES</span>
</span><span class='line'>        <span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">assert</span><span class="o">!</span><span class="p">(</span><span class="n">dst</span><span class="p">.</span><span class="n">iter</span><span class="p">().</span><span class="n">all</span><span class="p">(</span><span class="o">|</span><span class="n">c</span><span class="o">|</span> <span class="o">*</span><span class="n">c</span> <span class="o">==</span> <span class="mi">1</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>With <code>SRC_LEN=4</code> and <code>BATCHES=128</code>, we get this. For fun I added the new
<code>libtest</code> from <a href="https://github.com/rust-lang/rust/pull/19233">#19233</a> that will
hopefully land soon. I also added also ran variations that explicitly inlined
and not inlined the inner function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="n">test</span> <span class="n">bench_copy_nonoverlapping_memory</span>               <span class="p">...</span> <span class="n">bench</span><span class="o">:</span> <span class="mi">50</span> <span class="o">|</span>   <span class="p">[</span><span class="o">-***</span><span class="err">#</span><span class="o">**------</span><span class="p">]</span>                        <span class="o">|</span> <span class="mi">200</span><span class="o">:</span>        <span class="mi">72</span> <span class="n">ns</span><span class="o">/</span><span class="n">iter</span> <span class="p">(</span><span class="o">+/-</span> <span class="mi">45</span><span class="p">)</span>
</span><span class='line'><span class="n">test</span> <span class="n">bench_copy_nonoverlapping_memory_inline_always</span> <span class="p">...</span> <span class="n">bench</span><span class="o">:</span> <span class="mi">50</span> <span class="o">|</span>       <span class="p">[</span><span class="o">---***</span><span class="err">#</span><span class="o">****************----------</span><span class="p">]</span><span class="o">|</span> <span class="mi">100</span><span class="o">:</span>        <span class="mi">65</span> <span class="n">ns</span><span class="o">/</span><span class="n">iter</span> <span class="p">(</span><span class="o">+/-</span> <span class="mi">39</span><span class="p">)</span>
</span><span class='line'><span class="n">test</span> <span class="n">bench_copy_nonoverlapping_memory_inline_never</span>  <span class="p">...</span> <span class="n">bench</span><span class="o">:</span> <span class="mi">500</span> <span class="o">|</span>      <span class="p">[</span><span class="o">------********</span><span class="err">#</span><span class="o">*********-------</span><span class="p">]</span> <span class="o">|</span> <span class="mi">1000</span><span class="o">:</span>       <span class="mi">747</span> <span class="n">ns</span><span class="o">/</span><span class="n">iter</span> <span class="p">(</span><span class="o">+/-</span> <span class="mi">393</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>So overall it does quite well. Now lets compare with the code I wrote:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">impl</span><span class="o">&lt;</span><span class="nl">&#39;a</span><span class="o">&gt;</span> <span class="nb">Writer</span> <span class="k">for</span> <span class="o">&amp;</span><span class="n">&#39;a</span> <span class="k">mut</span> <span class="p">[</span><span class="kt">u8</span><span class="p">]</span> <span class="p">{</span>
</span><span class='line'>    <span class="cp">#[inline]</span>
</span><span class='line'>    <span class="k">fn</span> <span class="n">write</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span> <span class="bp">self</span><span class="p">,</span> <span class="n">src</span><span class="o">:</span> <span class="o">&amp;</span><span class="p">[</span><span class="kt">u8</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">IoResult</span><span class="o">&lt;</span><span class="p">()</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">is_empty</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="nb">Err</span><span class="p">(</span><span class="n">io</span><span class="o">::</span><span class="n">standard_error</span><span class="p">(</span><span class="n">io</span><span class="o">::</span><span class="n">EndOfFile</span><span class="p">));</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">let</span> <span class="n">dst_len</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">len</span><span class="p">();</span>
</span><span class='line'>        <span class="kd">let</span> <span class="n">src_len</span> <span class="o">=</span> <span class="n">src</span><span class="p">.</span><span class="n">len</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">let</span> <span class="n">write_len</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">dst_len</span><span class="p">,</span> <span class="n">src_len</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">slice</span><span class="o">::</span><span class="n">bytes</span><span class="o">::</span><span class="n">copy_memory</span><span class="p">(</span><span class="o">*</span><span class="bp">self</span><span class="p">,</span> <span class="n">src</span><span class="p">.</span><span class="n">slice_to</span><span class="p">(</span><span class="n">write_len</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">unsafe</span> <span class="p">{</span>
</span><span class='line'>            <span class="o">*</span><span class="bp">self</span> <span class="o">=</span> <span class="n">mem</span><span class="o">::</span><span class="n">transmute</span><span class="p">(</span><span class="n">raw</span><span class="o">::</span><span class="n">Slice</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">data</span><span class="o">:</span> <span class="bp">self</span><span class="p">.</span><span class="n">as_ptr</span><span class="p">().</span><span class="n">offset</span><span class="p">(</span><span class="n">write_len</span> <span class="k">as</span> <span class="kt">int</span><span class="p">),</span>
</span><span class='line'>                <span class="n">len</span><span class="o">:</span> <span class="n">dst_len</span> <span class="o">-</span> <span class="n">write_len</span><span class="p">,</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="n">src_len</span> <span class="o">&gt;</span> <span class="n">dst_len</span> <span class="p">{</span>
</span><span class='line'>            <span class="nb">Err</span><span class="p">(</span><span class="n">io</span><span class="o">::</span><span class="n">standard_error</span><span class="p">(</span><span class="n">io</span><span class="o">::</span><span class="n">ShortWrite</span><span class="p">(</span><span class="n">write_len</span><span class="p">)))</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="nb">Ok</span><span class="p">(())</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And. Well. It didn&rsquo;t do that well.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="n">test</span> <span class="n">writer</span><span class="o">::</span><span class="n">bench_slice_writer</span>                             <span class="p">...</span> <span class="n">bench</span><span class="o">:</span> <span class="mi">500</span> <span class="o">|</span>   <span class="p">[</span><span class="o">------**</span><span class="err">#</span><span class="o">**--</span><span class="p">]</span>                      <span class="o">|</span> <span class="mi">2000</span><span class="o">:</span>       <span class="mi">920</span> <span class="n">ns</span><span class="o">/</span><span class="n">iter</span> <span class="p">(</span><span class="o">+/-</span> <span class="mi">448</span><span class="p">)</span>
</span><span class='line'><span class="n">test</span> <span class="n">writer</span><span class="o">::</span><span class="n">bench_slice_writer_inline_always</span>               <span class="p">...</span> <span class="n">bench</span><span class="o">:</span> <span class="mi">600</span> <span class="o">|</span> <span class="p">[</span><span class="o">-**</span><span class="err">#</span><span class="o">*****---</span><span class="p">]</span>                         <span class="o">|</span> <span class="mi">2000</span><span class="o">:</span>       <span class="mi">711</span> <span class="n">ns</span><span class="o">/</span><span class="n">iter</span> <span class="p">(</span><span class="o">+/-</span> <span class="mi">405</span><span class="p">)</span>
</span><span class='line'><span class="n">test</span> <span class="n">writer</span><span class="o">::</span><span class="n">bench_slice_writer_inline_never</span>                <span class="p">...</span> <span class="n">bench</span><span class="o">:</span> <span class="mi">600</span> <span class="o">|</span>   <span class="p">[</span><span class="o">-***</span><span class="err">#</span><span class="o">******---</span><span class="p">]</span>                     <span class="o">|</span> <span class="mi">2000</span><span class="o">:</span>       <span class="mi">838</span> <span class="n">ns</span><span class="o">/</span><span class="n">iter</span> <span class="p">(</span><span class="o">+/-</span> <span class="mi">474</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Wow. That&rsquo;s pretty bad compared to the ideal.</p>

<p>Crud. So not only did I add an implementation that&rsquo;s probably going to not work
with <code>write!</code> and now it turns out the performance is pretty terrible. Inlining
isn&rsquo;t helping like it did in the unsafe case. So how&rsquo;s
<a href="https://github.com/rust-lang/rust/blob/master/src/libstd/io/mem.rs#L219">std::io::BufWriter</a>
compare?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">pub</span> <span class="k">struct</span> <span class="n">BufWriter</span><span class="o">&lt;</span><span class="nl">&#39;a</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">buf</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">&#39;a</span> <span class="k">mut</span> <span class="p">[</span><span class="kt">u8</span><span class="p">],</span>
</span><span class='line'>    <span class="n">pos</span><span class="o">:</span> <span class="kt">uint</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">impl</span><span class="o">&lt;</span><span class="nl">&#39;a</span><span class="o">&gt;</span> <span class="nb">Writer</span> <span class="k">for</span> <span class="n">BufWriter</span><span class="o">&lt;</span><span class="nl">&#39;a</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="cp">#[inline]</span>
</span><span class='line'>    <span class="k">fn</span> <span class="n">write</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span> <span class="bp">self</span><span class="p">,</span> <span class="n">buf</span><span class="o">:</span> <span class="o">&amp;</span><span class="p">[</span><span class="kt">u8</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">IoResult</span><span class="o">&lt;</span><span class="p">()</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// return an error if the entire write does not fit in the buffer</span>
</span><span class='line'>        <span class="kd">let</span> <span class="n">cap</span> <span class="o">=</span> <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">pos</span> <span class="o">&gt;=</span> <span class="bp">self</span><span class="p">.</span><span class="n">buf</span><span class="p">.</span><span class="n">len</span><span class="p">()</span> <span class="p">{</span> <span class="mi">0</span> <span class="p">}</span> <span class="k">else</span> <span class="p">{</span> <span class="bp">self</span><span class="p">.</span><span class="n">buf</span><span class="p">.</span><span class="n">len</span><span class="p">()</span> <span class="o">-</span> <span class="bp">self</span><span class="p">.</span><span class="n">pos</span> <span class="p">};</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">buf</span><span class="p">.</span><span class="n">len</span><span class="p">()</span> <span class="o">&gt;</span> <span class="n">cap</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">Err</span><span class="p">(</span><span class="n">IoError</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">kind</span><span class="o">:</span> <span class="n">io</span><span class="o">::</span><span class="n">OtherIoError</span><span class="p">,</span>
</span><span class='line'>                <span class="n">desc</span><span class="o">:</span> <span class="s">&quot;Trying to write past end of buffer&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="n">detail</span><span class="o">:</span> <span class="nb">None</span>
</span><span class='line'>            <span class="p">})</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">slice</span><span class="o">::</span><span class="n">bytes</span><span class="o">::</span><span class="n">copy_memory</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">buf</span><span class="p">[</span><span class="k">mut</span> <span class="bp">self</span><span class="p">.</span><span class="n">pos</span><span class="p">..],</span> <span class="n">buf</span><span class="p">);</span>
</span><span class='line'>        <span class="bp">self</span><span class="p">.</span><span class="n">pos</span> <span class="o">+=</span> <span class="n">buf</span><span class="p">.</span><span class="n">len</span><span class="p">();</span>
</span><span class='line'>        <span class="nb">Ok</span><span class="p">(())</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s how it does:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="n">test</span> <span class="n">writer</span><span class="o">::</span><span class="n">bench_std_buf_writer</span>                           <span class="p">...</span> <span class="n">bench</span><span class="o">:</span> <span class="mi">50</span> <span class="o">|</span>     <span class="p">[</span><span class="o">------**************</span><span class="err">#</span><span class="o">******-------</span><span class="p">]</span> <span class="o">|</span> <span class="mi">100</span><span class="o">:</span>        <span class="mi">79</span> <span class="n">ns</span><span class="o">/</span><span class="n">iter</span> <span class="p">(</span><span class="o">+/-</span> <span class="mi">40</span><span class="p">)</span>
</span><span class='line'><span class="n">test</span> <span class="n">writer</span><span class="o">::</span><span class="n">bench_std_buf_writer_inline_always</span>             <span class="p">...</span> <span class="n">bench</span><span class="o">:</span> <span class="mi">50</span> <span class="o">|</span>    <span class="p">[</span><span class="o">-----************</span><span class="err">#</span><span class="o">*********-------</span><span class="p">]</span>  <span class="o">|</span> <span class="mi">100</span><span class="o">:</span>        <span class="mi">75</span> <span class="n">ns</span><span class="o">/</span><span class="n">iter</span> <span class="p">(</span><span class="o">+/-</span> <span class="mi">40</span><span class="p">)</span>
</span><span class='line'><span class="n">test</span> <span class="n">writer</span><span class="o">::</span><span class="n">bench_std_buf_writer_inline_never</span>              <span class="p">...</span> <span class="n">bench</span><span class="o">:</span> <span class="mi">600</span> <span class="o">|</span>   <span class="p">[</span><span class="err">#</span><span class="o">****-----</span><span class="p">]</span>                         <span class="o">|</span> <span class="mi">2000</span><span class="o">:</span>       <span class="mi">705</span> <span class="n">ns</span><span class="o">/</span><span class="n">iter</span> <span class="p">(</span><span class="o">+/-</span> <span class="mi">337</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s just cruel. The optimization gods obviously hate me. So I started
playing with a lot of
<a href="https://github.com/erickt/rust-serialization-benchmarks/blob/master/rust/src/writer.rs">variations</a>
(it&rsquo;s my yeah yeah it&rsquo;s my serialization benchmark suite, I&rsquo;m planning on
making it more general purpose. Besides it&rsquo;s my suite and I can do whatever I
want with it, so there):</p>

<ul>
<li>(BufWriter0): Turning this <code>Writer</code> into a struct wrapper shouldn&rsquo;t do anything, and it
didn&rsquo;t.</li>
<li>(BufWriter1): There&rsquo;s error handling, does removing it help? Nope!</li>
<li>(BufWriter5): There&rsquo;s an implied branch in <code>let write_len = min(dst_len, src_len)</code>. We can
turn that into the branch-predictor-friendly:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kd">let</span> <span class="n">x</span> <span class="o">=</span> <span class="p">(</span><span class="n">dst_len</span> <span class="o">&lt;</span> <span class="n">buf_len</span><span class="p">)</span> <span class="k">as</span> <span class="kt">uint</span><span class="p">;</span>
</span><span class='line'><span class="kd">let</span> <span class="n">write_len</span> <span class="o">=</span> <span class="n">dst_len</span> <span class="o">*</span> <span class="n">x</span> <span class="o">+</span> <span class="n">src_len</span> <span class="o">*</span> <span class="p">(</span><span class="mi">1</span> <span class="o">-</span> <span class="n">x</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Doesn&rsquo;t matter, still performs the same.</p>

<ul>
<li>(BufWriter2): Fine then, optimization gods! Lets remove the branch altogether and just
  always advance the slice <code>src.len()</code> bytes! Damn the safety! That, of course,
works. I can hear them giggle.</li>
<li>(BufWriter3): Maybe, just maybe there&rsquo;s something weird going on with
  inlining across crates? Lets copy <code>std::io::BufWriter</code> and make sure that
  it&rsquo;s still nearly optimal. It still is.</li>
<li>(BufWriter6): Technically the <code>min(dst_len, src_len)</code> is a bounds check, so
we could switch from the bounds checked <code>std.slice::bytes::copy_memory</code> to
  the unsafe <code>std::ptr::copy_nonoverlapping_memory</code>, but that also doesn&rsquo;t
  help.</li>
<li>(BufWriter7): Might as well and apply the last trick to <code>std::io::BufWriter</code>,
  and it does shave a couple nanoseconds off. It might be worth pushing it
  upstream:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="n">test</span> <span class="n">writer</span><span class="o">::</span><span class="n">bench_buf_writer_7</span>                             <span class="p">...</span> <span class="n">bench</span><span class="o">:</span> <span class="mi">50</span> <span class="o">|</span>   <span class="p">[</span><span class="o">-*</span><span class="err">#</span><span class="o">********--------------------------</span><span class="p">]</span><span class="o">|</span> <span class="mi">100</span><span class="o">:</span>        <span class="mi">55</span> <span class="n">ns</span><span class="o">/</span><span class="n">iter</span> <span class="p">(</span><span class="o">+/-</span> <span class="mi">44</span><span class="p">)</span>
</span><span class='line'><span class="n">test</span> <span class="n">writer</span><span class="o">::</span><span class="n">bench_buf_writer_7_inline_always</span>               <span class="p">...</span> <span class="n">bench</span><span class="o">:</span> <span class="mi">50</span> <span class="o">|</span>     <span class="p">[</span><span class="o">---------********</span><span class="err">#</span><span class="o">*********-------</span><span class="p">]</span> <span class="o">|</span> <span class="mi">100</span><span class="o">:</span>        <span class="mi">76</span> <span class="n">ns</span><span class="o">/</span><span class="n">iter</span> <span class="p">(</span><span class="o">+/-</span> <span class="mi">39</span><span class="p">)</span>
</span><span class='line'><span class="n">test</span> <span class="n">writer</span><span class="o">::</span><span class="n">bench_buf_writer_7_inline_never</span>                <span class="p">...</span> <span class="n">bench</span><span class="o">:</span> <span class="mi">600</span> <span class="o">|</span>   <span class="p">[</span><span class="o">-***</span><span class="err">#</span><span class="o">****----</span><span class="p">]</span>                      <span class="o">|</span> <span class="mi">2000</span><span class="o">:</span>       <span class="mi">828</span> <span class="n">ns</span><span class="o">/</span><span class="n">iter</span> <span class="p">(</span><span class="o">+/-</span> <span class="mi">417</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>(BufWriter4): While I&rsquo;m using one less <code>uint</code> than <code>std::io::BufWriter</code>, I&rsquo;m
  doing two writes to advance my slice, one to advance the pointer, and one to
  shrink the length. <code>std::io::BufWriter</code> only has to advance it&rsquo;s <code>pos</code> index.
  But in this case if instead of treating the slice as a <code>(ptr, length)</code>, we
  can convert it into a <code>(start_ptr, end_ptr)</code>, where <code>start_ptr=ptr</code>, and
  <code>end_ptr=ptr+length</code>. This works! Ish:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="n">test</span> <span class="n">writer</span><span class="o">::</span><span class="n">bench_buf_writer_4</span>                             <span class="p">...</span> <span class="n">bench</span><span class="o">:</span> <span class="mi">80</span> <span class="o">|</span>   <span class="p">[</span><span class="o">--******</span><span class="err">#</span><span class="o">*******-----</span><span class="p">]</span>                <span class="o">|</span> <span class="mi">200</span><span class="o">:</span>       <span class="mi">109</span> <span class="n">ns</span><span class="o">/</span><span class="n">iter</span> <span class="p">(</span><span class="o">+/-</span> <span class="mi">59</span><span class="p">)</span>
</span><span class='line'><span class="n">test</span> <span class="n">writer</span><span class="o">::</span><span class="n">bench_buf_writer_4_inline_always</span>               <span class="p">...</span> <span class="n">bench</span><span class="o">:</span> <span class="mi">100</span> <span class="o">|</span>     <span class="p">[</span><span class="o">------***</span><span class="err">#</span><span class="o">******---</span><span class="p">]</span>               <span class="o">|</span> <span class="mi">200</span><span class="o">:</span>       <span class="mi">133</span> <span class="n">ns</span><span class="o">/</span><span class="n">iter</span> <span class="p">(</span><span class="o">+/-</span> <span class="mi">44</span><span class="p">)</span>
</span><span class='line'><span class="n">test</span> <span class="n">writer</span><span class="o">::</span><span class="n">bench_buf_writer_4_inline_never</span>                <span class="p">...</span> <span class="n">bench</span><span class="o">:</span> <span class="mi">500</span> <span class="o">|</span>      <span class="p">[</span><span class="o">-----***********</span><span class="err">#</span><span class="o">***********----</span><span class="p">]</span><span class="o">|</span> <span class="mi">1000</span><span class="o">:</span>       <span class="mi">778</span> <span class="n">ns</span><span class="o">/</span><span class="n">iter</span> <span class="p">(</span><span class="o">+/-</span> <span class="mi">426</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>I know when I&rsquo;m defeated. Oh well. I guess I can at least update
<code>std::io::BufWriter</code> to support the new error handling approach:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">impl</span><span class="o">&lt;</span><span class="nl">&#39;a</span><span class="o">&gt;</span> <span class="n">MyWriter</span> <span class="k">for</span> <span class="n">BufWriter10</span><span class="o">&lt;</span><span class="nl">&#39;a</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="cp">#[inline]</span>
</span><span class='line'>    <span class="k">fn</span> <span class="n">my_write</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span> <span class="bp">self</span><span class="p">,</span> <span class="n">src</span><span class="o">:</span> <span class="o">&amp;</span><span class="p">[</span><span class="kt">u8</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">IoResult</span><span class="o">&lt;</span><span class="p">()</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">let</span> <span class="n">dst_len</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">dst</span><span class="p">.</span><span class="n">len</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">pos</span> <span class="o">==</span> <span class="n">dst_len</span> <span class="p">{</span> <span class="k">return</span> <span class="nb">Err</span><span class="p">(</span><span class="n">io</span><span class="o">::</span><span class="n">standard_error</span><span class="p">(</span><span class="n">io</span><span class="o">::</span><span class="n">EndOfFile</span><span class="p">));</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">let</span> <span class="n">src_len</span> <span class="o">=</span> <span class="n">src</span><span class="p">.</span><span class="n">len</span><span class="p">();</span>
</span><span class='line'>        <span class="kd">let</span> <span class="n">cap</span> <span class="o">=</span> <span class="n">dst_len</span> <span class="o">-</span> <span class="bp">self</span><span class="p">.</span><span class="n">pos</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">let</span> <span class="n">write_len</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">cap</span><span class="p">,</span> <span class="n">src_len</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">slice</span><span class="o">::</span><span class="n">bytes</span><span class="o">::</span><span class="n">copy_memory</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">dst</span><span class="p">[</span><span class="k">mut</span> <span class="bp">self</span><span class="p">.</span><span class="n">pos</span><span class="p">..],</span> <span class="n">src</span><span class="p">[..</span><span class="n">write_len</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="n">src_len</span> <span class="o">&gt;</span> <span class="n">dst_len</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">Err</span><span class="p">(</span><span class="n">io</span><span class="o">::</span><span class="n">standard_error</span><span class="p">(</span><span class="n">io</span><span class="o">::</span><span class="n">ShortWrite</span><span class="p">(</span><span class="n">write_len</span><span class="p">)));</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="bp">self</span><span class="p">.</span><span class="n">pos</span> <span class="o">+=</span> <span class="n">write_len</span><span class="p">;</span>
</span><span class='line'>        <span class="nb">Ok</span><span class="p">(())</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>How&rsquo;s it do?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="n">test</span> <span class="n">writer</span><span class="o">::</span><span class="n">bench_buf_writer_10</span>                            <span class="p">...</span> <span class="n">bench</span><span class="o">:</span> <span class="mi">600</span> <span class="o">|</span> <span class="p">[</span><span class="o">----**</span><span class="err">#</span><span class="o">***--</span><span class="p">]</span>                         <span class="o">|</span> <span class="mi">2000</span><span class="o">:</span>       <span class="mi">841</span> <span class="n">ns</span><span class="o">/</span><span class="n">iter</span> <span class="p">(</span><span class="o">+/-</span> <span class="mi">413</span><span class="p">)</span>
</span><span class='line'><span class="n">test</span> <span class="n">writer</span><span class="o">::</span><span class="n">bench_buf_writer_10_inline_always</span>              <span class="p">...</span> <span class="n">bench</span><span class="o">:</span> <span class="mi">600</span> <span class="o">|</span>  <span class="p">[</span><span class="o">----**</span><span class="err">#</span><span class="o">***--</span><span class="p">]</span>                        <span class="o">|</span> <span class="mi">2000</span><span class="o">:</span>       <span class="mi">872</span> <span class="n">ns</span><span class="o">/</span><span class="n">iter</span> <span class="p">(</span><span class="o">+/-</span> <span class="mi">387</span><span class="p">)</span>
</span><span class='line'><span class="n">test</span> <span class="n">writer</span><span class="o">::</span><span class="n">bench_buf_writer_10_inline_never</span>               <span class="p">...</span> <span class="n">bench</span><span class="o">:</span> <span class="mi">600</span> <span class="o">|</span>   <span class="p">[</span><span class="o">--******</span><span class="err">#</span><span class="o">**---</span><span class="p">]</span>                     <span class="o">|</span> <span class="mi">2000</span><span class="o">:</span>       <span class="mi">960</span> <span class="n">ns</span><span class="o">/</span><span class="n">iter</span> <span class="p">(</span><span class="o">+/-</span> <span class="mi">486</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Grumble grumble. It turns out that if we tweak the <code>copy_memory</code> line to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'>    <span class="n">slice</span><span class="o">::</span><span class="n">bytes</span><span class="o">::</span><span class="n">copy_memory</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">dst</span><span class="p">[</span><span class="k">mut</span> <span class="bp">self</span><span class="p">.</span><span class="n">pos</span><span class="p">..],</span> <span class="n">src</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>It shaves 674 nanoseconds off the run:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="n">test</span> <span class="n">writer</span><span class="o">::</span><span class="n">bench_buf_writer_10</span>                            <span class="p">...</span> <span class="n">bench</span><span class="o">:</span> <span class="mi">200</span> <span class="o">|</span><span class="p">[</span><span class="o">---***</span><span class="err">#</span><span class="o">************------------</span><span class="p">]</span>        <span class="o">|</span> <span class="mi">400</span><span class="o">:</span>       <span class="mi">230</span> <span class="n">ns</span><span class="o">/</span><span class="n">iter</span> <span class="p">(</span><span class="o">+/-</span> <span class="mi">147</span><span class="p">)</span>
</span><span class='line'><span class="n">test</span> <span class="n">writer</span><span class="o">::</span><span class="n">bench_buf_writer_10_inline_always</span>              <span class="p">...</span> <span class="n">bench</span><span class="o">:</span> <span class="mi">200</span> <span class="o">|</span>   <span class="p">[</span><span class="o">-----********</span><span class="err">#</span><span class="o">*******------</span><span class="p">]</span>         <span class="o">|</span> <span class="mi">400</span><span class="o">:</span>       <span class="mi">280</span> <span class="n">ns</span><span class="o">/</span><span class="n">iter</span> <span class="p">(</span><span class="o">+/-</span> <span class="mi">128</span><span class="p">)</span>
</span><span class='line'><span class="n">test</span> <span class="n">writer</span><span class="o">::</span><span class="n">bench_buf_writer_10_inline_never</span>               <span class="p">...</span> <span class="n">bench</span><span class="o">:</span> <span class="mi">600</span> <span class="o">|</span>   <span class="p">[</span><span class="o">--***</span><span class="err">#</span><span class="o">****----</span><span class="p">]</span>                     <span class="o">|</span> <span class="mi">2000</span><span class="o">:</span>       <span class="mi">885</span> <span class="n">ns</span><span class="o">/</span><span class="n">iter</span> <span class="p">(</span><span class="o">+/-</span> <span class="mi">475</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>But still no where near where we need to be. That suggests though that always
cutting down the <code>src</code>, which triggers another bounds check has some measurable
impact. So maybe I should only shrink the <code>src</code> slice when we know it needs to
be shrunk?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">impl</span><span class="o">&lt;</span><span class="nl">&#39;a</span><span class="o">&gt;</span> <span class="n">MyWriter</span> <span class="k">for</span> <span class="n">BufWriter11</span><span class="o">&lt;</span><span class="nl">&#39;a</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="cp">#[inline]</span>
</span><span class='line'>    <span class="k">fn</span> <span class="n">my_write</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span> <span class="bp">self</span><span class="p">,</span> <span class="n">src</span><span class="o">:</span> <span class="o">&amp;</span><span class="p">[</span><span class="kt">u8</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">IoResult</span><span class="o">&lt;</span><span class="p">()</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">let</span> <span class="n">dst</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">dst</span><span class="p">[</span><span class="k">mut</span> <span class="bp">self</span><span class="p">.</span><span class="n">pos</span><span class="p">..];</span>
</span><span class='line'>        <span class="kd">let</span> <span class="n">dst_len</span> <span class="o">=</span> <span class="n">dst</span><span class="p">.</span><span class="n">len</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="n">dst_len</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">Err</span><span class="p">(</span><span class="n">io</span><span class="o">::</span><span class="n">standard_error</span><span class="p">(</span><span class="n">io</span><span class="o">::</span><span class="n">EndOfFile</span><span class="p">));</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">let</span> <span class="n">src_len</span> <span class="o">=</span> <span class="n">src</span><span class="p">.</span><span class="n">len</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="n">dst_len</span> <span class="o">&gt;=</span> <span class="n">src_len</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">unsafe</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">ptr</span><span class="o">::</span><span class="n">copy_nonoverlapping_memory</span><span class="p">(</span>
</span><span class='line'>                    <span class="n">dst</span><span class="p">.</span><span class="n">as_mut_ptr</span><span class="p">(),</span>
</span><span class='line'>                    <span class="n">src</span><span class="p">.</span><span class="n">as_ptr</span><span class="p">(),</span>
</span><span class='line'>                    <span class="n">src_len</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>              <span class="bp">self</span><span class="p">.</span><span class="n">pos</span> <span class="o">+=</span> <span class="n">src_len</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="nb">Ok</span><span class="p">(())</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">unsafe</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">ptr</span><span class="o">::</span><span class="n">copy_nonoverlapping_memory</span><span class="p">(</span>
</span><span class='line'>                    <span class="n">dst</span><span class="p">.</span><span class="n">as_mut_ptr</span><span class="p">(),</span>
</span><span class='line'>                    <span class="n">src</span><span class="p">.</span><span class="n">as_ptr</span><span class="p">(),</span>
</span><span class='line'>                    <span class="n">dst_len</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>              <span class="bp">self</span><span class="p">.</span><span class="n">pos</span> <span class="o">+=</span> <span class="n">dst_len</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="nb">Err</span><span class="p">(</span><span class="n">io</span><span class="o">::</span><span class="n">standard_error</span><span class="p">(</span><span class="n">io</span><span class="o">::</span><span class="n">ShortWrite</span><span class="p">(</span><span class="n">dst_len</span><span class="p">)))</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Lets see how it failed this time&hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="n">test</span> <span class="n">writer</span><span class="o">::</span><span class="n">bench_buf_writer_11</span>                            <span class="p">...</span> <span class="n">bench</span><span class="o">:</span> <span class="mi">60</span> <span class="o">|</span>      <span class="p">[</span><span class="o">------********</span><span class="err">#</span><span class="o">*********-----</span><span class="p">]</span>     <span class="o">|</span> <span class="mi">100</span><span class="o">:</span>        <span class="mi">79</span> <span class="n">ns</span><span class="o">/</span><span class="n">iter</span> <span class="p">(</span><span class="o">+/-</span> <span class="mi">28</span><span class="p">)</span>
</span><span class='line'><span class="n">test</span> <span class="n">writer</span><span class="o">::</span><span class="n">bench_buf_writer_11_inline_always</span>              <span class="p">...</span> <span class="n">bench</span><span class="o">:</span> <span class="mi">60</span> <span class="o">|</span><span class="p">[</span><span class="o">-------******</span><span class="err">#</span><span class="o">*************-----------</span><span class="p">]</span>  <span class="o">|</span> <span class="mi">100</span><span class="o">:</span>        <span class="mi">72</span> <span class="n">ns</span><span class="o">/</span><span class="n">iter</span> <span class="p">(</span><span class="o">+/-</span> <span class="mi">35</span><span class="p">)</span>
</span><span class='line'><span class="n">test</span> <span class="n">writer</span><span class="o">::</span><span class="n">bench_buf_writer_11_inline_never</span>               <span class="p">...</span> <span class="n">bench</span><span class="o">:</span> <span class="mi">600</span> <span class="o">|</span>  <span class="p">[</span><span class="o">--***</span><span class="err">#</span><span class="o">***----</span><span class="p">]</span>                       <span class="o">|</span> <span class="mi">2000</span><span class="o">:</span>       <span class="mi">835</span> <span class="n">ns</span><span class="o">/</span><span class="n">iter</span> <span class="p">(</span><span class="o">+/-</span> <span class="mi">423</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>No way. That actually worked?! That&rsquo;s awesome! I&rsquo;ll carve that out into another
PR. Maybe it&rsquo;ll work for my original version that doesn&rsquo;t use a <code>pos</code>?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">impl</span><span class="o">&lt;</span><span class="nl">&#39;a</span><span class="o">&gt;</span> <span class="n">MyWriter</span> <span class="k">for</span> <span class="n">BufWriter12</span><span class="o">&lt;</span><span class="nl">&#39;a</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="cp">#[inline]</span>
</span><span class='line'>    <span class="k">fn</span> <span class="n">my_write</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span> <span class="bp">self</span><span class="p">,</span> <span class="n">src</span><span class="o">:</span> <span class="o">&amp;</span><span class="p">[</span><span class="kt">u8</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">IoResult</span><span class="o">&lt;</span><span class="p">()</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">let</span> <span class="n">dst_len</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">dst</span><span class="p">.</span><span class="n">len</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="n">dst_len</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">Err</span><span class="p">(</span><span class="n">io</span><span class="o">::</span><span class="n">standard_error</span><span class="p">(</span><span class="n">io</span><span class="o">::</span><span class="n">EndOfFile</span><span class="p">));</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">let</span> <span class="n">src_len</span> <span class="o">=</span> <span class="n">src</span><span class="p">.</span><span class="n">len</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="n">dst_len</span> <span class="o">&gt;=</span> <span class="n">src_len</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">unsafe</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">ptr</span><span class="o">::</span><span class="n">copy_nonoverlapping_memory</span><span class="p">(</span>
</span><span class='line'>                    <span class="bp">self</span><span class="p">.</span><span class="n">dst</span><span class="p">.</span><span class="n">as_mut_ptr</span><span class="p">(),</span>
</span><span class='line'>                    <span class="n">src</span><span class="p">.</span><span class="n">as_ptr</span><span class="p">(),</span>
</span><span class='line'>                    <span class="n">src_len</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>                <span class="bp">self</span><span class="p">.</span><span class="n">dst</span> <span class="o">=</span> <span class="n">mem</span><span class="o">::</span><span class="n">transmute</span><span class="p">(</span><span class="n">raw</span><span class="o">::</span><span class="n">Slice</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">data</span><span class="o">:</span> <span class="bp">self</span><span class="p">.</span><span class="n">dst</span><span class="p">.</span><span class="n">as_ptr</span><span class="p">().</span><span class="n">offset</span><span class="p">(</span><span class="n">src_len</span> <span class="k">as</span> <span class="kt">int</span><span class="p">),</span>
</span><span class='line'>                    <span class="n">len</span><span class="o">:</span> <span class="n">dst_len</span> <span class="o">-</span> <span class="n">src_len</span><span class="p">,</span>
</span><span class='line'>                <span class="p">});</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="nb">Ok</span><span class="p">(())</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">unsafe</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">ptr</span><span class="o">::</span><span class="n">copy_nonoverlapping_memory</span><span class="p">(</span>
</span><span class='line'>                    <span class="bp">self</span><span class="p">.</span><span class="n">dst</span><span class="p">.</span><span class="n">as_mut_ptr</span><span class="p">(),</span>
</span><span class='line'>                    <span class="n">src</span><span class="p">.</span><span class="n">as_ptr</span><span class="p">(),</span>
</span><span class='line'>                    <span class="n">dst_len</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>                <span class="bp">self</span><span class="p">.</span><span class="n">dst</span> <span class="o">=</span> <span class="n">mem</span><span class="o">::</span><span class="n">transmute</span><span class="p">(</span><span class="n">raw</span><span class="o">::</span><span class="n">Slice</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">data</span><span class="o">:</span> <span class="bp">self</span><span class="p">.</span><span class="n">dst</span><span class="p">.</span><span class="n">as_ptr</span><span class="p">().</span><span class="n">offset</span><span class="p">(</span><span class="n">dst_len</span> <span class="k">as</span> <span class="kt">int</span><span class="p">),</span>
</span><span class='line'>                    <span class="n">len</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>                <span class="p">});</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="nb">Err</span><span class="p">(</span><span class="n">io</span><span class="o">::</span><span class="n">standard_error</span><span class="p">(</span><span class="n">io</span><span class="o">::</span><span class="n">ShortWrite</span><span class="p">(</span><span class="n">dst_len</span><span class="p">)))</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And yep, just as fast!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="n">test</span> <span class="n">writer</span><span class="o">::</span><span class="n">bench_buf_writer_12</span>                            <span class="p">...</span> <span class="n">bench</span><span class="o">:</span> <span class="mi">50</span> <span class="o">|</span><span class="p">[</span><span class="o">**</span><span class="err">#</span><span class="o">*----------------------------------</span><span class="p">]</span>   <span class="o">|</span> <span class="mi">80</span><span class="o">:</span>        <span class="mi">51</span> <span class="n">ns</span><span class="o">/</span><span class="n">iter</span> <span class="p">(</span><span class="o">+/-</span> <span class="mi">26</span><span class="p">)</span>
</span><span class='line'><span class="n">test</span> <span class="n">writer</span><span class="o">::</span><span class="n">bench_buf_writer_12_inline_always</span>              <span class="p">...</span> <span class="n">bench</span><span class="o">:</span> <span class="mi">50</span> <span class="o">|</span>  <span class="p">[</span><span class="o">--------**********</span><span class="err">#</span><span class="o">********------------</span><span class="p">]</span><span class="o">|</span> <span class="mi">90</span><span class="o">:</span>        <span class="mi">69</span> <span class="n">ns</span><span class="o">/</span><span class="n">iter</span> <span class="p">(</span><span class="o">+/-</span> <span class="mi">36</span><span class="p">)</span>
</span><span class='line'><span class="n">test</span> <span class="n">writer</span><span class="o">::</span><span class="n">bench_buf_writer_12_inline_never</span>               <span class="p">...</span> <span class="n">bench</span><span class="o">:</span> <span class="mi">800</span> <span class="o">|</span>  <span class="p">[</span><span class="o">---**</span><span class="err">#</span><span class="o">***-</span><span class="p">]</span>                          <span class="o">|</span> <span class="mi">2000</span><span class="o">:</span>      <span class="mi">1000</span> <span class="n">ns</span><span class="o">/</span><span class="n">iter</span> <span class="p">(</span><span class="o">+/-</span> <span class="mi">263</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>At this point, both solutions are approximately just as fast as the unsafe
<code>ptr::copy_nonoverlapping_memory</code>! So that&rsquo;s awesome. Now would anyone really
care enough about the extra <code>uint</code>?  There may be a few very specialized cases
where that extra <code>uint</code> could cause a problem, but I&rsquo;m not sure if it&rsquo;s worth
it. What do you all think?</p>

<hr />

<p>I thought that was good, but since I&rsquo;m already here, how&rsquo;s the new <code>Vec&lt;u8&gt;</code>
writer doing? Here&rsquo;s the driver:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">impl</span> <span class="nb">Writer</span> <span class="k">for</span> <span class="n">Vec</span><span class="o">&lt;</span><span class="kt">u8</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="cp">#[inline]</span>
</span><span class='line'>    <span class="k">fn</span> <span class="n">write</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span> <span class="bp">self</span><span class="p">,</span> <span class="n">buf</span><span class="o">:</span> <span class="o">&amp;</span><span class="p">[</span><span class="kt">u8</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">IoResult</span><span class="o">&lt;</span><span class="p">()</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="bp">self</span><span class="p">.</span><span class="n">push_all</span><span class="p">(</span><span class="n">buf</span><span class="p">);</span>
</span><span class='line'>        <span class="nb">Ok</span><span class="p">(())</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">impl</span> <span class="nb">Writer</span> <span class="k">for</span> <span class="n">Vec</span><span class="o">&lt;</span><span class="kt">u8</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="cp">#[inline]</span>
</span><span class='line'>    <span class="k">fn</span> <span class="n">write</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span> <span class="bp">self</span><span class="p">,</span> <span class="n">buf</span><span class="o">:</span> <span class="o">&amp;</span><span class="p">[</span><span class="kt">u8</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">IoResult</span><span class="o">&lt;</span><span class="p">()</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="bp">self</span><span class="p">.</span><span class="n">push_all</span><span class="p">(</span><span class="n">buf</span><span class="p">);</span>
</span><span class='line'>        <span class="nb">Ok</span><span class="p">(())</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#[bench]</span>
</span><span class='line'><span class="k">fn</span> <span class="n">bench_std_vec_writer</span><span class="p">(</span><span class="n">b</span><span class="o">:</span> <span class="o">&amp;</span><span class="k">mut</span> <span class="n">test</span><span class="o">::</span><span class="n">Bencher</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="k">mut</span> <span class="n">dst</span> <span class="o">=</span> <span class="n">Vec</span><span class="o">::</span><span class="n">with_capacity</span><span class="p">(</span><span class="n">BATCHES</span> <span class="o">*</span> <span class="n">SRC_LEN</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">src</span> <span class="o">=</span> <span class="o">&amp;</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="p">..</span> <span class="n">SRC_LEN</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">b</span><span class="p">.</span><span class="n">iter</span><span class="p">(</span><span class="o">||</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">dst</span><span class="p">.</span><span class="n">clear</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">do_std_writes</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span> <span class="n">dst</span><span class="p">,</span> <span class="n">src</span><span class="p">,</span> <span class="n">BATCHES</span><span class="p">);</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the results:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="n">test</span> <span class="n">writer</span><span class="o">::</span><span class="n">bench_std_vec_writer</span>                           <span class="p">...</span> <span class="n">bench</span><span class="o">:</span> <span class="mi">1000</span> <span class="o">|</span> <span class="p">[</span><span class="o">----*****</span><span class="err">#</span><span class="o">*****--------</span><span class="p">]</span>             <span class="o">|</span> <span class="mi">2000</span><span class="o">:</span>      <span class="mi">1248</span> <span class="n">ns</span><span class="o">/</span><span class="n">iter</span> <span class="p">(</span><span class="o">+/-</span> <span class="mi">588</span><span class="p">)</span>
</span><span class='line'><span class="n">test</span> <span class="n">writer</span><span class="o">::</span><span class="n">bench_std_vec_writer_inline_always</span>             <span class="p">...</span> <span class="n">bench</span><span class="o">:</span> <span class="mi">900</span> <span class="o">|</span>   <span class="p">[</span><span class="o">----*</span><span class="err">#</span><span class="o">***--</span><span class="p">]</span>                        <span class="o">|</span> <span class="mi">2000</span><span class="o">:</span>      <span class="mi">1125</span> <span class="n">ns</span><span class="o">/</span><span class="n">iter</span> <span class="p">(</span><span class="o">+/-</span> <span class="mi">282</span><span class="p">)</span>
</span><span class='line'><span class="n">test</span> <span class="n">writer</span><span class="o">::</span><span class="n">bench_std_vec_writer_inline_never</span>              <span class="p">...</span> <span class="n">bench</span><span class="o">:</span> <span class="mi">1000</span> <span class="o">|</span>  <span class="p">[</span><span class="o">----***</span><span class="err">#</span><span class="o">*****--------</span><span class="p">]</span>              <span class="o">|</span> <span class="mi">2000</span><span class="o">:</span>      <span class="mi">1227</span> <span class="n">ns</span><span class="o">/</span><span class="n">iter</span> <span class="p">(</span><span class="o">+/-</span> <span class="mi">516</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Wow. That&rsquo;s pretty terrible. Something weird must be going on with
<code>Vec::push_all</code>. (Maybe that&rsquo;s what caused my serialization benchmarks to slow
1/3?). Lets skip it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">impl</span><span class="o">&lt;</span><span class="nl">&#39;a</span><span class="o">&gt;</span> <span class="n">MyWriter</span> <span class="k">for</span> <span class="n">VecWriter1</span><span class="o">&lt;</span><span class="nl">&#39;a</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="cp">#[inline]</span>
</span><span class='line'>    <span class="k">fn</span> <span class="n">my_write</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span> <span class="bp">self</span><span class="p">,</span> <span class="n">src</span><span class="o">:</span> <span class="o">&amp;</span><span class="p">[</span><span class="kt">u8</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">IoResult</span><span class="o">&lt;</span><span class="p">()</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">let</span> <span class="n">src_len</span> <span class="o">=</span> <span class="n">src</span><span class="p">.</span><span class="n">len</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="bp">self</span><span class="p">.</span><span class="n">dst</span><span class="p">.</span><span class="n">reserve</span><span class="p">(</span><span class="n">src_len</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">let</span> <span class="n">dst</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">dst</span><span class="p">.</span><span class="n">as_mut_slice</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">unsafe</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// we reserved enough room in `dst` to store `src`.</span>
</span><span class='line'>            <span class="n">ptr</span><span class="o">::</span><span class="n">copy_nonoverlapping_memory</span><span class="p">(</span>
</span><span class='line'>                <span class="n">dst</span><span class="p">.</span><span class="n">as_mut_ptr</span><span class="p">(),</span>
</span><span class='line'>                <span class="n">src</span><span class="p">.</span><span class="n">as_ptr</span><span class="p">(),</span>
</span><span class='line'>                <span class="n">src_len</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nb">Ok</span><span class="p">(())</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And it looks a bit better, but not perfect:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="n">test</span> <span class="n">writer</span><span class="o">::</span><span class="n">bench_vec_writer_1</span>                             <span class="p">...</span> <span class="n">bench</span><span class="o">:</span> <span class="mi">100</span> <span class="o">|</span>         <span class="p">[</span><span class="o">------*********</span><span class="err">#</span><span class="o">*****--------</span><span class="p">]</span> <span class="o">|</span> <span class="mi">200</span><span class="o">:</span>       <span class="mi">160</span> <span class="n">ns</span><span class="o">/</span><span class="n">iter</span> <span class="p">(</span><span class="o">+/-</span> <span class="mi">68</span><span class="p">)</span>
</span><span class='line'><span class="n">test</span> <span class="n">writer</span><span class="o">::</span><span class="n">bench_vec_writer_1_inline_always</span>               <span class="p">...</span> <span class="n">bench</span><span class="o">:</span> <span class="mi">100</span> <span class="o">|</span>     <span class="p">[</span><span class="o">--------****</span><span class="err">#</span><span class="o">**--</span><span class="p">]</span>                 <span class="o">|</span> <span class="mi">300</span><span class="o">:</span>       <span class="mi">182</span> <span class="n">ns</span><span class="o">/</span><span class="n">iter</span> <span class="p">(</span><span class="o">+/-</span> <span class="mi">79</span><span class="p">)</span>
</span><span class='line'><span class="n">test</span> <span class="n">writer</span><span class="o">::</span><span class="n">bench_vec_writer_1_inline_never</span>                <span class="p">...</span> <span class="n">bench</span><span class="o">:</span> <span class="mi">600</span> <span class="o">|</span>   <span class="p">[</span><span class="o">---****</span><span class="err">#</span><span class="o">**--</span><span class="p">]</span>                       <span class="o">|</span> <span class="mi">2000</span><span class="o">:</span>       <span class="mi">952</span> <span class="n">ns</span><span class="o">/</span><span class="n">iter</span> <span class="p">(</span><span class="o">+/-</span> <span class="mi">399</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>There&rsquo;s even less going on here than before. The only difference is that
reserve call. Commenting it out gets us back to <code>copy_nonoverlapping_memory</code>
territory:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="n">test</span> <span class="n">writer</span><span class="o">::</span><span class="n">bench_vec_writer_1</span>                             <span class="p">...</span> <span class="n">bench</span><span class="o">:</span> <span class="mi">70</span> <span class="o">|</span> <span class="p">[</span><span class="o">----------------*********</span><span class="err">#</span><span class="o">******-------</span><span class="p">]</span><span class="o">|</span> <span class="mi">100</span><span class="o">:</span>        <span class="mi">89</span> <span class="n">ns</span><span class="o">/</span><span class="n">iter</span> <span class="p">(</span><span class="o">+/-</span> <span class="mi">27</span><span class="p">)</span>
</span><span class='line'><span class="n">test</span> <span class="n">writer</span><span class="o">::</span><span class="n">bench_vec_writer_1_inline_always</span>               <span class="p">...</span> <span class="n">bench</span><span class="o">:</span> <span class="mi">50</span> <span class="o">|</span>   <span class="p">[</span><span class="o">-***</span><span class="err">#</span><span class="o">******--</span><span class="p">]</span>                        <span class="o">|</span> <span class="mi">200</span><span class="o">:</span>        <span class="mi">75</span> <span class="n">ns</span><span class="o">/</span><span class="n">iter</span> <span class="p">(</span><span class="o">+/-</span> <span class="mi">46</span><span class="p">)</span>
</span><span class='line'><span class="n">test</span> <span class="n">writer</span><span class="o">::</span><span class="n">bench_vec_writer_1_inline_never</span>                <span class="p">...</span> <span class="n">bench</span><span class="o">:</span> <span class="mi">500</span> <span class="o">|</span>   <span class="p">[</span><span class="o">--***</span><span class="err">#</span><span class="o">***---</span><span class="p">]</span>                       <span class="o">|</span> <span class="mi">2000</span><span class="o">:</span>       <span class="mi">775</span> <span class="n">ns</span><span class="o">/</span><span class="n">iter</span> <span class="p">(</span><span class="o">+/-</span> <span class="mi">433</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Unfortunately it&rsquo;s getting pretty late, so rather than wait until the next time
to dive into this, I&rsquo;ll leave it up to you all. Does anyone know why <code>reserve</code>
is causing so much trouble here?</p>

<hr />

<p>PS: While I was working on this, I saw
<a href="https://github.com/erickt/rust-serialization-benchmarks/pull/2">stevencheg</a>
submitted a patch to speed up the protocol buffer support. But when I ran the
tests, everything was about 40% slower than the last benchmark
<a href="http://erickt.github.io/blog/2014/11/13/benchmarks-2/">post</a>! Something
happened with Rust&rsquo;s performance over these past couple weeks!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="n">test</span> <span class="n">goser</span><span class="o">::</span><span class="n">bincode</span><span class="o">::</span><span class="n">bench_decoder</span>                          <span class="p">...</span> <span class="n">bench</span><span class="o">:</span>      <span class="mi">7682</span> <span class="n">ns</span><span class="o">/</span><span class="n">iter</span> <span class="p">(</span><span class="o">+/-</span> <span class="mi">3680</span><span class="p">)</span> <span class="o">=</span> <span class="mi">52</span> <span class="n">MB</span><span class="o">/</span><span class="n">s</span>
</span><span class='line'><span class="n">test</span> <span class="n">goser</span><span class="o">::</span><span class="n">bincode</span><span class="o">::</span><span class="n">bench_encoder</span>                          <span class="p">...</span> <span class="n">bench</span><span class="o">:</span>       <span class="mi">516</span> <span class="n">ns</span><span class="o">/</span><span class="n">iter</span> <span class="p">(</span><span class="o">+/-</span> <span class="mi">265</span><span class="p">)</span> <span class="o">=</span> <span class="mi">775</span> <span class="n">MB</span><span class="o">/</span><span class="n">s</span>
</span><span class='line'><span class="n">test</span> <span class="n">goser</span><span class="o">::</span><span class="n">bincode</span><span class="o">::</span><span class="n">bench_populate</span>                         <span class="p">...</span> <span class="n">bench</span><span class="o">:</span>      <span class="mi">1504</span> <span class="n">ns</span><span class="o">/</span><span class="n">iter</span> <span class="p">(</span><span class="o">+/-</span> <span class="mi">324</span><span class="p">)</span>
</span><span class='line'><span class="n">test</span> <span class="n">goser</span><span class="o">::</span><span class="n">capnp</span><span class="o">::</span><span class="n">bench_deserialize</span>                        <span class="p">...</span> <span class="n">bench</span><span class="o">:</span>       <span class="mi">251</span> <span class="n">ns</span><span class="o">/</span><span class="n">iter</span> <span class="p">(</span><span class="o">+/-</span> <span class="mi">140</span><span class="p">)</span> <span class="o">=</span> <span class="mi">1784</span> <span class="n">MB</span><span class="o">/</span><span class="n">s</span>
</span><span class='line'><span class="n">test</span> <span class="n">goser</span><span class="o">::</span><span class="n">capnp</span><span class="o">::</span><span class="n">bench_deserialize_packed_unbuffered</span>      <span class="p">...</span> <span class="n">bench</span><span class="o">:</span>      <span class="mi">1344</span> <span class="n">ns</span><span class="o">/</span><span class="n">iter</span> <span class="p">(</span><span class="o">+/-</span> <span class="mi">533</span><span class="p">)</span> <span class="o">=</span> <span class="mi">250</span> <span class="n">MB</span><span class="o">/</span><span class="n">s</span>
</span><span class='line'><span class="n">test</span> <span class="n">goser</span><span class="o">::</span><span class="n">capnp</span><span class="o">::</span><span class="n">bench_populate</span>                           <span class="p">...</span> <span class="n">bench</span><span class="o">:</span>       <span class="mi">663</span> <span class="n">ns</span><span class="o">/</span><span class="n">iter</span> <span class="p">(</span><span class="o">+/-</span> <span class="mi">236</span><span class="p">)</span>
</span><span class='line'><span class="n">test</span> <span class="n">goser</span><span class="o">::</span><span class="n">capnp</span><span class="o">::</span><span class="n">bench_serialize</span>                          <span class="p">...</span> <span class="n">bench</span><span class="o">:</span>       <span class="mi">144</span> <span class="n">ns</span><span class="o">/</span><span class="n">iter</span> <span class="p">(</span><span class="o">+/-</span> <span class="mi">37</span><span class="p">)</span> <span class="o">=</span> <span class="mi">3111</span> <span class="n">MB</span><span class="o">/</span><span class="n">s</span>
</span><span class='line'><span class="n">test</span> <span class="n">goser</span><span class="o">::</span><span class="n">capnp</span><span class="o">::</span><span class="n">bench_serialize_packed_unbuffered</span>        <span class="p">...</span> <span class="n">bench</span><span class="o">:</span>       <span class="mi">913</span> <span class="n">ns</span><span class="o">/</span><span class="n">iter</span> <span class="p">(</span><span class="o">+/-</span> <span class="mi">436</span><span class="p">)</span> <span class="o">=</span> <span class="mi">369</span> <span class="n">MB</span><span class="o">/</span><span class="n">s</span>
</span><span class='line'><span class="n">test</span> <span class="n">goser</span><span class="o">::</span><span class="n">msgpack</span><span class="o">::</span><span class="n">bench_decoder</span>                          <span class="p">...</span> <span class="n">bench</span><span class="o">:</span>      <span class="mi">3411</span> <span class="n">ns</span><span class="o">/</span><span class="n">iter</span> <span class="p">(</span><span class="o">+/-</span> <span class="mi">1837</span><span class="p">)</span> <span class="o">=</span> <span class="mi">84</span> <span class="n">MB</span><span class="o">/</span><span class="n">s</span>
</span><span class='line'><span class="n">test</span> <span class="n">goser</span><span class="o">::</span><span class="n">msgpack</span><span class="o">::</span><span class="n">bench_encoder</span>                          <span class="p">...</span> <span class="n">bench</span><span class="o">:</span>       <span class="mi">961</span> <span class="n">ns</span><span class="o">/</span><span class="n">iter</span> <span class="p">(</span><span class="o">+/-</span> <span class="mi">477</span><span class="p">)</span> <span class="o">=</span> <span class="mi">298</span> <span class="n">MB</span><span class="o">/</span><span class="n">s</span>
</span><span class='line'><span class="n">test</span> <span class="n">goser</span><span class="o">::</span><span class="n">msgpack</span><span class="o">::</span><span class="n">bench_populate</span>                         <span class="p">...</span> <span class="n">bench</span><span class="o">:</span>      <span class="mi">1564</span> <span class="n">ns</span><span class="o">/</span><span class="n">iter</span> <span class="p">(</span><span class="o">+/-</span> <span class="mi">453</span><span class="p">)</span>
</span><span class='line'><span class="n">test</span> <span class="n">goser</span><span class="o">::</span><span class="n">protobuf</span><span class="o">::</span><span class="n">bench_decoder</span>                         <span class="p">...</span> <span class="n">bench</span><span class="o">:</span>      <span class="mi">3116</span> <span class="n">ns</span><span class="o">/</span><span class="n">iter</span> <span class="p">(</span><span class="o">+/-</span> <span class="mi">1485</span><span class="p">)</span> <span class="o">=</span> <span class="mi">91</span> <span class="n">MB</span><span class="o">/</span><span class="n">s</span>
</span><span class='line'><span class="n">test</span> <span class="n">goser</span><span class="o">::</span><span class="n">protobuf</span><span class="o">::</span><span class="n">bench_encoder</span>                         <span class="p">...</span> <span class="n">bench</span><span class="o">:</span>      <span class="mi">1220</span> <span class="n">ns</span><span class="o">/</span><span class="n">iter</span> <span class="p">(</span><span class="o">+/-</span> <span class="mi">482</span><span class="p">)</span> <span class="o">=</span> <span class="mi">234</span> <span class="n">MB</span><span class="o">/</span><span class="n">s</span>
</span><span class='line'><span class="n">test</span> <span class="n">goser</span><span class="o">::</span><span class="n">protobuf</span><span class="o">::</span><span class="n">bench_populate</span>                        <span class="p">...</span> <span class="n">bench</span><span class="o">:</span>       <span class="mi">942</span> <span class="n">ns</span><span class="o">/</span><span class="n">iter</span> <span class="p">(</span><span class="o">+/-</span> <span class="mi">836</span><span class="p">)</span>
</span><span class='line'><span class="n">test</span> <span class="n">goser</span><span class="o">::</span><span class="n">serialize_json</span><span class="o">::</span><span class="n">bench_decoder</span>                   <span class="p">...</span> <span class="n">bench</span><span class="o">:</span>     <span class="mi">31934</span> <span class="n">ns</span><span class="o">/</span><span class="n">iter</span> <span class="p">(</span><span class="o">+/-</span> <span class="mi">16186</span><span class="p">)</span> <span class="o">=</span> <span class="mi">18</span> <span class="n">MB</span><span class="o">/</span><span class="n">s</span>
</span><span class='line'><span class="n">test</span> <span class="n">goser</span><span class="o">::</span><span class="n">serialize_json</span><span class="o">::</span><span class="n">bench_encoder</span>                   <span class="p">...</span> <span class="n">bench</span><span class="o">:</span>      <span class="mi">8481</span> <span class="n">ns</span><span class="o">/</span><span class="n">iter</span> <span class="p">(</span><span class="o">+/-</span> <span class="mi">3392</span><span class="p">)</span> <span class="o">=</span> <span class="mi">71</span> <span class="n">MB</span><span class="o">/</span><span class="n">s</span>
</span><span class='line'><span class="n">test</span> <span class="n">goser</span><span class="o">::</span><span class="n">serialize_json</span><span class="o">::</span><span class="n">bench_populate</span>                  <span class="p">...</span> <span class="n">bench</span><span class="o">:</span>      <span class="mi">1471</span> <span class="n">ns</span><span class="o">/</span><span class="n">iter</span> <span class="p">(</span><span class="o">+/-</span> <span class="mi">426</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chasing an EPROTOTYPE Through Rust, Sendto, and the OSX Kernel With C-Reduce]]></title>
    <link href="http://erickt.github.io/blog/2014/11/19/adventures-in-debugging-a-potential-osx-kernel-bug/"/>
    <updated>2014-11-19T07:35:04-08:00</updated>
    <id>http://erickt.github.io/blog/2014/11/19/adventures-in-debugging-a-potential-osx-kernel-bug</id>
    <content type="html"><![CDATA[<p>A slight diversion from my serialization series. Last week, strcat submitted
<a href="https://github.com/rust-lang/rust/pull/18885">#18885</a> pull request, which adds
support for using a <code>Vec</code> as a <code>Writer</code>. Over the weekend I submitted
<a href="https://github.com/rust-lang/rust/pull/18980">#18980</a>, which allows a <code>&amp;[u8]</code>
to be used as a <code>Reader</code>. Overall a pretty simple change. However, when I was
running the test suite, I found that the <code>std::io::net::tcp::write_close_ip4()</code>
test was occasionally failing:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="cp">#[test]</span>
</span><span class='line'><span class="k">fn</span> <span class="n">write_close_ip4</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">addr</span> <span class="o">=</span> <span class="n">next_test_ip4</span><span class="p">();</span>
</span><span class='line'>    <span class="kd">let</span> <span class="k">mut</span> <span class="n">acceptor</span> <span class="o">=</span> <span class="n">TcpListener</span><span class="o">::</span><span class="n">bind</span><span class="p">(</span><span class="n">addr</span><span class="p">).</span><span class="n">listen</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">spawn</span><span class="p">(</span><span class="k">proc</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">let</span> <span class="n">_stream</span> <span class="o">=</span> <span class="n">TcpStream</span><span class="o">::</span><span class="n">connect</span><span class="p">(</span><span class="n">addr</span><span class="p">);</span>
</span><span class='line'>        <span class="c1">// Close</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">let</span> <span class="k">mut</span> <span class="n">stream</span> <span class="o">=</span> <span class="n">acceptor</span><span class="p">.</span><span class="n">accept</span><span class="p">();</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">buf</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>    <span class="k">loop</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">match</span> <span class="n">stream</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="n">buf</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nb">Ok</span><span class="p">(..)</span> <span class="o">=&gt;</span> <span class="p">{}</span>
</span><span class='line'>            <span class="nb">Err</span><span class="p">(</span><span class="n">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">assert</span><span class="o">!</span><span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">kind</span> <span class="o">==</span> <span class="n">ConnectionReset</span> <span class="o">||</span>
</span><span class='line'>                        <span class="n">e</span><span class="p">.</span><span class="n">kind</span> <span class="o">==</span> <span class="n">BrokenPipe</span> <span class="o">||</span>
</span><span class='line'>                        <span class="n">e</span><span class="p">.</span><span class="n">kind</span> <span class="o">==</span> <span class="n">ConnectionAborted</span><span class="p">,</span>
</span><span class='line'>                        <span class="s">&quot;unknown error: {}&quot;</span><span class="p">,</span> <span class="n">e</span><span class="p">);</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>write</code> would succeed a few times, then occasionally error with the
<code>unknown error: Protocol wrong type for socket</code>, or the <code>EPROTOTYPE</code> errno.
This is a really surprising error. As far as I know, the only functions that
return that errno are <code>socket</code>, <code>socketpair</code>, and <code>connect</code>. I searched
everywhere, but I couldn&rsquo;t find any documentation suggesting that <code>write</code> would
ever produce that error.</p>

<p>I wasn&rsquo;t the only one who ran into it. bjz opened
<a href="https://github.com/rust-lang/rust/issues/18900">#18900</a> describing the same
problem. One interesting thing to note is they were also on OSX Yosemite.  So I
took a little bit of time to extract out that test from the Rust test suite
into this <a href="https://gist.github.com/erickt/ac1f35e20834aa5d1972">gist</a> and got
someone on #rust-internals to run it on linux for me with this little driver
script:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'>
</span><span class='line'><span class="nb">set</span> -e
</span><span class='line'>
</span><span class='line'>rustc test.rs
</span><span class='line'>
</span><span class='line'><span class="k">for</span> i in <span class="k">$(</span>seq <span class="m">1</span> 1000<span class="k">)</span><span class="p">;</span> <span class="k">do</span>
</span><span class='line'>  ./test tcp::test::write_close_ip4
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<p>and it didn&rsquo;t error out. So it seems to be system dependent. Further
experimentation showed that if we introduced sleeps or a mutex synchronization
appeared to fix the problem as well. At this point I wasn&rsquo;t sure if this was a
non-issue, a bug in our code, or a bug in the OS. One things for sure though,
if there is a bug, it could be scattered somewhere across the Rust codebase,
which just <code>std::io</code> alone is 20 files at around 12522 lines. It&rsquo;d be a pain to
cut that down to a self contained test case.</p>

<p>Fortunately we&rsquo;ve got <a href="http://embed.cs.utah.edu/creduce/">C-Reduce</a> to help us
out. Back in May <a href="http://www.cs.utah.edu/~regehr/">Professor John Regehr</a> from
the University of Utah came to our
<a href="http://www.meetup.com/Rust-Bay-Area/events/169434302/">Bay Area Rust meetup</a>
 to talk about compiler testing and fuzzing. We recorded the talk, so if you
want to watch it, you can find it
<a href="https://air.mozilla.org/rust-meetup-may-2014/">here</a>. One of the things he
talked about was the tool C-Reduce his research group developed to
automatically cut
out unnecessary lines of code that can still reproduce a bug you&rsquo;re looking
for. While it&rsquo;s written to target C files, it turns out Rust is syntatically
close enough to C that it works out pretty well for it too. All you need is a
single source file and driver script that&rsquo;ll report if the compiled source file
reproduced the bug.</p>

<p>Aside 1: By the way, one of the other things I did this weekend was I put
together a Homebrew
<a href="https://github.com/Homebrew/homebrew/pull/34220">pull request for C-Reduce</a>.
It hasn&rsquo;t landed yet, but you want to use it, you can do:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>% brew install https://raw.githubusercontent.com/erickt/homebrew/delta-and-creduce/Library/Formula/delta.rb
</span><span class='line'>% brew install https://raw.githubusercontent.com/erickt/homebrew/delta-and-creduce/Library/Formula/creduce.rb
</span></code></pre></td></tr></table></div></figure>


<p>Hopefully it&rsquo;ll land soon so you&rsquo;ll be able to do:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>% brew install creduce
</span></code></pre></td></tr></table></div></figure>


<p>Anyway, back to the story. So we&rsquo;ve got a rather large code base to cover, and
while C-reduce does a pretty good job of trimming away lines, just pointing it
at the entire <code>std</code> module is a bit too much for it to handle in a reasonable
amount of time. It probably needs some more semantic information about Rust to
do a better job of cutting out broad swaths of code.</p>

<p>So I needed to do at least a rough pass to slim down the files. I figured the
problem was probably contained in <code>std::io</code> or <code>std::sys</code>, so I wrote a simple
<code>test.rs</code> that explicitly included those modules as part of the crate (see
this <a href="https://gist.github.com/erickt/ac1f35e20834aa5d1972">gist</a> if you are
interested), and used the pretty printer to merge it into one file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>% rustc --pretty normal test.rs &gt; test.rs
</span></code></pre></td></tr></table></div></figure>


<p>Aside 2: Our pretty printer still has some bugs in it, which I filed:
<a href="https://github.com/rust-lang/rust/issues/19075">19075</a> and
<a href="https://github.com/rust-lang/rust/issues/19077">19077</a>.  Fortunately it was
pretty simple to fix those cases by hand in the generated <code>std.rs</code>, and odds
are good they&rsquo;ll be fixed by the time you might use this process.</p>

<p>Next up, we need a driver script. We can adapt our one from before. The only
special consideration is that we need to make sure to only exit with a return
code of 0 if the version of <code>std.rs</code> we&rsquo;re compiling errors with <code>EPROTOTYPE</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'>
</span><span class='line'>rustc <span class="se">\</span>
</span><span class='line'>  -A unused_imports <span class="se">\</span>
</span><span class='line'>  -A unused_unsafe <span class="se">\</span>
</span><span class='line'>  -A non_camel_case_types <span class="se">\</span>
</span><span class='line'>  -A unused_variables <span class="se">\</span>
</span><span class='line'>  --test <span class="se">\</span>
</span><span class='line'>  -o <span class="nb">test</span> <span class="se">\</span>
</span><span class='line'>  test.rs &gt;/dev/null 2&gt;<span class="p">&amp;</span>1
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;$?&quot;</span> -ne <span class="s2">&quot;0&quot;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  <span class="nb">exit </span>1
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="nv">root</span><span class="o">=</span><span class="sb">`</span>dirname <span class="nv">$0</span><span class="sb">`</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> i in <span class="k">$(</span>seq <span class="m">1</span> 1000<span class="k">)</span><span class="p">;</span> <span class="k">do</span>
</span><span class='line'>  <span class="nv">$root</span>/timeout.sh <span class="m">5</span> ./test --nocapture tcp::test::write_close_ip4 2&gt;<span class="p">&amp;</span><span class="m">1</span> <span class="p">|</span> tee log
</span><span class='line'>  grep <span class="s2">&quot;Protocol wrong type for socket&quot;</span> log
</span><span class='line'>  <span class="nv">RET</span><span class="o">=</span><span class="s2">&quot;$?&quot;</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;$RET&quot;</span> -eq <span class="s2">&quot;0&quot;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>          <span class="nb">exit </span>0
</span><span class='line'>  <span class="k">elif</span> <span class="o">[</span> <span class="s2">&quot;$RET&quot;</span> -eq <span class="s2">&quot;143&quot;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>          <span class="nb">exit </span>1
</span><span class='line'>  <span class="k">fi</span>
</span><span class='line'>  <span class="nb">echo</span>
</span><span class='line'><span class="k">done</span>
</span><span class='line'>
</span><span class='line'><span class="nb">exit </span>1
</span></code></pre></td></tr></table></div></figure>


<p>I used the helper script
<a href="http://www.ict.griffith.edu.au/anthony/software/timeout.sh">timeout.sh</a> to
time out tests in case C-Reduce accidentally made us an infinite loop.</p>

<p>Finally we&rsquo;re ready to start running C-Reduce:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>% creduce ./driver.sh test.rs
</span><span class='line'><span class="o">===</span>&lt; <span class="m">30598</span> &gt;<span class="o">===</span>
</span><span class='line'>running <span class="m">8</span> interestingness <span class="nb">test</span><span class="o">(</span>s<span class="o">)</span> in <span class="nv">parallel</span>
</span><span class='line'><span class="o">===</span>&lt; pass_blank :: <span class="m">0</span> &gt;<span class="o">===</span>
</span><span class='line'><span class="o">(</span>0.0 %, <span class="m">156170</span> bytes<span class="o">)</span>
</span><span class='line'><span class="o">===</span>&lt; pass_clang_binsrch :: replace-function-def-with-decl &gt;<span class="o">===</span>
</span><span class='line'><span class="o">===</span>&lt; pass_clang_binsrch :: remove-unused-function &gt;<span class="o">===</span>
</span><span class='line'><span class="o">===</span>&lt; pass_lines :: <span class="m">0</span> &gt;<span class="o">===</span>
</span><span class='line'><span class="o">(</span>-0.6 %, <span class="m">157231</span> bytes<span class="o">)</span>
</span><span class='line'><span class="o">(</span>1.2 %, <span class="m">154323</span> bytes<span class="o">)</span>
</span><span class='line'><span class="o">(</span>3.7 %, <span class="m">150455</span> bytes<span class="o">)</span>
</span><span class='line'><span class="o">(</span>4.6 %, <span class="m">149074</span> bytes<span class="o">)</span>
</span><span class='line'><span class="o">(</span>5.5 %, <span class="m">147639</span> bytes<span class="o">)</span>
</span><span class='line'><span class="o">(</span>6.4 %, <span class="m">146172</span> bytes<span class="o">)</span>
</span><span class='line'><span class="o">(</span>7.3 %, <span class="m">144881</span> bytes<span class="o">)</span>
</span><span class='line'><span class="o">(</span>7.7 %, <span class="m">144187</span> bytes<span class="o">)</span>
</span><span class='line'><span class="o">(</span>9.1 %, <span class="m">141936</span> bytes<span class="o">)</span>
</span><span class='line'><span class="o">(</span>9.9 %, <span class="m">140706</span> bytes<span class="o">)</span>
</span><span class='line'><span class="o">(</span>10.3 %, <span class="m">140104</span> bytes<span class="o">)</span>
</span><span class='line'><span class="o">(</span>10.4 %, <span class="m">139998</span> bytes<span class="o">)</span>
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>I let it run in the background for sometime in the background while I did some
other things. When I got back, C-Reduce automatically reduced the file from
153KB to a slim 22KB. I then reran rust with the lints enabled to manually cut
out the dead code C-Reduce failed to remove, and flattened away some
unnecessary structs and methods. I was finally left with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">extern</span> <span class="n">crate</span> <span class="n">libc</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">use</span> <span class="n">std</span><span class="o">::</span><span class="n">io</span><span class="o">::</span><span class="n">net</span><span class="o">::</span><span class="n">ip</span><span class="o">::</span><span class="n">Ipv4Addr</span><span class="p">;</span>
</span><span class='line'><span class="kn">use</span> <span class="n">std</span><span class="o">::</span><span class="n">io</span><span class="o">::</span><span class="n">net</span><span class="o">::</span><span class="n">ip</span><span class="o">::</span><span class="n">SocketAddr</span><span class="p">;</span>
</span><span class='line'><span class="kn">use</span> <span class="n">std</span><span class="o">::</span><span class="n">io</span><span class="o">::</span><span class="n">net</span><span class="o">::</span><span class="n">ip</span><span class="o">::</span><span class="n">ToSocketAddr</span><span class="p">;</span>
</span><span class='line'><span class="kn">use</span> <span class="n">std</span><span class="o">::</span><span class="n">io</span><span class="o">::</span><span class="n">net</span><span class="o">::</span><span class="n">ip</span><span class="p">;</span>
</span><span class='line'><span class="kn">use</span> <span class="n">std</span><span class="o">::</span><span class="n">io</span><span class="o">::</span><span class="n">test</span><span class="o">::</span><span class="n">next_test_ip4</span><span class="p">;</span>
</span><span class='line'><span class="kn">use</span> <span class="n">std</span><span class="o">::</span><span class="n">mem</span><span class="p">;</span>
</span><span class='line'><span class="kn">use</span> <span class="n">std</span><span class="o">::</span><span class="n">num</span><span class="o">::</span><span class="nb">Int</span><span class="p">;</span>
</span><span class='line'><span class="kn">use</span> <span class="n">std</span><span class="o">::</span><span class="n">os</span><span class="o">::</span><span class="n">errno</span><span class="p">;</span>
</span><span class='line'><span class="kn">use</span> <span class="n">std</span><span class="o">::</span><span class="n">os</span><span class="o">::</span><span class="n">error_string</span><span class="p">;</span>
</span><span class='line'><span class="kn">use</span> <span class="n">std</span><span class="o">::</span><span class="n">ptr</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">bind</span><span class="p">(</span><span class="n">addr</span><span class="o">:</span> <span class="n">ip</span><span class="o">::</span><span class="n">SocketAddr</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">libc</span><span class="o">::</span><span class="n">c_int</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">unsafe</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">let</span> <span class="n">fd</span> <span class="o">=</span> <span class="k">match</span> <span class="n">libc</span><span class="o">::</span><span class="n">socket</span><span class="p">(</span><span class="n">libc</span><span class="o">::</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">libc</span><span class="o">::</span><span class="n">SOCK_STREAM</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="o">-</span><span class="mi">1</span> <span class="o">=&gt;</span> <span class="n">panic</span><span class="o">!</span><span class="p">(),</span>
</span><span class='line'>            <span class="n">fd</span> <span class="o">=&gt;</span> <span class="n">fd</span><span class="p">,</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">let</span> <span class="k">mut</span> <span class="n">storage</span> <span class="o">=</span> <span class="n">mem</span><span class="o">::</span><span class="n">zeroed</span><span class="p">();</span>
</span><span class='line'>        <span class="kd">let</span> <span class="n">len</span> <span class="o">=</span> <span class="n">addr_to_sockaddr</span><span class="p">(</span><span class="n">addr</span><span class="p">,</span> <span class="o">&amp;</span><span class="k">mut</span> <span class="n">storage</span><span class="p">);</span>
</span><span class='line'>        <span class="kd">let</span> <span class="n">addrp</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">storage</span> <span class="k">as</span> <span class="o">*</span><span class="kr">const</span> <span class="n">_</span> <span class="k">as</span> <span class="o">*</span><span class="kr">const</span> <span class="n">libc</span><span class="o">::</span><span class="n">sockaddr</span><span class="p">;</span>
</span><span class='line'>        <span class="k">match</span> <span class="n">libc</span><span class="o">::</span><span class="n">bind</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">addrp</span><span class="p">,</span> <span class="n">len</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="o">-</span><span class="mi">1</span> <span class="o">=&gt;</span> <span class="n">panic</span><span class="o">!</span><span class="p">(),</span>
</span><span class='line'>            <span class="n">_</span> <span class="o">=&gt;</span> <span class="n">fd</span><span class="p">,</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">listen</span><span class="p">(</span><span class="n">fd</span><span class="o">:</span> <span class="n">libc</span><span class="o">::</span><span class="n">c_int</span><span class="p">,</span> <span class="n">backlog</span><span class="o">:</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">unsafe</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">match</span> <span class="n">libc</span><span class="o">::</span><span class="n">listen</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">backlog</span> <span class="k">as</span> <span class="n">libc</span><span class="o">::</span><span class="n">c_int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="o">-</span><span class="mi">1</span> <span class="o">=&gt;</span> <span class="n">panic</span><span class="o">!</span><span class="p">(),</span>
</span><span class='line'>            <span class="n">_</span> <span class="o">=&gt;</span> <span class="p">{}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">accept</span><span class="p">(</span><span class="n">fd</span><span class="o">:</span> <span class="n">libc</span><span class="o">::</span><span class="n">c_int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">libc</span><span class="o">::</span><span class="n">c_int</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">unsafe</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">let</span> <span class="n">x</span> <span class="o">=</span> <span class="n">libc</span><span class="o">::</span><span class="n">accept</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">ptr</span><span class="o">::</span><span class="n">null_mut</span><span class="p">(),</span> <span class="n">ptr</span><span class="o">::</span><span class="n">null_mut</span><span class="p">());</span>
</span><span class='line'>        <span class="k">match</span> <span class="n">x</span> <span class="p">{</span>
</span><span class='line'>            <span class="o">-</span><span class="mi">1</span> <span class="o">=&gt;</span> <span class="n">panic</span><span class="o">!</span><span class="p">(),</span>
</span><span class='line'>            <span class="n">fd</span> <span class="o">=&gt;</span> <span class="n">fd</span><span class="p">,</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">connect</span><span class="p">(</span><span class="n">addr</span><span class="o">:</span> <span class="n">SocketAddr</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">libc</span><span class="o">::</span><span class="n">c_int</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">unsafe</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">let</span> <span class="n">fd</span> <span class="o">=</span> <span class="k">match</span> <span class="n">libc</span><span class="o">::</span><span class="n">socket</span><span class="p">(</span><span class="n">libc</span><span class="o">::</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">libc</span><span class="o">::</span><span class="n">SOCK_STREAM</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="o">-</span><span class="mi">1</span> <span class="o">=&gt;</span> <span class="n">panic</span><span class="o">!</span><span class="p">(),</span>
</span><span class='line'>            <span class="n">fd</span> <span class="o">=&gt;</span> <span class="n">fd</span><span class="p">,</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">let</span> <span class="k">mut</span> <span class="n">storage</span> <span class="o">=</span> <span class="n">mem</span><span class="o">::</span><span class="n">zeroed</span><span class="p">();</span>
</span><span class='line'>        <span class="kd">let</span> <span class="n">len</span> <span class="o">=</span> <span class="n">addr_to_sockaddr</span><span class="p">(</span><span class="n">addr</span><span class="p">,</span> <span class="o">&amp;</span><span class="k">mut</span> <span class="n">storage</span><span class="p">);</span>
</span><span class='line'>        <span class="kd">let</span> <span class="n">addrp</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">storage</span> <span class="k">as</span> <span class="o">*</span><span class="kr">const</span> <span class="n">_</span> <span class="k">as</span> <span class="o">*</span><span class="kr">const</span> <span class="n">libc</span><span class="o">::</span><span class="n">sockaddr</span><span class="p">;</span>
</span><span class='line'>        <span class="kd">let</span> <span class="n">x</span> <span class="o">=</span> <span class="n">libc</span><span class="o">::</span><span class="n">connect</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">addrp</span><span class="p">,</span> <span class="n">len</span><span class="p">);</span>
</span><span class='line'>        <span class="n">fd</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">write</span><span class="p">(</span><span class="n">fd</span><span class="o">:</span> <span class="n">libc</span><span class="o">::</span><span class="n">c_int</span><span class="p">,</span> <span class="n">buf</span><span class="o">:</span> <span class="o">&amp;</span><span class="p">[</span><span class="kt">u8</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">Result</span><span class="o">&lt;</span><span class="p">(),</span> <span class="kt">uint</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">unsafe</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">let</span> <span class="n">len</span> <span class="o">=</span> <span class="n">buf</span><span class="p">.</span><span class="n">len</span><span class="p">();</span>
</span><span class='line'>        <span class="kd">let</span> <span class="n">ret</span> <span class="o">=</span> <span class="n">libc</span><span class="o">::</span><span class="n">send</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">buf</span><span class="p">.</span><span class="n">as_ptr</span><span class="p">()</span> <span class="k">as</span> <span class="o">*</span><span class="kr">const</span> <span class="n">_</span><span class="p">,</span> <span class="n">len</span> <span class="k">as</span> <span class="n">libc</span><span class="o">::</span><span class="n">size_t</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="k">as</span> <span class="kt">i64</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">ret</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class='line'>            <span class="nb">Err</span><span class="p">(</span><span class="n">errno</span><span class="p">())</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="nb">Ok</span><span class="p">(())</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">close</span><span class="p">(</span><span class="n">fd</span><span class="o">:</span> <span class="n">libc</span><span class="o">::</span><span class="n">c_int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">unsafe</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">let</span> <span class="n">x</span> <span class="o">=</span> <span class="n">libc</span><span class="o">::</span><span class="n">close</span><span class="p">(</span><span class="n">fd</span><span class="p">);</span>
</span><span class='line'>        <span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">addr_to_sockaddr</span><span class="p">(</span><span class="n">addr</span><span class="o">:</span> <span class="n">SocketAddr</span><span class="p">,</span> <span class="n">storage</span><span class="o">:</span> <span class="o">&amp;</span><span class="k">mut</span> <span class="n">libc</span><span class="o">::</span><span class="n">sockaddr_storage</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">libc</span><span class="o">::</span><span class="n">socklen_t</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">inaddr</span> <span class="o">=</span> <span class="k">match</span> <span class="n">addr</span><span class="p">.</span><span class="n">ip</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Ipv4Addr</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">let</span> <span class="n">ip</span> <span class="o">=</span> <span class="n">a</span> <span class="k">as</span> <span class="kt">u32</span> <span class="o">&lt;&lt;</span> <span class="mi">24</span> <span class="o">|</span> <span class="n">b</span> <span class="k">as</span> <span class="kt">u32</span> <span class="o">&lt;&lt;</span> <span class="mi">16</span> <span class="o">|</span> <span class="n">c</span> <span class="k">as</span> <span class="kt">u32</span> <span class="o">&lt;&lt;</span> <span class="mi">8</span> <span class="o">|</span> <span class="n">d</span> <span class="k">as</span> <span class="kt">u32</span> <span class="o">&lt;&lt;</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>            <span class="n">libc</span><span class="o">::</span><span class="n">in_addr</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">s_addr</span><span class="o">:</span> <span class="nb">Int</span><span class="o">::</span><span class="n">from_be</span><span class="p">(</span><span class="n">ip</span><span class="p">),</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">_</span> <span class="o">=&gt;</span> <span class="n">panic</span><span class="o">!</span><span class="p">(),</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="k">unsafe</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">let</span> <span class="n">storage</span> <span class="o">=</span> <span class="n">storage</span> <span class="k">as</span> <span class="o">*</span><span class="k">mut</span> <span class="n">_</span> <span class="k">as</span> <span class="o">*</span><span class="k">mut</span> <span class="n">libc</span><span class="o">::</span><span class="n">sockaddr_in</span><span class="p">;</span>
</span><span class='line'>        <span class="p">(</span><span class="o">*</span><span class="n">storage</span><span class="p">).</span><span class="n">sin_family</span> <span class="o">=</span> <span class="n">libc</span><span class="o">::</span><span class="n">AF_INET</span> <span class="k">as</span> <span class="n">libc</span><span class="o">::</span><span class="n">sa_family_t</span><span class="p">;</span>
</span><span class='line'>        <span class="p">(</span><span class="o">*</span><span class="n">storage</span><span class="p">).</span><span class="n">sin_port</span> <span class="o">=</span> <span class="n">addr</span><span class="p">.</span><span class="n">port</span><span class="p">.</span><span class="n">to_be</span><span class="p">();</span>
</span><span class='line'>        <span class="p">(</span><span class="o">*</span><span class="n">storage</span><span class="p">).</span><span class="n">sin_addr</span> <span class="o">=</span> <span class="n">inaddr</span><span class="p">;</span>
</span><span class='line'>        <span class="kd">let</span> <span class="n">len</span> <span class="o">=</span> <span class="n">mem</span><span class="o">::</span><span class="n">size_of</span><span class="o">::&lt;</span><span class="n">libc</span><span class="o">::</span><span class="n">sockaddr_in</span><span class="o">&gt;</span><span class="p">();</span>
</span><span class='line'>        <span class="n">len</span> <span class="k">as</span> <span class="n">libc</span><span class="o">::</span><span class="n">socklen_t</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">addr</span> <span class="o">=</span> <span class="n">next_test_ip4</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">let</span> <span class="n">listener</span> <span class="o">=</span> <span class="n">bind</span><span class="p">(</span><span class="n">addr</span><span class="p">);</span>
</span><span class='line'>    <span class="n">listen</span><span class="p">(</span><span class="n">listener</span><span class="p">,</span> <span class="mi">128</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">spawn</span><span class="p">(</span><span class="k">proc</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">let</span> <span class="n">addresses</span> <span class="o">=</span> <span class="n">addr</span><span class="p">.</span><span class="n">to_socket_addr_all</span><span class="p">().</span><span class="n">unwrap</span><span class="p">();</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">addr</span> <span class="k">in</span> <span class="n">addresses</span><span class="p">.</span><span class="n">into_iter</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">let</span> <span class="n">fd</span> <span class="o">=</span> <span class="n">connect</span><span class="p">(</span><span class="n">addr</span><span class="p">);</span>
</span><span class='line'>            <span class="n">close</span><span class="p">(</span><span class="n">fd</span><span class="p">);</span>
</span><span class='line'>            <span class="k">return</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">let</span> <span class="n">stream</span> <span class="o">=</span> <span class="n">accept</span><span class="p">(</span><span class="n">listener</span><span class="p">);</span>
</span><span class='line'>    <span class="k">loop</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">let</span> <span class="n">x</span> <span class="o">=</span> <span class="n">write</span><span class="p">(</span><span class="n">stream</span><span class="p">,</span> <span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>        <span class="k">match</span> <span class="n">x</span> <span class="p">{</span>
</span><span class='line'>            <span class="nb">Ok</span><span class="p">(..)</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>            <span class="nb">Err</span><span class="p">(</span><span class="n">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>                <span class="kd">let</span> <span class="n">e</span> <span class="o">=</span> <span class="n">e</span> <span class="k">as</span> <span class="kt">i32</span><span class="p">;</span>
</span><span class='line'>                <span class="n">assert</span><span class="o">!</span><span class="p">(</span>
</span><span class='line'>                    <span class="n">e</span> <span class="o">==</span> <span class="n">libc</span><span class="o">::</span><span class="n">ECONNREFUSED</span> <span class="o">||</span>
</span><span class='line'>                    <span class="n">e</span> <span class="o">==</span> <span class="n">libc</span><span class="o">::</span><span class="n">EPIPE</span> <span class="o">||</span>
</span><span class='line'>                    <span class="n">e</span> <span class="o">==</span> <span class="n">libc</span><span class="o">::</span><span class="n">ECONNABORTED</span><span class="p">,</span>
</span><span class='line'>                    <span class="s">&quot;unknown error: {} {}&quot;</span><span class="p">,</span> <span class="n">e</span><span class="p">,</span> <span class="n">error_string</span><span class="p">(</span><span class="n">e</span> <span class="k">as</span> <span class="kt">uint</span><span class="p">));</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">close</span><span class="p">(</span><span class="n">stream</span><span class="p">);</span>
</span><span class='line'>    <span class="n">close</span><span class="p">(</span><span class="n">listener</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This snippet reproduces the same <code>EPROTOTYPE</code> that we started with at the top
of the post. Pretty cool that we got here without much effort?</p>

<p>Now At this point you might say to yourself that couldn&rsquo;t I have extracted this
out myself?  And yeah, you would be right. This is a pretty much a c-in-rust
implementation of this bug. But what&rsquo;s great about using C-Reduce here is that
I only had to make some very rough guesses about what files were and were not
important to include in my <code>test.rs</code>. Eventually when we get some rust plugins
written for C-Reduce I probably could just point it at the whole <code>libstd</code> let
C-Reduce do it&rsquo;s thing. Doing this by hand can be a pretty long and painful
manual process, especially if we&rsquo;re trying to debug a codegen or runtime bug.
In the past I&rsquo;ve spent hours reducing some codegen bugs down into a small
snippet that C-Reduce was also able to produce in a couple minutes.</p>

<p>The last step with this code was to eliminate Rust from the picture, and
translate this code into C:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;strings.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/socket.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;netinet/in.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;pthread.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;errno.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">do_server</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">fd</span><span class="p">;</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">sockaddr_in</span> <span class="n">server_addr</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">fd</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">fd</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">perror</span><span class="p">(</span><span class="s">&quot;error socket server&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">bzero</span><span class="p">((</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">server_addr</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">server_addr</span><span class="p">));</span>
</span><span class='line'>  <span class="n">server_addr</span><span class="p">.</span><span class="n">sin_family</span> <span class="o">=</span> <span class="n">AF_INET</span><span class="p">;</span>
</span><span class='line'>  <span class="n">server_addr</span><span class="p">.</span><span class="n">sin_addr</span><span class="p">.</span><span class="n">s_addr</span> <span class="o">=</span> <span class="n">INADDR_ANY</span><span class="p">;</span>
</span><span class='line'>  <span class="n">server_addr</span><span class="p">.</span><span class="n">sin_port</span> <span class="o">=</span> <span class="n">htons</span><span class="p">(</span><span class="mi">9600</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">bind</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="p">(</span><span class="k">struct</span> <span class="n">sockaddr</span> <span class="o">*</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">server_addr</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">server_addr</span><span class="p">))</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">perror</span><span class="p">(</span><span class="s">&quot;error binding&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">fd</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span><span class="o">*</span> <span class="nf">do_child_thread</span><span class="p">(</span><span class="kt">void</span><span class="o">*</span> <span class="n">unused</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">sockaddr_in</span> <span class="n">client_addr</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">fd</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">fd</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">fd</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">perror</span><span class="p">(</span><span class="s">&quot;error socket client&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">bzero</span><span class="p">((</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">client_addr</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">client_addr</span><span class="p">));</span>
</span><span class='line'>  <span class="n">client_addr</span><span class="p">.</span><span class="n">sin_family</span> <span class="o">=</span> <span class="n">AF_INET</span><span class="p">;</span>
</span><span class='line'>  <span class="n">client_addr</span><span class="p">.</span><span class="n">sin_addr</span><span class="p">.</span><span class="n">s_addr</span> <span class="o">=</span> <span class="n">INADDR_ANY</span><span class="p">;</span>
</span><span class='line'>  <span class="n">client_addr</span><span class="p">.</span><span class="n">sin_port</span> <span class="o">=</span> <span class="n">htons</span><span class="p">(</span><span class="mi">9600</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">connect</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="p">(</span><span class="k">struct</span> <span class="n">sockaddr</span> <span class="o">*</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">client_addr</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">client_addr</span><span class="p">))</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">perror</span><span class="p">(</span><span class="s">&quot;error connect&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;closing client socket</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">close</span><span class="p">(</span><span class="n">fd</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">perror</span><span class="p">(</span><span class="s">&quot;error close client socket&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;closed client socket</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">**</span> <span class="n">argv</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">server_fd</span><span class="p">,</span> <span class="n">client_fd</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">socklen_t</span> <span class="n">client_len</span><span class="p">;</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">sockaddr_in</span> <span class="n">client_addr</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">buf</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span> <span class="sc">&#39;a&#39;</span><span class="p">,</span> <span class="sc">&#39;\n&#39;</span> <span class="p">};</span>
</span><span class='line'>  <span class="kt">pthread_t</span> <span class="n">child_thread</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">rc</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">signal</span><span class="p">(</span><span class="n">SIGPIPE</span><span class="p">,</span> <span class="n">SIG_IGN</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">server_fd</span> <span class="o">=</span> <span class="n">do_server</span><span class="p">();</span>
</span><span class='line'>  <span class="n">rc</span> <span class="o">=</span> <span class="n">listen</span><span class="p">(</span><span class="n">server_fd</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">rc</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">perror</span><span class="p">(</span><span class="s">&quot;error listen&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">rc</span> <span class="o">=</span> <span class="n">pthread_create</span><span class="p">(</span><span class="o">&amp;</span><span class="n">child_thread</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">do_child_thread</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">rc</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">perror</span><span class="p">(</span><span class="s">&quot;error pthread_create&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">client_len</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">client_addr</span><span class="p">);</span>
</span><span class='line'>  <span class="n">client_fd</span> <span class="o">=</span> <span class="n">accept</span><span class="p">(</span><span class="n">server_fd</span><span class="p">,</span> <span class="p">(</span><span class="k">struct</span> <span class="n">sockaddr</span> <span class="o">*</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">client_addr</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">client_len</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">client_fd</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">perror</span><span class="p">(</span><span class="s">&quot;error accept&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;before send</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">rc</span> <span class="o">=</span> <span class="n">send</span><span class="p">(</span><span class="n">client_fd</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">buf</span><span class="p">),</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;after send: %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">rc</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">rc</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">errno</span> <span class="o">==</span> <span class="n">EPIPE</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">so_type</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">socklen_t</span> <span class="n">so_len</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">so_type</span><span class="p">);</span>
</span><span class='line'>        <span class="n">getsockopt</span><span class="p">(</span><span class="n">client_fd</span><span class="p">,</span> <span class="n">SOL_SOCKET</span><span class="p">,</span> <span class="n">SO_TYPE</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">so_type</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">so_len</span><span class="p">);</span>
</span><span class='line'>        <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;type: %d %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">so_type</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">perror</span><span class="p">(</span><span class="s">&quot;error send&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;before server closing client fd</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">close</span><span class="p">(</span><span class="n">client_fd</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">perror</span><span class="p">(</span><span class="s">&quot;error close client&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;after server closing client fd</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;before server closing fd</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">close</span><span class="p">(</span><span class="n">server_fd</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">perror</span><span class="p">(</span><span class="s">&quot;error close server&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;after server closing fd</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">rc</span> <span class="o">=</span> <span class="n">pthread_join</span><span class="p">(</span><span class="n">child_thread</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">rc</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">rc</span> <span class="o">!=</span> <span class="n">ESRCH</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;error pthread_join: %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">rc</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This also produces <code>EPROTOTYPE</code>, so we can eliminate Rust altogther. But lets
keep digging. What exactly is producing this error? If I was on Linux, I&rsquo;d use
<code>strace</code>, but that program isn&rsquo;t on Macs. There&rsquo;s a similar tool called
<code>dtruss</code>, but that seemed to slow things down enough that the <code>EPROTOTYPE</code>
never happened. Fortunately though there is another program called <code>errinfo</code>,
that just prints the <code>errno</code> along with every syscall. In one terminal I ran
<code>while ./test; do sleep 0.1; done</code>. In the other:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">%</span> <span class="n">sudo</span> <span class="n">errinfo</span> <span class="o">-</span><span class="n">n</span> <span class="n">test</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'>           <span class="n">a</span><span class="p">.</span><span class="n">out</span>           <span class="n">stat64</span>    <span class="mi">0</span>
</span><span class='line'>           <span class="n">a</span><span class="p">.</span><span class="n">out</span>             <span class="n">open</span>    <span class="mi">0</span>
</span><span class='line'>           <span class="n">a</span><span class="p">.</span><span class="n">out</span> <span class="n">psynch_mutexwait</span>    <span class="mi">0</span>
</span><span class='line'>           <span class="n">a</span><span class="p">.</span><span class="n">out</span>   <span class="n">write_nocancel</span>    <span class="mi">0</span>
</span><span class='line'>           <span class="n">a</span><span class="p">.</span><span class="n">out</span>           <span class="n">sendto</span>    <span class="mi">0</span>
</span><span class='line'>           <span class="n">a</span><span class="p">.</span><span class="n">out</span>   <span class="n">write_nocancel</span>    <span class="mi">0</span>
</span><span class='line'>           <span class="n">a</span><span class="p">.</span><span class="n">out</span>   <span class="n">write_nocancel</span>    <span class="mi">0</span>
</span><span class='line'>           <span class="n">a</span><span class="p">.</span><span class="n">out</span>           <span class="n">sendto</span>   <span class="mi">41</span>  <span class="n">Protocol</span> <span class="n">wrong</span> <span class="n">type</span> <span class="k">for</span> <span class="n">socket</span>
</span><span class='line'>           <span class="n">a</span><span class="p">.</span><span class="n">out</span>   <span class="n">write_nocancel</span>    <span class="mi">0</span>
</span><span class='line'>           <span class="n">a</span><span class="p">.</span><span class="n">out</span>       <span class="n">getsockopt</span>    <span class="mi">0</span>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Right there we see our <code>sendto</code> syscall is actually returning the <code>EPROTOTYPE</code>.
This <code>errno</code> then is definitely being created inside the OSX kernel, not in any
userspace code. Fortunately, most of the Apple kernel, XNU, is open sourced, so
we can dig down to what&rsquo;ll be the my last layer. You can find the tarballs at
<a href="http://www.opensource.apple.com/.">http://www.opensource.apple.com/.</a> But I&rsquo;d rather use the
<a href="https://github.com/opensource-apple/xnu">unoffical GitHub repository</a>. Using GitHub&rsquo;s
search tools, We can find all 17 instances of
<a href="https://github.com/opensource-apple/xnu/search?l=c&amp;q=EPROTOTYPE&amp;utf8=%E2%9C%93">EPROTOTYPE</a>
in the codebase. Now I don&rsquo;t know the XNU codebase, but there are still some
really interesting things we can find. The first is in
<a href="https://github.com/opensource-apple/xnu/blob/bb7368935f659ada117c0889612e379c97eb83b3/bsd/kern/uipc_usrreq.c#L408">bsd/kern/uipc_usrreq.c</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Returns:  0      Success</span>
</span><span class='line'><span class="cm"> *    EINVAL</span>
</span><span class='line'><span class="cm"> *    EOPNOTSUPP</span>
</span><span class='line'><span class="cm"> *    EPIPE</span>
</span><span class='line'><span class="cm"> *    ENOTCONN</span>
</span><span class='line'><span class="cm"> *    EISCONN</span>
</span><span class='line'><span class="cm"> *  unp_internalize:EINVAL</span>
</span><span class='line'><span class="cm"> *  unp_internalize:EBADF</span>
</span><span class='line'><span class="cm"> *  unp_connect:EAFNOSUPPORT  Address family not supported</span>
</span><span class='line'><span class="cm"> *  unp_connect:EINVAL        Invalid argument</span>
</span><span class='line'><span class="cm"> *  unp_connect:ENOTSOCK      Not a socket</span>
</span><span class='line'><span class="cm"> *  unp_connect:ECONNREFUSED  Connection refused</span>
</span><span class='line'><span class="cm"> *  unp_connect:EISCONN       Socket is connected</span>
</span><span class='line'><span class="cm"> *  unp_connect:EPROTOTYPE    Protocol wrong type for socket</span>
</span><span class='line'><span class="cm"> *  unp_connect:???</span>
</span><span class='line'><span class="cm"> *  sbappendaddr:ENOBUFS      [5th argument, contents modified]</span>
</span><span class='line'><span class="cm"> *  sbappendaddr:???          [whatever a filter author chooses]</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">static</span> <span class="kt">int</span>
</span><span class='line'><span class="nf">uipc_send</span><span class="p">(</span><span class="k">struct</span> <span class="n">socket</span> <span class="o">*</span><span class="n">so</span><span class="p">,</span> <span class="kt">int</span> <span class="n">flags</span><span class="p">,</span> <span class="k">struct</span> <span class="n">mbuf</span> <span class="o">*</span><span class="n">m</span><span class="p">,</span> <span class="k">struct</span> <span class="n">sockaddr</span> <span class="o">*</span><span class="n">nam</span><span class="p">,</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">mbuf</span> <span class="o">*</span><span class="n">control</span><span class="p">,</span> <span class="kt">proc_t</span> <span class="n">p</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hey look at that! There&rsquo;s handler for the <code>send</code> syscall (although for IPC, not
TCP) that actually documents that it can return <code>EPROTOTYPE</code>! While it doesn&rsquo;t
explain exactly how this can happen, the fact it mentions <code>unp_connect</code> hints
that <code>uipc_send</code> may trigger a connect, and that&rsquo;s exactly what we find a
couple lines into the function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="p">...</span>
</span><span class='line'>    <span class="cm">/* Connect if not connected yet. */</span>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * Note: A better implementation would complain</span>
</span><span class='line'><span class="cm">     * if not equal to the peer&#39;s address.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">((</span><span class="n">so</span><span class="o">-&gt;</span><span class="n">so_state</span> <span class="o">&amp;</span> <span class="n">SS_ISCONNECTED</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">nam</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">error</span> <span class="o">=</span> <span class="n">unp_connect</span><span class="p">(</span><span class="n">so</span><span class="p">,</span> <span class="n">nam</span><span class="p">,</span> <span class="n">p</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">error</span><span class="p">)</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>  <span class="cm">/* XXX */</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">error</span> <span class="o">=</span> <span class="n">ENOTCONN</span><span class="p">;</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>The fact that the comment says the socket might not be connected yet when we&rsquo;re
doing a <code>send</code> hints that Apple may have introduced some level of asynchrony
and preemption to sockets. So if we trigger the actual connect here, it could
then return <code>EPROTOTYPE</code>, which makes sense. Unfortunately that&rsquo;s still not
quite the behavior we&rsquo;re seeing. We&rsquo;re not getting <code>EPROTOTYPE</code> on our first
write, but after we&rsquo;ve done a couple.</p>

<p>I believe we find that behavior in the actual TCP syscall file,
<a href="https://github.com/opensource-apple/xnu/blob/bb7368935f659ada117c0889612e379c97eb83b3/bsd/netinet/tcp_usrreq.c#L914-L948">bsd/netinet/tcp_usrreq.c</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">static</span> <span class="kt">int</span>
</span><span class='line'><span class="nf">tcp_usr_send</span><span class="p">(</span><span class="k">struct</span> <span class="n">socket</span> <span class="o">*</span><span class="n">so</span><span class="p">,</span> <span class="kt">int</span> <span class="n">flags</span><span class="p">,</span> <span class="k">struct</span> <span class="n">mbuf</span> <span class="o">*</span><span class="n">m</span><span class="p">,</span>
</span><span class='line'>     <span class="k">struct</span> <span class="n">sockaddr</span> <span class="o">*</span><span class="n">nam</span><span class="p">,</span> <span class="k">struct</span> <span class="n">mbuf</span> <span class="o">*</span><span class="n">control</span><span class="p">,</span> <span class="k">struct</span> <span class="n">proc</span> <span class="o">*</span><span class="n">p</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">error</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">inpcb</span> <span class="o">*</span><span class="n">inp</span> <span class="o">=</span> <span class="n">sotoinpcb</span><span class="p">(</span><span class="n">so</span><span class="p">);</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">tcpcb</span> <span class="o">*</span><span class="n">tp</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">uint32_t</span> <span class="n">msgpri</span> <span class="o">=</span> <span class="n">MSG_PRI_DEFAULT</span><span class="p">;</span>
</span><span class='line'><span class="cp">#if INET6</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">isipv6</span><span class="p">;</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>  <span class="n">TCPDEBUG0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">inp</span> <span class="o">==</span> <span class="nb">NULL</span> <span class="o">||</span> <span class="n">inp</span><span class="o">-&gt;</span><span class="n">inp_state</span> <span class="o">==</span> <span class="n">INPCB_STATE_DEAD</span>
</span><span class='line'><span class="cp">#if NECP</span>
</span><span class='line'>    <span class="o">||</span> <span class="p">(</span><span class="n">necp_socket_should_use_flow_divert</span><span class="p">(</span><span class="n">inp</span><span class="p">))</span>
</span><span class='line'><span class="cp">#endif </span><span class="cm">/* NECP */</span><span class="cp"></span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * OOPS! we lost a race, the TCP session got reset after</span>
</span><span class='line'><span class="cm">     * we checked SS_CANTSENDMORE, eg: while doing uiomove or a</span>
</span><span class='line'><span class="cm">     * network interrupt in the non-splnet() section of sosend().</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">m</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>      <span class="n">m_freem</span><span class="p">(</span><span class="n">m</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">control</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">m_freem</span><span class="p">(</span><span class="n">control</span><span class="p">);</span>
</span><span class='line'>      <span class="n">control</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">inp</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>      <span class="n">error</span> <span class="o">=</span> <span class="n">ECONNRESET</span><span class="p">;</span>  <span class="cm">/* XXX EPIPE? */</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">error</span> <span class="o">=</span> <span class="n">EPROTOTYPE</span><span class="p">;</span>
</span><span class='line'>    <span class="n">tp</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="n">TCPDEBUG1</span><span class="p">();</span>
</span><span class='line'>    <span class="k">goto</span> <span class="n">out</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>I believe that comment explains everything we&rsquo;re seeing. If we trigger a <code>send</code>
while the kernel is in the middle of tearing down the socket, it returns
<code>EPROTOTYPE</code>. This then looks to be an error we could retry. Once the socket is
fully torn down, it should eventually return the proper <code>EPIPE</code>. This is also
pretty easy to test. So I modified the inner loop of our C test:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;before send</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">rc</span> <span class="o">=</span> <span class="n">send</span><span class="p">(</span><span class="n">client_fd</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">buf</span><span class="p">),</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;after send: %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">rc</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">rc</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">errno</span> <span class="o">==</span> <span class="n">EPIPE</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">errno</span> <span class="o">==</span> <span class="n">EPROTOTYPE</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">so_type</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">socklen_t</span> <span class="n">so_len</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">so_type</span><span class="p">);</span>
</span><span class='line'>        <span class="n">getsockopt</span><span class="p">(</span><span class="n">client_fd</span><span class="p">,</span> <span class="n">SOL_SOCKET</span><span class="p">,</span> <span class="n">SO_TYPE</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">so_type</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">so_len</span><span class="p">);</span>
</span><span class='line'>        <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;type: %d %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">so_type</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">perror</span><span class="p">(</span><span class="s">&quot;error send&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And yep, it exits cleanly. After all of this, I think it&rsquo;s pretty clear at this
point that there&rsquo;s no weird kernel corruption bug going on, just a poorly
documented edge case. But it sure was fun chasing this condition through the
system.</p>

<p>To prevent anyone else from tripping over this edge case, I filed a Apple Radar
ticket (number #19012087 for any Apple employees reading this). Hopefully if
anyone runs into this mysterious <code>EPROTOTYPE</code> it&rsquo;ll be documented for them, or
at least there&rsquo;s a chance they&rsquo;ll stumble over this blog post and save
themselves a weekend diving through the OS.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rewriting Rust Serialization, Part 2.2: More Benchmarks]]></title>
    <link href="http://erickt.github.io/blog/2014/11/13/benchmarks-2/"/>
    <updated>2014-11-13T09:07:36-08:00</updated>
    <id>http://erickt.github.io/blog/2014/11/13/benchmarks-2</id>
    <content type="html"><![CDATA[<p>Back to the benchmarks! I got some great comments on
<a href="https://www.reddit.com/r/rust/comments/2lzc9n/rust_serialization_part_21_now_with_more/">reddit</a>,
So I wanted to do another post to update my numbers. Here&rsquo;s what I changed:</p>

<ul>
<li>I wasn&rsquo;t consistent on whether or not the serialization benchmarks included
Some tests are including the allocation of a buffer to write into. I&rsquo;ve
  changed it so most are reusing one, which speeds everything up (especially
capnproto-rust!). This does depend on
<a href="https://github.com/rust-lang/rust/pull/18885">#18885</a> landing though.</li>
<li>I&rsquo;ve added <a href="https://github.com/TyOverby/bincode">bincode</a>, which serializes
values as raw bytes. Quite speedy too! Not nearly as fast as Cap&#8217;n Proto though.</li>
<li>I&rsquo;ve changed <code>C++</code> and <code>Rust</code> JSON tests to serialize enums as uints.</li>
<li>I added the time it takes to create the populate the structures. I&rsquo;m betting
  the reason the Rust numbers are so high is that we&rsquo;re allocating strings. Not
sure if the other languages are able to avoid that allocation.</li>
</ul>


<hr />

<p>JSON:</p>

<table>
<thead>
<tr>
<th> language </th>
<th> library         </th>
<th> population (ns) </th>
<th> serialization (MB/s) </th>
<th> deserialization (MB/s) </th>
</tr>
</thead>
<tbody>
<tr>
<td> Rust     </td>
<td> serialize::json </td>
<td> 1127            </td>
<td> 117                  </td>
<td> 26                     </td>
</tr>
<tr>
<td> C++      </td>
<td> rapidjson (dom) </td>
<td> 546             </td>
<td> 281                  </td>
<td> 144                    </td>
</tr>
<tr>
<td> C++      </td>
<td> rapidjson (dom) </td>
<td> 546             </td>
<td> 281                  </td>
<td> 181                    </td>
</tr>
<tr>
<td> Go       </td>
<td> encoding/json   </td>
<td> 343             </td>
<td> 63.99                </td>
<td> 22.46                  </td>
</tr>
<tr>
<td> Go       </td>
<td> ffjson          </td>
<td> 343             </td>
<td> 144.60               </td>
<td> (not supported)        </td>
</tr>
</tbody>
</table>


<hr />

<p>Cap&#8217;n Proto:</p>

<table>
<thead>
<tr>
<th> language </th>
<th> library                   </th>
<th> population (ns) </th>
<th> serialization (MB/s) </th>
<th> deserialization (MB/s) </th>
</tr>
</thead>
<tbody>
<tr>
<td> Rust     </td>
<td> capnproto-rust (unpacked) </td>
<td> 325             </td>
<td> 4977                 </td>
<td> 2251                   </td>
</tr>
<tr>
<td> Rust     </td>
<td> capnproto-rust (packed)   </td>
<td> 325             </td>
<td> 398                  </td>
<td> 246                    </td>
</tr>
<tr>
<td> Go       </td>
<td> go-capnproto              </td>
<td> 2368            </td>
<td> 2226.71              </td>
<td> 450                    </td>
</tr>
<tr>
<td> Go       </td>
<td> go-capnproto (zero copy)  </td>
<td> 2368            </td>
<td> 2226.71              </td>
<td> 1393.3                 </td>
</tr>
</tbody>
</table>


<hr />

<p>Protocol Buffers:</p>

<table>
<thead>
<tr>
<th> language </th>
<th> library       </th>
<th> population (ns) </th>
<th> serialization (MB/s) </th>
<th> deserialization (MB/s) </th>
</tr>
</thead>
<tbody>
<tr>
<td> Rust     </td>
<td> rust-protobuf </td>
<td> 1041            </td>
<td> 370                  </td>
<td> 118                    </td>
</tr>
<tr>
<td> Go       </td>
<td> goprotobuf    </td>
<td> 1133            </td>
<td> 138.27               </td>
<td> 91.18                  </td>
</tr>
<tr>
<td> Go       </td>
<td> gogoprotobuf  </td>
<td> 343             </td>
<td> 472.69               </td>
<td> 295.33                 </td>
</tr>
</tbody>
</table>


<hr />

<p>Misc:</p>

<table>
<thead>
<tr>
<th> language </th>
<th> library      </th>
<th> population (ns) </th>
<th> serialization (MB/s) </th>
<th> deserialization (MB/s) </th>
</tr>
</thead>
<tbody>
<tr>
<td> Rust     </td>
<td> rust-msgpack </td>
<td> 1143            </td>
<td> 454                  </td>
<td> 144                    </td>
</tr>
<tr>
<td> Rust     </td>
<td> bincode      </td>
<td> 1143            </td>
<td> 1149                 </td>
<td> 82                     </td>
</tr>
</tbody>
</table>


<p>Anyone want to add more C/Go/Rust/Java/etc benchmarks?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rewriting Rust Serialization, Part 2.1: Benchmarks]]></title>
    <link href="http://erickt.github.io/blog/2014/11/11/benchmarks/"/>
    <updated>2014-11-11T08:11:34-08:00</updated>
    <id>http://erickt.github.io/blog/2014/11/11/benchmarks</id>
    <content type="html"><![CDATA[<p>After <a href="http://erickt.github.io/blog/2014/11/03/performance/">part 2</a> I received
a couple requests to add in a couple other rust serialization libraries. So one
thing led to another, and now I&rsquo;ve got a benchmark suite I&rsquo;m calling
<a href="https://github.com/erickt/rust-serialization-benchmarks">rust-serialization-benchmarks</a>.
Really creative name, eh? This includes all the other benchmarks I referred to
previously, as well as <a href="https://github.com/dwrensha/capnproto-rust">capnproto</a>,
<a href="https://github.com/mneumann/rust-msgpack">msgpack</a>, and
<a href="https://github.com/stepancheg/rust-protobuf">protobuf</a>.</p>

<table>
<thead>
<tr>
<th> language </th>
<th> library             </th>
<th> format                  </th>
<th> serialization (MB/s) </th>
<th> deserialization (MB/s)   </th>
</tr>
</thead>
<tbody>
<tr>
<td> C++      </td>
<td> rapidjson           </td>
<td> JSON (dom)              </td>
<td> 233                  </td>
<td> 102                      </td>
</tr>
<tr>
<td> C++      </td>
<td> rapidjson           </td>
<td> JSON (sax)              </td>
<td> 233                  </td>
<td> 124                      </td>
</tr>
<tr>
<td> Go       </td>
<td> encoding/json       </td>
<td> JSON                    </td>
<td> 54.93                </td>
<td> 16.72                    </td>
</tr>
<tr>
<td> Go       </td>
<td> ffjson              </td>
<td> JSON                    </td>
<td> 126.40               </td>
<td> (not supported)          </td>
</tr>
<tr>
<td> Go       </td>
<td> goprotobuf          </td>
<td> Protocol Buffers        </td>
<td> 138.27               </td>
<td> 91.18                    </td>
</tr>
<tr>
<td> Go       </td>
<td> gogoprotobuf        </td>
<td> Protocol Buffers        </td>
<td> 472.69               </td>
<td> 295.33                   </td>
</tr>
<tr>
<td> Go       </td>
<td> go-capnproto        </td>
<td> Cap&#8217;n Proto             </td>
<td> 2226.71              </td>
<td> 450                      </td>
</tr>
<tr>
<td> Go       </td>
<td> go-capnproto        </td>
<td> Cap&#8217;n Proto (zero copy) </td>
<td> 2226.71              </td>
<td> 1393.3                   </td>
</tr>
<tr>
<td> Rust     </td>
<td> serialize::json     </td>
<td> JSON                    </td>
<td> 89                   </td>
<td> 18                       </td>
</tr>
<tr>
<td> Rust     </td>
<td> rust-msgpack        </td>
<td> MessagePack             </td>
<td> 160                  </td>
<td> 52                       </td>
</tr>
<tr>
<td> Rust     </td>
<td> rust-protobuf       </td>
<td> Protocol Buffers        </td>
<td> 177                  </td>
<td> 70                       </td>
</tr>
<tr>
<td> Rust     </td>
<td> capnproto-rust      </td>
<td> Cap&#8217;n Proto (unpacked)  </td>
<td> 1729                 </td>
<td> 1276                     </td>
</tr>
<tr>
<td> Rust     </td>
<td> capnproto-rust      </td>
<td> Cap&#8217;n Proto (packed)    </td>
<td> 398                  </td>
<td> 246                      </td>
</tr>
</tbody>
</table>


<p>I upgraded to OS X Yosemite, so I think that brought these numbers down overall
from the last post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rewriting Rust Serialization, Part 2: Performance]]></title>
    <link href="http://erickt.github.io/blog/2014/11/03/performance/"/>
    <updated>2014-11-03T06:38:38-08:00</updated>
    <id>http://erickt.github.io/blog/2014/11/03/performance</id>
    <content type="html"><![CDATA[<p>As I said in the <a href="http://erickt.github.io/blog/2014/10/28/serialization/">last post</a>,
Rust&rsquo;s <code>serialize</code> library, specifically <code>serialize::json</code> is pretty slow.
Back when I started this project a number of months ago, I wanted to benchmark
to see how we compared to some other languages. There are a bunch of JSON
benchmarks, but the one I chose was Cloudflare&rsquo;s Go language.
<a href="https://github.com/cloudflare/goser">Goser</a>, mainly because it was using a
complex real world log structure, and they did the hard work of implementing
benchmarks for <a href="http://golang.org/pkg/encoding/json">encoding/json</a>,
<a href="http://code.google.com/p/goprotobuf/">goprotobuf</a>,
<a href="http://code.google.com/p/gogoprotobuf/">gogoprotobuf</a>, and
<a href="https://github.com/glycerine/go-capnproto">go-capnproto</a>. I also included the
Go <a href="https://github.com/pquerna/ffjson">ffjson</a> and C++
<a href="https://github.com/erickt/rapidjson/blob/master/log.cc">rapidjson</a>, which
both claim to be the fastest JSON libraries for those languages. Here are the
results I got:</p>

<table>
<thead>
<tr>
<th> language </th>
<th> library             </th>
<th> format           </th>
<th> serialization (MB/s) </th>
<th> deserialization (MB/s) </th>
</tr>
</thead>
<tbody>
<tr>
<td> C++      </td>
<td> rapidjson           </td>
<td> JSON             </td>
<td> 294                  </td>
<td> 164 (DOM) / 192 (SAX)  </td>
</tr>
<tr>
<td> Go       </td>
<td> encoding/json       </td>
<td> JSON             </td>
<td> 71.47                </td>
<td> 25.09                  </td>
</tr>
<tr>
<td> Go       </td>
<td> ffjson              </td>
<td> JSON             </td>
<td> 156.67               </td>
<td> (not supported)        </td>
</tr>
<tr>
<td> Go       </td>
<td> goprotobuf          </td>
<td> Protocol Buffers </td>
<td> 148.78               </td>
<td> 99.57                  </td>
</tr>
<tr>
<td> Go       </td>
<td> gogoprotobuf        </td>
<td> Protocol Buffers </td>
<td> 519.48               </td>
<td> 319.40                 </td>
</tr>
<tr>
<td> Go       </td>
<td> go-capnproto        </td>
<td> Cap&#8217;n Proto      </td>
<td> 3419.54              </td>
<td> 665.35                 </td>
</tr>
<tr>
<td> Rust     </td>
<td> serialize::json     </td>
<td> JSON             </td>
<td> 40-ish               </td>
<td> 10-ish                 </td>
</tr>
</tbody>
</table>


<p>Notes:</p>

<ul>
<li><code>rapidjson</code> supports both DOM-style and SAX-style deserializing. DOM-style
means deserializing into a generic object, then from there into the final
object, SAX-style means a callback approach where a callback handler is
called for each JSON token.</li>
<li>Go&rsquo;s <code>encoding/json</code> uses reflection to serialize arbitrary values. <code>ffjson</code>
uses code generation to get it&rsquo;s serialization sped, but it doesn&rsquo;t implement
deserialization.</li>
<li>both <code>goprotobuf</code> and <code>gogoprotobuf</code> use code generation, but gogoprotobuf
uses Protocol Buffer&rsquo;s extension support to do cheaper serialization.</li>
<li>Cap&#8217;n Proto doesn&rsquo;t really do serialization, but lays the serialized data out
just like it is in memory so it has nearly zero serialization speed.</li>
<li>The Rust numbers are from a couple months ago and I couldn&rsquo;t track down
the exact numbers.</li>
</ul>


<p>So. Yikes. Not only are we no where near <code>rapidjson</code>, we were being soundly
beaten by Go&rsquo;s reflection-based framework <code>encoding/json</code>.  Even worse, our
compile time was at least 10 times theirs. So, not pretty at all.</p>

<p>But that was a couple months ago. Between then and now, Patrick Walton, Luqman
Aden, myself, and probably lots others found and fixed a number of bugs across
<code>serialize::json</code>, <code>std::io</code>, generic function calls, and more. All this work
got us to more than double our performance:</p>

<table>
<thead>
<tr>
<th> language </th>
<th> library           </th>
<th> format               </th>
<th> serialization (MB/s)   </th>
<th> deserialization (MB/s) </th>
</tr>
</thead>
<tbody>
<tr>
<td> Rust     </td>
<td> serialize::json   </td>
<td> JSON                 </td>
<td> 117                    </td>
<td> 25                     </td>
</tr>
</tbody>
</table>


<p>We&rsquo;re (kind of) beating Go! At least the builtin reflection-based solution.
Better, but not great. I think our challenge is those dang closures. While LLVM
can optimize simple closures, it seems to have a lot of trouble with all these
recursive closure calls. While having finished unboxed closures might finally
let us break through this performance bottleneck, it&rsquo;s not guaranteed.</p>

<p>All in all, this, and the representational problems from
<a href="http://erickt.github.io/blog/2014/10/28/serialization/">post 1</a> make it pretty
obvious we got some fundamental issues here and we need to use an alternative
solution. Next post I&rsquo;ll start getting into the details of the design of
<a href="https://github.com/erickt/rust-serde">serde</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rewriting Rust Serialization, Part 1]]></title>
    <link href="http://erickt.github.io/blog/2014/10/28/serialization/"/>
    <updated>2014-10-28T08:52:18-07:00</updated>
    <id>http://erickt.github.io/blog/2014/10/28/serialization</id>
    <content type="html"><![CDATA[<p>Hello everybody! It&rsquo;s been, what, <em>two</em> years since I last blogged? Not my best
performance, I&rsquo;m sorry to say. So for all of my 3 pageviews that are probably
bots, I appologize for such a long delay on updating my blog. I got to say I&rsquo;ve
been pretty inspired by the great <a href="http://jvns.ca/">Julia Evans</a> (who I hope we
can someday get back to working on rust stuff). She&rsquo;s an epic blogger, and I
hope I can get somewhere near that speed.</p>

<p>Anyway, on to the post. My main on-again-off-again project this past year has
been working Rust&rsquo;s generic <a href="http://doc.rust-lang.org/serialize/">serialize</a>
library. If you haven&rsquo;t played with it yet, it&rsquo;s really nifty. It&rsquo;s a generic
framework that allows a generic <code>Encoder</code> serialize a generic <code>Encodable</code>, and
the inverse with <code>Decoder</code> and <code>Decodable</code>. This allows you to write just one
<code>Encodable</code> impl that can transparently work with our
<a href="http://doc.rust-lang.org/serialize/">json</a> library,
<a href="https://github.com/mneumann/rust-msgpack">msgpack</a>,
<a href="https://github.com/alexcrichton/toml-rs">toml</a>, and etc. It&rsquo;s simple to use
too in most cases as you can use <code>#[deriving(Encodable, Decodable)]</code> to
automatically create a implementation for your type. Here&rsquo;s an example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">extern</span> <span class="n">crate</span> <span class="n">serialize</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">use</span> <span class="n">serialize</span><span class="o">::</span><span class="n">json</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#[deriving(Encodable, Decodable, Show)]</span>
</span><span class='line'><span class="k">struct</span> <span class="n">Employee</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">name</span><span class="o">:</span> <span class="n">String</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#[deriving(Encodable, Decodable, Show)]</span>
</span><span class='line'><span class="k">struct</span> <span class="n">Company</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">employees</span><span class="o">:</span> <span class="n">Vec</span><span class="o">&lt;</span><span class="n">Employee</span><span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">company</span> <span class="o">=</span> <span class="n">Company</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">employees</span><span class="o">:</span> <span class="n">vec</span><span class="o">!</span><span class="p">[</span>
</span><span class='line'>            <span class="n">Employee</span> <span class="p">{</span> <span class="n">name</span><span class="o">:</span> <span class="s">&quot;Dan&quot;</span><span class="p">.</span><span class="n">to_string</span><span class="p">()</span> <span class="p">},</span>
</span><span class='line'>            <span class="n">Employee</span> <span class="p">{</span> <span class="n">name</span><span class="o">:</span> <span class="s">&quot;Erin&quot;</span><span class="p">.</span><span class="n">to_string</span><span class="p">()</span> <span class="p">},</span>
</span><span class='line'>            <span class="n">Employee</span> <span class="p">{</span> <span class="n">name</span><span class="o">:</span> <span class="s">&quot;Jeff&quot;</span><span class="p">.</span><span class="n">to_string</span><span class="p">()</span> <span class="p">},</span>
</span><span class='line'>            <span class="n">Employee</span> <span class="p">{</span> <span class="n">name</span><span class="o">:</span> <span class="s">&quot;Spencer&quot;</span><span class="p">.</span><span class="n">to_string</span><span class="p">()</span> <span class="p">},</span>
</span><span class='line'>        <span class="p">],</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">let</span> <span class="n">s</span> <span class="o">=</span> <span class="n">json</span><span class="o">::</span><span class="n">encode</span><span class="p">(</span><span class="o">&amp;</span><span class="n">company</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">company</span><span class="o">:</span> <span class="n">Company</span> <span class="o">=</span> <span class="n">json</span><span class="o">::</span><span class="n">decode</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">as_slice</span><span class="p">()).</span><span class="n">unwrap</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>There are some downsides to serialize though. Manually implementing can be a
bit of a pain. Here&rsquo;s the example from before:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">impl</span><span class="o">&lt;</span><span class="n">S</span><span class="o">:</span> <span class="n">Encoder</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">E</span><span class="o">&gt;</span> <span class="n">Encodable</span><span class="o">&lt;</span><span class="n">S</span><span class="p">,</span> <span class="n">E</span><span class="o">&gt;</span> <span class="k">for</span> <span class="n">Employee</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fn</span> <span class="n">encode</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">,</span> <span class="n">s</span><span class="o">:</span> <span class="o">&amp;</span><span class="k">mut</span> <span class="n">S</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">Result</span><span class="o">&lt;</span><span class="p">(),</span> <span class="n">E</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">match</span> <span class="o">*</span><span class="bp">self</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">Employee</span> <span class="p">{</span> <span class="n">name</span><span class="o">:</span> <span class="k">ref</span> <span class="n">name</span> <span class="p">}</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">s</span><span class="p">.</span><span class="n">emit_struct</span><span class="p">(</span><span class="s">&quot;Employee&quot;</span><span class="p">,</span> <span class="mi">1</span><span class="k">u</span><span class="p">,</span> <span class="o">|</span><span class="n">s</span><span class="o">|</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">s</span><span class="p">.</span><span class="n">emit_struct_field</span><span class="p">(</span><span class="s">&quot;name&quot;</span><span class="p">,</span> <span class="mi">0</span><span class="k">u</span><span class="p">,</span> <span class="o">|</span><span class="n">s</span><span class="o">|</span> <span class="n">name</span><span class="p">.</span><span class="n">encode</span><span class="p">(</span><span class="n">s</span><span class="p">))</span>
</span><span class='line'>                <span class="p">})</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">impl</span><span class="o">&lt;</span><span class="n">D</span><span class="o">:</span> <span class="n">Decoder</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">E</span><span class="o">&gt;</span> <span class="n">Decodable</span><span class="o">&lt;</span><span class="n">D</span><span class="p">,</span> <span class="n">E</span><span class="o">&gt;</span> <span class="k">for</span> <span class="n">Employee</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fn</span> <span class="n">decode</span><span class="p">(</span><span class="n">d</span><span class="o">:</span> <span class="o">&amp;</span><span class="k">mut</span> <span class="n">D</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">Result</span><span class="o">&lt;</span><span class="n">Employee</span><span class="p">,</span> <span class="n">E</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">d</span><span class="p">.</span><span class="n">read_struct</span><span class="p">(</span><span class="s">&quot;Employee&quot;</span><span class="p">,</span> <span class="mi">1</span><span class="k">u</span><span class="p">,</span> <span class="o">|</span><span class="n">d</span><span class="o">|</span> <span class="p">{</span>
</span><span class='line'>            <span class="nb">Ok</span><span class="p">(</span><span class="n">Employee</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">name</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">try</span><span class="o">!</span><span class="p">(</span><span class="n">d</span><span class="p">.</span><span class="n">read_struct_field</span><span class="p">(</span><span class="s">&quot;name&quot;</span><span class="p">,</span> <span class="mi">0</span><span class="k">u</span><span class="p">,</span> <span class="o">|</span><span class="n">d</span><span class="o">|</span> <span class="p">{</span>
</span><span class='line'>                        <span class="n">Decodable</span><span class="o">::</span><span class="n">decode</span><span class="p">(</span><span class="n">d</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">}))</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">})</span>
</span><span class='line'>        <span class="p">})</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, parsing compound structures requires these recursive closure
calls in order to perform the handshake between the <code>Encoder</code> and the
<code>Encodable</code>. A couple people have run into bugs in the past where they didn&rsquo;t
implement this pattern, which results in some confusing bugs. Furthermore, LLVM
isn&rsquo;t great at inlining these recursive calls, so <code>serialize</code> impls tend to not
perform well.</p>

<p>That&rsquo;s not the worst of it though. The real problem is that there are types
that can implement <code>Encodable</code>, there&rsquo;s no way to write a <code>Decodable</code>
implementation. They&rsquo;re pretty common too. For example, the
<code>serialize::json::Json</code> type:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">pub</span> <span class="k">enum</span> <span class="n">Json</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">I64</span><span class="p">(</span><span class="kt">i64</span><span class="p">),</span>
</span><span class='line'>    <span class="n">U64</span><span class="p">(</span><span class="kt">u64</span><span class="p">),</span>
</span><span class='line'>    <span class="n">F64</span><span class="p">(</span><span class="kt">f64</span><span class="p">),</span>
</span><span class='line'>    <span class="n">String</span><span class="p">(</span><span class="n">string</span><span class="o">::</span><span class="n">String</span><span class="p">),</span>
</span><span class='line'>    <span class="n">Boolean</span><span class="p">(</span><span class="kt">bool</span><span class="p">),</span>
</span><span class='line'>    <span class="n">List</span><span class="p">(</span><span class="n">JsonList</span><span class="p">),</span>
</span><span class='line'>    <span class="n">Object</span><span class="p">(</span><span class="n">JsonObject</span><span class="p">),</span>
</span><span class='line'>    <span class="n">Null</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">pub</span> <span class="k">type</span> <span class="n">JsonList</span> <span class="o">=</span> <span class="n">Vec</span><span class="o">&lt;</span><span class="n">Json</span><span class="o">&gt;</span><span class="p">;</span>
</span><span class='line'><span class="k">pub</span> <span class="k">type</span> <span class="n">JsonObject</span> <span class="o">=</span> <span class="n">TreeMap</span><span class="o">&lt;</span><span class="n">string</span><span class="o">::</span><span class="n">String</span><span class="p">,</span> <span class="n">Json</span><span class="o">&gt;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>Json</code> value can represent any value that&rsquo;s in a JSON string. Implied in
this is the notion that the <code>Decodable</code> has to look ahead to see what the next
value is so it can decide which <code>Json</code> variant to construct. Unfortunately our
current <code>Decoder</code> infrastructure doesn&rsquo;t support lookahead. The way the
<code>Decoder</code>/<code>Decodable</code> handshake works is essentially:</p>

<ul>
<li><code>Decodable</code> asks for a struct named <code>"Employee"</code>.</li>
<li><code>Decodable</code> asks for a field named <code>"name"</code>.</li>
<li><code>Decodable</code> asks for a value of type <code>String</code>.</li>
<li><code>Decodable</code> asks for a field named <code>"age"</code>.</li>
<li><code>Decodable</code> asks for a value of type <code>uint</code>.</li>
<li>&hellip;</li>
</ul>


<p>Any deviation from this pattern results in an error. There isn&rsquo;t a way for the
<code>Decodable</code> to ask what is the type of the next value, so this is why we
serialize generic enums by explicitly tagging the variant, as in:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">extern</span> <span class="n">crate</span> <span class="n">serialize</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">use</span> <span class="n">serialize</span><span class="o">::</span><span class="n">json</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#[deriving(Encodable, Decodable, Show)]</span>
</span><span class='line'><span class="k">enum</span> <span class="n">Animal</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Dog</span><span class="p">(</span><span class="kt">uint</span><span class="p">),</span>
</span><span class='line'>    <span class="n">Frog</span><span class="p">(</span><span class="n">String</span><span class="p">,</span> <span class="kt">uint</span><span class="p">),</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">animal</span> <span class="o">=</span> <span class="n">Frog</span><span class="p">(</span><span class="s">&quot;Frank&quot;</span><span class="p">.</span><span class="n">to_string</span><span class="p">(),</span> <span class="mi">349</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">let</span> <span class="n">s</span> <span class="o">=</span> <span class="n">json</span><span class="o">::</span><span class="n">encode</span><span class="p">(</span><span class="o">&amp;</span><span class="n">animal</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{}&quot;</span><span class="p">,</span> <span class="n">s</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// prints {&quot;variant&quot;:&quot;Frog&quot;,&quot;fields&quot;:[&quot;Frank&quot;,349]}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s probably good enough for now. In my next post I&rsquo;ll go into in my
approach to fix this in <a href="https://github.com/erickt/rust-serde">serde</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rust for Ragel]]></title>
    <link href="http://erickt.github.io/blog/2012/07/29/rust-for-ragel/"/>
    <updated>2012-07-29T10:20:00-07:00</updated>
    <id>http://erickt.github.io/blog/2012/07/29/rust-for-ragel</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve written a bunch of simple parsers for Rust, and it&rsquo;s starting to get a
little obnoxious. So I added a Rust backend to the
<a href="http://www.complang.org/ragel/">Ragel State Machine Compiler</a>.
You can find my fork <a href="https://github.com/erickt/ragel">here</a>. I&rsquo;m waiting for
Rust to stablize before I try to push it upstream.</p>

<p>Ragel is a rather neat way of writing simple parsers. In some ways it&rsquo;s pretty
similar to Lex, but Ragel also allows you execute arbitrary code at any point
in the state machine. Furthermore, this arbitrary code can manipulate the state
machine itself, so it can be used in many places you&rsquo;d traditionally need a
full parser, such as properly handling parentheses.</p>

<p>Here&rsquo;s an example of a <code>atoi</code> function:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>%%{
</span><span class='line'>machine atoi;
</span><span class='line'>
</span><span class='line'>action see_neg   { neg = true; }
</span><span class='line'>action add_digit { res = res * 10 + (fc as int - '0' as int); }
</span><span class='line'>
</span><span class='line'>main :=
</span><span class='line'>    ( '-' @see_neg | '+' )? ( digit @add_digit )+
</span><span class='line'>    '\n'?
</span><span class='line'>;
</span><span class='line'>
</span><span class='line'>write data;
</span><span class='line'>}%%
</span><span class='line'>
</span><span class='line'>fn atoi(data: ~str) -&gt; option&lt;int&gt; {
</span><span class='line'>    let mut neg = false;
</span><span class='line'>    let mut res = 0;
</span><span class='line'>
</span><span class='line'>    // Ragel assumes that it will be iterating over a value called data, but we
</span><span class='line'>    // need to tell ragel where to start (p) and end (pe) parsing.
</span><span class='line'>    let mut p = 0;
</span><span class='line'>    let mut pe = data.len();
</span><span class='line'>
</span><span class='line'>    // This is the current state in the state machine.
</span><span class='line'>    let mut cs: int;
</span><span class='line'>
</span><span class='line'>    write init;
</span><span class='line'>    write exec;
</span><span class='line'>
</span><span class='line'>    if neg { res = -1 * res; }
</span><span class='line'>
</span><span class='line'>    // If we stopped before we hit one of the exit states, then there must have
</span><span class='line'>    // been an error of some sort.
</span><span class='line'>    if cs &lt; atoi_first_final {
</span><span class='line'>        none
</span><span class='line'>    } else {
</span><span class='line'>        some(res)
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>While this is probably a bit more verbose than writing <code>atoi</code> by hand, it does
make the grammar pretty explicit, which can help keep it accurate.</p>

<p>Unfortunately there are some pretty severe performance issues at the moment.
Ragel supports two state machine styles, table-driven and goto-driven. My
backend uses tables, but since Rust doesn&rsquo;t yet support global constant
vectors, I need to malloc the state machine table on every function call. This
results in the <a href="https://github.com/erickt/ragel/blob/rust/examples/rust/url.rl">ragel-based url
parser</a> being about
10 times slower than the equivalent table-based parser in OCaml. You can see
the generated code <a href="https://gist.github.com/3200980">here</a>.</p>

<p>The <code>goto</code> route could be promising to explore. We could simulate it using
mutually recursive function calls. OCaml does this. But again, since Rust
doesn&rsquo;t support tailcalls (and may
<a href="https://github.com/mozilla/rust/issues/217">ever</a>), we could run into a stack
explosion. It may work well for small grammars though, and maybe LLVM could
optimize calls into tailcalls.</p>

<p>Unless I&rsquo;m doing something glaringly wrong, it seems likely that we are going
to need some compiler help before these performance issues get solved.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Meal, Ready-to-Eat: A Web Framework for Rust]]></title>
    <link href="http://erickt.github.io/blog/2012/07/05/meal-ready-to-eat-a-web-framework-for-rust/"/>
    <updated>2012-07-05T08:55:00-07:00</updated>
    <id>http://erickt.github.io/blog/2012/07/05/meal-ready-to-eat-a-web-framework-for-rust</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been putting this off for far too long. For the last three months I&rsquo;ve
been working on <a href="https://github.com/erickt/mre">Meal, Ready-to-Eat</a>, a web
framework for the <a href="http://rust-lang.org">Rust programming language</a>. I call it
MRE. Rust didn&rsquo;t have a TCP stack when I started the project, so instead I
built MRE on top of <a href="http://mongrel2.org">Mongrel2</a>. It talks
<a href="http://zeromq.org">Zeromq</a>, so I could get something up pretty quickly. It&rsquo;s
inspired by <a href="http://www.sinatrarb.com/">Sinatra</a> and
<a href="http://expressjs.com/">Express.js</a>.  So take all this code with a grain of
salt. The design is very much in flux and there are some pretty rough edges.
Better to release early and get feedback though, right?</p>

<p>One word of warning though. Rust&rsquo;s syntax and semantics are still in flux, so
it&rsquo;s quite possible this blog post will be out of date by the time you read it.</p>

<h2>Hello World</h2>

<p>Let&rsquo;s start with the classic Hello World app. You can find the full example
<a href="https://github.com/erickt/mre/blob/master/examples/helloworld/helloworld.rs">here</a>.
This example is a little more verbose than frameworks like Sinatra and Express,
and not just because Rust is statically typed. Those other frameworks take
advantage of global variables and static initializers, but Rust doesn&rsquo;t, so we
have to make due with some boilerplate code.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>let mre = mre::mre(
</span><span class='line'>      // Create a zeromq context that MRE will use to talk to Mongrel2.
</span><span class='line'>      alt zmq::init(1) {
</span><span class='line'>          ok(ctx) { ctx }
</span><span class='line'>          err(e) { fail e.to_str() }
</span><span class='line'>      },
</span><span class='line'>
</span><span class='line'>      // A UUID for this Mongrel2 backend.
</span><span class='line'>      some("E4B7CE14-E7F7-43EE-A3E6-DB7B0A0C106F"),
</span><span class='line'>
</span><span class='line'>      // The addresses to receive requests from.
</span><span class='line'>      ~["tcp://127.0.0.1:9996"],
</span><span class='line'>
</span><span class='line'>      // The addresses to send responses to.
</span><span class='line'>      ~["tcp://127.0.0.1:9997"],
</span><span class='line'>
</span><span class='line'>      // Create our middleware, which preproceses requests and
</span><span class='line'>      // responses. For now we'll just use the logger.
</span><span class='line'>      ~[mre::middleware::logger(io::stdout())],
</span><span class='line'>
</span><span class='line'>      // A function to create per-request data. This can be used by
</span><span class='line'>      // middleware like middleware::session to automatically look
</span><span class='line'>      // up the current user and session data in the database. We don't
</span><span class='line'>      // need it for this example, so just return a unit value.
</span><span class='line'>      || ()
</span><span class='line'>);</span></code></pre></td></tr></table></div></figure>


<p>Eventually I would like to pull the Mongrel2 settings out into a separate
config file, so it should get a little more slim in the future. Once we have an
<code>mre</code> value, we can define some routes.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>do mre.get("^/$") |_req, rep, _m| {
</span><span class='line'>      rep.reply_html(200u,
</span><span class='line'>              "&lt;html&gt;\n" +
</span><span class='line'>              "&lt;body&gt;\n" +
</span><span class='line'>              "&lt;h1&gt;Hello world!&lt;/h1&gt;\n" + 
</span><span class='line'>              "&lt;/body&gt;\n" +
</span><span class='line'>              "&lt;/html&gt;")
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Routes are defined much like Sinatra. You&rsquo;ll find helpers for all the HTTP/1.1
methods. These method handlers take two arguments. The first is a PCRE regular
expression, which may have capture clauses, the second a response handler
closure. Whenever a request comes for a path that accesses this matching
handler, the closure will be called with a <code>mre::request</code>, <code>mre::response</code>, and
the regex match object. <code>mre::request</code> values, obviously, contain all the data
relevant for a given request. Most important the headers and the body.
<code>mre::response</code> values handle sending responses back to the client.</p>

<p>Finally, we start the MRE event loop, and we&rsquo;re off.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mre.run();</span></code></pre></td></tr></table></div></figure>


<h2>Models</h2>

<p>MRE also comes with a basic database support, built on top of
<a href="http://elasticsearch.org">Elasticsearch</a>. Sure it&rsquo;s technically a a fulltext
search engine, but it also works quite well as a JSON object store. Plus,
there&rsquo;s a <a href="https://github.com/tlrx/transport-zeromq">Zeromq plugin</a>, so it was
pretty easy to plug it into MRE.  The plugin can be a bit of a pain to set up,
however, so I wrote up some directions for that
<a href="https://github.com/erickt/rust-elasticsearch">here</a>.</p>

<p>Let&rsquo;s rewrite our Hello World app to be a bit more interactive. Rather than
just saying Hello World, let&rsquo;s greet anyone who asks (Source is
<a href="https://github.com/erickt/mre/blob/master/examples/helloeveryone">here</a>).
Before we begin with the MRE code, we need to create our Elasticsearch index:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -XPOST "http://localhost:9200/helloeveryone" -d '{
</span><span class='line'>  "settings": {
</span><span class='line'>    "index.number_of_shards": 1,
</span><span class='line'>    "index.number_of_replicas": 0
</span><span class='line'>  },
</span><span class='line'>  "mappings": {
</span><span class='line'>    "person": {
</span><span class='line'>      "properties": {
</span><span class='line'>        "timestamp": {"type": "date", "index": "not_analyzed"},
</span><span class='line'>        "name": {"type": "string", "index": "not_analyzed"}
</span><span class='line'>      }
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>}'</span></code></pre></td></tr></table></div></figure>


<p>Next, lets make a model of all the people we&rsquo;ll greet. At it&rsquo;s heart, a
model is just a JSON object with some helper functions. Unfortunately Rust
still has some ways to go before we can write really clean models. There is no
support for inheritance or mixin classes, so we need to duplicate some code in
all the models. Also, our constructors are not that featureful. We don&rsquo;t
support mulitple constructors, nor is there a way to make a constructor
private. Fortunately we can hack our way to the API we want.</p>

<p>So enough preamble, lets see this in action. Below is our <code>person</code> model:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class _person {
</span><span class='line'>    let model: model;
</span><span class='line'>
</span><span class='line'>    new(model: model) {
</span><span class='line'>        self.model = model;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    fn id() -&gt; @str {
</span><span class='line'>        self.model._id
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    fn timestamp() -&gt; @str {
</span><span class='line'>        self.model.get_str("timestamp")
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    fn set_timestamp(timestamp: @str) -&gt; bool {
</span><span class='line'>        self.model.set_str("timestamp", timestamp)
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    fn name() -&gt; @str {
</span><span class='line'>        self.model.get_str("name")
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    fn set_name(name: @str) -&gt; bool {
</span><span class='line'>        self.model.set_str("name", name)
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    fn create() -&gt; result&lt;(), error&gt; {
</span><span class='line'>        self.model.create()
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    fn save() -&gt; result&lt;(), error&gt; {
</span><span class='line'>        self.model.save()
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    fn delete() {
</span><span class='line'>        self.model.delete()
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>type person = _person;</span></code></pre></td></tr></table></div></figure>


<p>In order to work around not having private constructors, we create a class
called <code>_person</code>, which is then aliased to <code>person</code>. If we don&rsquo;t export
<code>_person</code>, then our constructor is effectively hidden.</p>

<p>Next, here&rsquo;s how to create and find the <code>person</code> models:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// Create a new person model.
</span><span class='line'>fn person(es: client, name: @str) -&gt; person {
</span><span class='line'>    // Create a person. We'll store the model in the ES index named
</span><span class='line'>    // "helloeveryone", under the type "person". We'd like ES to make the index
</span><span class='line'>    // for us, so we leave the id blank.
</span><span class='line'>    let person = _person(model(es, @"helloeveryone", @"person", @""));
</span><span class='line'>
</span><span class='line'>    person.set_name(name);
</span><span class='line'>    person.set_timestamp(@time::now().rfc3339());
</span><span class='line'>
</span><span class='line'>    person
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>// Return the last 50 people we have said hello to.
</span><span class='line'>fn last_50(es: client) -&gt; [person] {
</span><span class='line'>    // This query can be a little complicated for those who have never used
</span><span class='line'>    // elasticsearch. All it says is that we want to fetch 50 documents on the
</span><span class='line'>    // index "helloeveryone" and the type "person", sorted by time.
</span><span class='line'>    do model::search(es) |bld| {
</span><span class='line'>        bld
</span><span class='line'>            .set_indices(~["helloeveryone"])
</span><span class='line'>            .set_types(~["person"])
</span><span class='line'>            .set_source(*json_dict_builder()
</span><span class='line'>                .insert("size", 50.0)
</span><span class='line'>                .insert_list("sort", |bld|
</span><span class='line'>                    bld.push_dict(|bld|
</span><span class='line'>                        bld.insert("timestamp", "desc");
</span><span class='line'>                    });
</span><span class='line'>                })
</span><span class='line'>            );
</span><span class='line'>    }.map(|model|
</span><span class='line'>        // Construct a person model from the raw model data.
</span><span class='line'>        _person(model)
</span><span class='line'>    )
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Here, since <code>person</code> is just a type alias, we can also create a function called
<code>person</code>. The underlying <code>_person</code> constructor then can be shared with
multiple functions, which lets us simulate having multiple constructors. So,
the users of the model have a clean api, which is exactly what we want.</p>

<p>We&rsquo;re almost done, so lets finish up and tie everything together in our <code>main</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>fn main() {
</span><span class='line'>    // Create a zeromq context that MRE will use to talk to Mongrel2 and
</span><span class='line'>    // Elasticsearch.
</span><span class='line'>    let zmq = alt zmq::init(1) {
</span><span class='line'>        ok(ctx) { ctx }
</span><span class='line'>        err(e) { fail e.to_str() }
</span><span class='line'>    };
</span><span class='line'>
</span><span class='line'>    let mre = mre::mre(zmq, ...);
</span><span class='line'>
</span><span class='line'>    // Connect to Elasticsearch, which we'll use as our database.
</span><span class='line'>    let es = elasticsearch::connect_with_zmq(zmq, "tcp://localhost:9700");
</span><span class='line'>
</span><span class='line'>    // Show who we'll say hello to.
</span><span class='line'>    do mre.get("^/$") |_req, rep, _m| {
</span><span class='line'>        // Fetch the people we've greeted.
</span><span class='line'>        let people = person::last_50(es);
</span><span class='line'>
</span><span class='line'>        // We want to render out our responses using mustache, so we need
</span><span class='line'>        // to convert our model over to something mustache can handle.
</span><span class='line'>        let template = mustache::render_file("index", hash_from_strs(~[
</span><span class='line'>            ("names", do people.map |person| {
</span><span class='line'>                hash_from_strs(~[
</span><span class='line'>                    ("name", person.name())
</span><span class='line'>                ])
</span><span class='line'>            }.to_mustache())
</span><span class='line'>        ]));
</span><span class='line'>               
</span><span class='line'>        rep.reply_html(200u, template)
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    // Add a new person to greet.
</span><span class='line'>    do mre.post("^/$") |req, rep, _m| {
</span><span class='line'>        // Parse the form data.
</span><span class='line'>        let form = uri::decode_form_urlencoded(*req.body());
</span><span class='line'>
</span><span class='line'>        alt form.find("name") {
</span><span class='line'>          none {
</span><span class='line'>            rep.reply_http(400u, "missing name");
</span><span class='line'>          }
</span><span class='line'>          some(names) {
</span><span class='line'>            // Create and save our person. If successful, redirect back to
</span><span class='line'>            // the front page.
</span><span class='line'>            let person = person::person(es, (*names)[0u]);
</span><span class='line'>
</span><span class='line'>            alt person.create() {
</span><span class='line'>              ok(()) { rep.reply_redirect("/") }
</span><span class='line'>              err(e) {
</span><span class='line'>                // Uh oh, something bad happened. Let's just display the
</span><span class='line'>                // error back to the user for now.
</span><span class='line'>                rep.reply_http(500u, e.msg)
</span><span class='line'>              }
</span><span class='line'>            }
</span><span class='line'>          }
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    // Finally, start the MRE event loop.
</span><span class='line'>    mre.run();
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>Middleware</h2>

<p>As you probably saw in the <code>mre::mre</code> constructor, MRE has some basic
support for middleware. Creating middleware is pretty easy. It&rsquo;s just a
function that matches this interface (That type variable matches the return
type for the closure passed in to <code>mre::mre</code>):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>type middleware&lt;T&gt; = fn@(@request&lt;T&gt;, @response) -&gt; bool;</span></code></pre></td></tr></table></div></figure>


<p>Middleware gets called on each request in order, and is able to
read the request and it&rsquo;s headers, and modify the response hooks. Here&rsquo;s
<code>mre::middleware::logger</code>, to show how it works:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>fn logger&lt;T: copy&gt;(logger: io::writer) -&gt; middleware&lt;T&gt; {
</span><span class='line'>    |req: @request&lt;T&gt;, rep: @response| {
</span><span class='line'>        let old_end = rep.end;
</span><span class='line'>        rep.end = || {
</span><span class='line'>            let address = alt req.find_header("x-forwarded-for") {
</span><span class='line'>              none { @"-" }
</span><span class='line'>              some(address) { address }
</span><span class='line'>            };
</span><span class='line'>
</span><span class='line'>            let method = alt req.find_header("METHOD") {
</span><span class='line'>              none { @"-" }
</span><span class='line'>              some(method) { method }
</span><span class='line'>            };
</span><span class='line'>
</span><span class='line'>            let len = alt rep.find_header("Content-Length") {
</span><span class='line'>              none { @"-" }
</span><span class='line'>              some(len) { len }
</span><span class='line'>            };
</span><span class='line'>
</span><span class='line'>            logger.write_line(#fmt("%s - %s [%s] \"%s %s\" %u %s",
</span><span class='line'>                *address,
</span><span class='line'>                "-",
</span><span class='line'>                time::now().strftime("%d/%m/%Y:%H:%M:%S %z"),
</span><span class='line'>                *method,
</span><span class='line'>                *req.path(),
</span><span class='line'>                rep.code,
</span><span class='line'>                *len));
</span><span class='line'>
</span><span class='line'>            old_end();
</span><span class='line'>        };
</span><span class='line'>
</span><span class='line'>        true
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>MRE also includes a <code>mre::middleware::session</code> middleware, which implements a
traditional cookie-based session authentication scheme. This one is
unfortunately a little more complicated to use. Starting off, you need to
create a new datatype to store the session data and give a constructor to <code>mre</code>
on how to make this per-request data:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>type data = @{
</span><span class='line'>    mut session: option&lt;mre::session::session&gt;,
</span><span class='line'>    mut user: option&lt;mre::user::user&gt;,
</span><span class='line'>};
</span><span class='line'>
</span><span class='line'>let middleware = ~[
</span><span class='line'>      mre::middleware::logger(io::stdout()),
</span><span class='line'>      mre::middleware::session(es,
</span><span class='line'>              @"blog",
</span><span class='line'>              @"blog",
</span><span class='line'>              @"session",
</span><span class='line'>              |req: @request&lt;data&gt;, session, user| {
</span><span class='line'>                      req.data.session = some(session);
</span><span class='line'>                      req.data.user = some(user);
</span><span class='line'>              }
</span><span class='line'>      )
</span><span class='line'>];
</span><span class='line'>
</span><span class='line'>let mre = mre::mre(zmq,
</span><span class='line'>      some("F0D32575-2ABB-4957-BC8B-12DAC8AFF13A"),
</span><span class='line'>      ~["tcp://127.0.0.1:9998"],
</span><span class='line'>      ~["tcp://127.0.0.1:9999"],
</span><span class='line'>      middleware,
</span><span class='line'>      || @{ mut session: none, mut user: none }
</span><span class='line'>);</span></code></pre></td></tr></table></div></figure>


<p>Then you access this data through the <code>request.data</code> member:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>do app.post("^/$") |req, rep, _m| {
</span><span class='line'>    let id = alt req.user {
</span><span class='line'>      none { @"world" }
</span><span class='line'>      some(user) { user.id() }
</span><span class='line'>    };
</span><span class='line'>
</span><span class='line'>      rep.reply_html(200u,
</span><span class='line'>              "&lt;html&gt;\n" +
</span><span class='line'>        "&lt;body&gt;\n" +
</span><span class='line'>        "&lt;h1&gt;Hello " + *id + "!&lt;/h1&gt;\n" + 
</span><span class='line'>        "&lt;/body&gt;\n" +
</span><span class='line'>        "&lt;/html&gt;")
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>See the <a href="https://github.com/erickt/mre/tree/master/examples/blog">blog</a> for a
complete example.</p>
]]></content>
  </entry>
  
</feed>
